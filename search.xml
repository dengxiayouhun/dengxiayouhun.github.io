<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DOS命令行的简单操作</title>
    <url>/2021/07/19/DOS%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="Dos命令行的作用"><a href="#Dos命令行的作用" class="headerlink" title="Dos命令行的作用"></a>Dos命令行的作用</h2><p>通过在控制台输入特定指令使计算机完成一些操作，实现人机交互。</p>
<h2 id="打开控制台"><a href="#打开控制台" class="headerlink" title="打开控制台"></a>打开控制台</h2><p>开始+R打开快捷运行窗口，输入cmd打开控制台。</p>
<p><img src="https://i.loli.net/2021/07/19/UAZIDxrnsKVYtpw.jpg" alt="控制台"></p>
<h2 id="常见Dos命令行"><a href="#常见Dos命令行" class="headerlink" title="常见Dos命令行"></a>常见Dos命令行</h2><h4 id="打开当前目录"><a href="#打开当前目录" class="headerlink" title="打开当前目录"></a>打开当前目录</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法:</span></span><br><span class="line">dir</span><br><span class="line"><span class="comment">//作用：</span></span><br><span class="line">列出当前目录下的文件和和文件夹。</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/07/19/wJghOLvdmNyX18Q.jpg" alt="dir"></p>
<h4 id="创建新文件夹"><a href="#创建新文件夹" class="headerlink" title="创建新文件夹"></a>创建新文件夹</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法:</span></span><br><span class="line">md</span><br><span class="line"><span class="comment">//作用：</span></span><br><span class="line">在当前目录新建文件夹</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/07/19/aX73l9xEOyFQiSW.jpg" alt="md"></p>
<p><img src="https://i.loli.net/2021/07/19/DJYkxZCnpavQbrc.jpg" alt="md"></p>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法:</span></span><br><span class="line">rd</span><br><span class="line">del</span><br><span class="line"><span class="comment">//作用：</span></span><br><span class="line">删除当前目录下的空文件夹</span><br><span class="line">删除当前目录下的文件或者清空文件夹</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/07/19/XMp1HDtzyrGA5cE.jpg" alt="rd"></p>
<p><img src="https://i.loli.net/2021/07/19/FjOspAvorzPh3Lc.jpg" alt="del"></p>
<h4 id="进入文件夹"><a href="#进入文件夹" class="headerlink" title="进入文件夹"></a>进入文件夹</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法：</span></span><br><span class="line">cd</span><br><span class="line"><span class="comment">//作用：</span></span><br><span class="line">进入文件</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/07/19/iXraNLjwC4Rv2gq.jpg" alt="进入D盘"></p>
<p><img src="https://i.loli.net/2021/07/19/xoP2Yf71DcyIeGQ.jpg" alt="进入文件夹"></p>
<p><img src="https://i.loli.net/2021/07/19/x9CauovqGc23wF1.jpg" alt="cd \ "></p>
<p>)</p>
<h4 id="返回上一级目录"><a href="#返回上一级目录" class="headerlink" title="返回上一级目录"></a>返回上一级目录</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法：</span></span><br><span class="line">cd..</span><br><span class="line">cd\</span><br><span class="line"><span class="comment">//作用：</span></span><br><span class="line">返回上一级目录</span><br><span class="line">返回主根目录</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/07/19/isV14gIWtjDwKBq.jpg" alt="cd..."></p>
<p><img src="https://i.loli.net/2021/07/19/BitazJ3Yhf9MuS7.jpg" alt="cd \ "></p>
<h4 id="退出dos命令行控制台"><a href="#退出dos命令行控制台" class="headerlink" title="退出dos命令行控制台"></a>退出dos命令行控制台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">exit</span><br><span class="line"><span class="comment">//作用：</span></span><br><span class="line">退出控制台</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/07/19/6bXLPRAMredIHQS.jpg" alt="exit"></p>
]]></content>
      <tags>
        <tag>DOS命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse的使用教程</title>
    <url>/2021/09/03/Eclipse%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>跳转我的另一篇博客</p>
<p><a href="https://dengxiayouhun.github.io/2021/07/22/Java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">Java环境搭建</a></p>
<h2 id="下载Eclipse"><a href="#下载Eclipse" class="headerlink" title="下载Eclipse"></a>下载Eclipse</h2><p><a href="https://www.eclipse.org/">官网下载</a></p>
<h2 id="创建一个工作区（workspace）"><a href="#创建一个工作区（workspace）" class="headerlink" title="创建一个工作区（workspace）"></a>创建一个工作区（workspace）</h2><p>工作区就是一个目录，用于存放程序和程序所用到的资源，中间缓存文件也在工作区中。</p>
<p>首先，随便在自己想要的位置建一个目录。</p>
<p><img src="https://i.loli.net/2021/09/05/xRy7XTQ6aLEJN53.jpg"></p>
<p>打开Eclipse</p>
<p><img src="https://i.loli.net/2021/09/05/xpLKJuqH5QSvwky.jpg"></p>
<p>把建立的目录作为工作区。注意：红线标注的选项不要勾选，否则以后进入Eclipse就只能默认进入这个工作区。</p>
<p><img src="https://i.loli.net/2021/09/05/zWfLxiESy2MAUnN.jpg"></p>
<p>会出现Welcome页面，关掉它。</p>
<h2 id="进行一些主题设置"><a href="#进行一些主题设置" class="headerlink" title="进行一些主题设置"></a>进行一些主题设置</h2><h3 id="透视图"><a href="#透视图" class="headerlink" title="透视图"></a>透视图</h3><p><img src="https://i.loli.net/2021/09/05/29mDOSVtMcGPy7Q.jpg"></p>
<p>透视图就是有右上角标红的那个，最好设置成Java EE，可以点击标黑的图标进行性透视图设置</p>
<p><img src="https://i.loli.net/2021/09/05/ZQ2RNJK4Ve6TC9A.jpg"></p>
<p>标红的就是Java EE。</p>
<h3 id="调整组件"><a href="#调整组件" class="headerlink" title="调整组件"></a>调整组件</h3><p><img src="https://i.loli.net/2021/09/06/XvZDli2OmGh4178.jpg"></p>
<p>通过左上角标红的图标可以搜索组件。</p>
<p><img src="https://i.loli.net/2021/09/06/WoYl4TtXrsSLVjp.jpg"></p>
<p>把页面设置成这样既可。</p>
<h4 id="编码集"><a href="#编码集" class="headerlink" title="编码集"></a>编码集</h4><p>把编码集修改为UTF-8</p>
<p><img src="https://i.loli.net/2021/09/06/ZSwEQGnlpTqbFUr.jpg"></p>
<p>菜单-Windows-Preference-General-Workspace</p>
<ul>
<li><p>为什么要修改字符集？</p>
<p>因为我们编码通常是基于UTF-8的，如果Eclipse是基于其他字符集，那么我们的编码就会出现乱码。</p>
</li>
</ul>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p><img src="https://i.loli.net/2021/09/06/MBFabTZC9y5kYNp.jpg"></p>
<p>菜单-Windows-Preference-General-Appearence-Colors and Fonts-Basic-Text Font</p>
<p><img src="https://i.loli.net/2021/09/06/St5ekPWENhLcs8U.jpg"></p>
<p>一般来说，字体大小设为14或者16即可。</p>
<h3 id="New的设置"><a href="#New的设置" class="headerlink" title="New的设置"></a>New的设置</h3><p><img src="https://i.loli.net/2021/09/06/1Kw8JFgsxuhW3pP.jpg"></p>
<p>Windows-Perspective-Customize Perspective-Menu Visibility-File-New</p>
<p><img src="https://i.loli.net/2021/09/06/Jfy57kmd3TXQgit.jpg"></p>
<p>勾选这些即可</p>
<h2 id="Hello-World！"><a href="#Hello-World！" class="headerlink" title="Hello World！"></a>Hello World！</h2><p>New一个Java Project</p>
<p><img src="https://i.loli.net/2021/09/06/T9IOJAvbfrwP13V.jpg"></p>
<p><img src="https://i.loli.net/2021/09/06/a6ZoXK5qfDed2vA.jpg"></p>
<p>在src下面New一个Package，然后在Package下面New一个Class。</p>
<p><img src="https://i.loli.net/2021/09/06/TS52q6nKDQBceoH.jpg"></p>
<p>然后写一个Hello World程序</p>
<p><img src="https://i.loli.net/2021/09/06/iZ7JKbWCgMpeyhT.jpg"></p>
<p>Run as运行</p>
<p><img src="https://i.loli.net/2021/09/06/wCImrDQ1JOF9BLv.jpg"></p>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续 . . ."></a>未完待续 . . .</h2>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中如何输出char字符</title>
    <url>/2021/09/28/Java%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BE%93%E5%87%BAchar%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="情景回顾："><a href="#情景回顾：" class="headerlink" title="情景回顾："></a>情景回顾：</h3><p>今天练习switch_case，遇到这么一个题：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用 switch 把小写类型的 char型转为大写。只转换 a, b, c, d, e. 其它的输</span></span><br><span class="line"><span class="comment">出 “other”。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>在这道题中，我们就不得不输入char类型的字符。</p>
<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>在Java中我们通过Scanner类来完成输入操作，然而Scanner中没有char类型对应的方法。</p>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>既然我们无法通过Scanner类的方法来输入char类型，那么我们可以通过其他类的方法来完成char字符的输入。</p>
<p>String类是有一个一个的字符组成的，如果我们能获得String类的一个字符就能够获得char类型的字符，而String类也提供了这样的方法: charAt</p>
<h4 id="API文档描述："><a href="#API文档描述：" class="headerlink" title="API文档描述："></a>API文档描述：</h4><p><img src="https://i.loli.net/2021/09/28/TGUHu97B8KqbrXE.jpg"></p>
<h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scanner_char_test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//输入一个char类型</span></span><br><span class="line">		System.out.println(<span class="string">&quot;请输入一个字母：&quot;</span>);</span><br><span class="line">		String str = scan.nextLine();</span><br><span class="line">		<span class="keyword">char</span> alphabet = str.charAt(<span class="number">0</span>);</span><br><span class="line">		<span class="comment">//输出输入的结果</span></span><br><span class="line">		System.out.println(<span class="string">&quot;您输入的字母是：&quot;</span> + alphabet);</span><br><span class="line">		<span class="comment">//释放scan申请的空间</span></span><br><span class="line">		scan.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><p><img src="https://i.loli.net/2021/09/28/cDahyjPEBIvVlM8.jpg"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>踩坑小记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Java作业索引</title>
    <url>/2021/10/02/Java%E4%BD%9C%E4%B8%9A%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><table>
<thead>
<tr>
<th>日常作业：</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://dengxiayouhun.github.io/2021/10/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%83%E4%B9%A0%E4%BD%9C%E4%B8%9A/">字符串练习</a></td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>选做作业:</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://dengxiayouhun.github.io/2021/10/01/%E9%9A%8F%E6%9C%BA%E7%82%B9%E5%90%8D%E5%B0%8F%E7%A8%8B%E5%BA%8F/">随机点名小程序</a></td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础程序设计之数组</title>
    <url>/2021/10/05/Java%E5%9F%BA%E7%A1%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="一维数组："><a href="#一维数组：" class="headerlink" title="一维数组："></a>一维数组：</h2><h2 id="二维数组："><a href="#二维数组：" class="headerlink" title="二维数组："></a>二维数组：</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java后端学习路线及规划</title>
    <url>/2021/07/17/Java%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E4%B8%8E%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><blockquote>
<h2 id="观前提示"><a href="#观前提示" class="headerlink" title="观前提示"></a>观前提示</h2><p>建议心态乐观的小伙伴展开折叠的代码块观看呦~~</p>
<p>想看思维导图的可以直接拉到最后 (&gt;_&lt;) !</p>
<p><img src="https://i.loli.net/2021/07/18/Ipn9jcsRz63wLGE.png" alt="滑稽"></p>
<p>友情提示：右下角点击设置，可开启极简阅读模式 ！</p>
</blockquote>
<h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a>Java语言</h3><ul>
<li><p>语言基础</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 基础语法</span><br><span class="line"><span class="number">2.</span> 面向对象</span><br><span class="line"><span class="number">3.</span> 接口</span><br><span class="line"><span class="number">4.</span> 容器</span><br><span class="line"><span class="number">5.</span> 异常</span><br><span class="line"><span class="number">6.</span> 泛式</span><br><span class="line"><span class="number">7.</span> 反射</span><br><span class="line"><span class="number">8.</span> 注解</span><br><span class="line"><span class="number">9.</span> I/O</span><br><span class="line"><span class="number">10.</span> ~~图形化（Spring）~~</span><br></pre></td></tr></table></figure></li>
<li><p>Java虚拟机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 类加载机制</span><br><span class="line"><span class="number">2.</span> 字节码执行机制</span><br><span class="line"><span class="number">3.</span> JVM内存模型</span><br><span class="line"><span class="number">4.</span> GC垃圾回收</span><br><span class="line"><span class="number">5.</span> JVM性能监控与故障定位</span><br><span class="line"><span class="number">6.</span> JVM调优</span><br></pre></td></tr></table></figure></li>
<li><p>多线程/并发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 并发编程基础</span><br><span class="line"><span class="number">2.</span> 线程池</span><br><span class="line"><span class="number">3.</span> 锁</span><br><span class="line"><span class="number">4.</span> 并发容器</span><br><span class="line"><span class="number">5.</span> 原子类</span><br><span class="line"><span class="number">6.</span> JUC并发工具类</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul>
<li><p>数据结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 字符串</span><br><span class="line"><span class="number">2.</span> 数组</span><br><span class="line"><span class="number">3.</span> 链表</span><br><span class="line"><span class="number">4.</span> 堆、栈、队列</span><br><span class="line"><span class="number">5.</span> 二叉树</span><br><span class="line"><span class="number">6.</span> 哈希</span><br><span class="line"><span class="number">7.</span> 图</span><br></pre></td></tr></table></figure></li>
<li><p>算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 排序</span><br><span class="line"><span class="number">2.</span> 查找</span><br><span class="line"><span class="number">3.</span> 贪心</span><br><span class="line"><span class="number">4.</span> 分治</span><br><span class="line"><span class="number">5.</span> 动态规划</span><br><span class="line"><span class="number">6.</span> 回溯</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><ul>
<li><p>ARP协议</p>
</li>
<li><p>IP协议、ICMP协议</p>
</li>
<li><p>TCP、UDP协议</p>
</li>
<li><p>DNS/HTTP/HTTPS协议</p>
</li>
<li><p>Session/Cookie</p>
</li>
<li><p>SQL/数据库</p>
</li>
<li><p>SQL语句的书写</p>
</li>
<li><p>SQL语句的优化</p>
</li>
<li><p>事务/隔离级别</p>
</li>
<li><p>索引</p>
</li>
<li><p>锁</p>
</li>
</ul>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li><p>进程、线程</p>
</li>
<li><p>并发、锁</p>
</li>
<li><p>内存管理和调度</p>
</li>
<li><p>I/O原理</p>
</li>
</ul>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul>
<li><p>单例</p>
</li>
<li><p>工厂</p>
</li>
<li><p>代理</p>
</li>
<li><p>策略</p>
</li>
<li><p>模板方法</p>
</li>
<li><p>观察者</p>
</li>
<li><p>适配器</p>
</li>
<li><p>责任链</p>
</li>
<li><p>建造者</p>
</li>
</ul>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="集成开发环境"><a href="#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h3><ul>
<li>Eclipse</li>
<li>IDEA</li>
<li>VSCode</li>
</ul>
<h3 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h3><ul>
<li>常用命令</li>
<li>Shell脚本</li>
</ul>
<h3 id="项目管理工具-构建工具"><a href="#项目管理工具-构建工具" class="headerlink" title="项目管理工具/构建工具"></a>项目管理工具/构建工具</h3><ul>
<li>Maven</li>
<li>Gradle</li>
</ul>
<h3 id="代码管理工具"><a href="#代码管理工具" class="headerlink" title="代码管理工具"></a>代码管理工具</h3><ul>
<li>SVN</li>
<li>Git</li>
</ul>
<h2 id="应用框架"><a href="#应用框架" class="headerlink" title="应用框架"></a>应用框架</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul>
<li><p>Spring家族框架</p>
<ol>
<li><p>Spring</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、IOC</span><br><span class="line"><span class="number">2</span>、AOP</span><br></pre></td></tr></table></figure></li>
<li><p>SpringMVC</p>
</li>
<li><p>Spring Boot</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、自动配置、开箱即用</span><br><span class="line"><span class="number">2</span>、整合Web</span><br><span class="line"><span class="number">3</span>、整合数据库（事务问题）</span><br><span class="line"><span class="number">4</span>、整合权限</span><br><span class="line">   <span class="number">1</span>、Shiro</span><br><span class="line">   <span class="number">2</span>、Spring Security</span><br><span class="line"><span class="number">5</span>、整合各种中间件</span><br><span class="line">   <span class="number">1</span>、Redis</span><br><span class="line">   <span class="number">2</span>、MQ</span><br><span class="line">   <span class="number">3</span>、RPC框架</span><br><span class="line">   <span class="number">4</span>、NIO框架</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>服务器软件</p>
<ol>
<li><p>Web服务器 —— Nginx</p>
</li>
<li><p>应用服务器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Tomcat</span><br><span class="line"><span class="number">2</span>、Jetty</span><br><span class="line"><span class="number">3</span>、Undertow</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>中间件</p>
<ol>
<li><p>缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redis</span><br><span class="line">  1、5大基础数据类型</span><br><span class="line">  2、事务</span><br><span class="line">  3、管道</span><br><span class="line">  4、持久化</span><br><span class="line">  5、集群</span><br></pre></td></tr></table></figure></li>
<li><p>消息队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、RocketMQ</span><br><span class="line"><span class="number">2</span>、RabbitMQ</span><br><span class="line"><span class="number">3</span>、Kafka</span><br></pre></td></tr></table></figure></li>
<li><p>RPC框架</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Dubbo</span><br><span class="line"><span class="number">2</span>、GRPC</span><br><span class="line"><span class="number">3</span>、Thrift</span><br><span class="line"><span class="number">4</span>、Spring Cloud</span><br><span class="line"><span class="number">5</span>、Netty</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>数据库框架</p>
<ol>
<li><p>GRM层框架</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、MyBatis</span><br><span class="line"><span class="number">2</span>、Hibernate</span><br><span class="line"><span class="number">3</span>、JPA</span><br></pre></td></tr></table></figure></li>
<li><p>连接池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Druid</span><br><span class="line"><span class="number">2</span>、HikariCP</span><br><span class="line"><span class="number">3</span>、C3P0</span><br></pre></td></tr></table></figure></li>
<li><p>分库分表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、MyCat</span><br><span class="line"><span class="number">2</span>、Sharding-JDBC</span><br><span class="line"><span class="number">3</span>、Sharding-Sphere</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>搜索引擎</p>
<ol>
<li>ElassticSearch</li>
<li>Soir</li>
</ol>
</li>
<li><p>分布式/微服务</p>
<ol>
<li><p>服务发现/注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Eureka</span><br><span class="line"><span class="number">2</span>、Consul</span><br><span class="line"><span class="number">3</span>、Zookeeper</span><br><span class="line"><span class="number">4</span>、Nacos</span><br></pre></td></tr></table></figure></li>
<li><p>网关</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Zuul</span><br><span class="line"><span class="number">2</span>、Gateway</span><br></pre></td></tr></table></figure></li>
<li><p>服务调用（负载均衡）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Ribbon</span><br><span class="line"><span class="number">2</span>、Feign</span><br></pre></td></tr></table></figure></li>
<li><p>熔断/降级</p>
<ul>
<li>Hystrix</li>
</ul>
</li>
<li><p>配置中心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Config</span><br><span class="line"><span class="number">2</span>、Apollo</span><br><span class="line"><span class="number">3</span>、Nacos</span><br></pre></td></tr></table></figure></li>
<li><p>认证和鉴权</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Spring Security</span><br><span class="line"><span class="number">2</span>、QAuth2</span><br><span class="line"><span class="number">3</span>、SSO单点登录</span><br></pre></td></tr></table></figure></li>
<li><p>分布式事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、JTA接口——Atomikos组件</span><br><span class="line"><span class="number">2</span>、2PC、3PC</span><br><span class="line"><span class="number">3</span>、XA模式</span><br><span class="line"><span class="number">4</span>、TPC模式</span><br><span class="line">   <span class="number">1</span>、tcc-transaction</span><br><span class="line">   <span class="number">2</span>、ByteTCC</span><br><span class="line">   <span class="number">3</span>、EasyTransaction</span><br><span class="line">   <span class="number">4</span>、Seata</span><br><span class="line"><span class="number">5</span>、SAGA模式</span><br><span class="line">   <span class="number">1</span>、ServiceComb</span><br><span class="line">   <span class="number">2</span>、Seata</span><br><span class="line"><span class="number">6</span>、LCN模式——tx-lcn</span><br></pre></td></tr></table></figure></li>
<li><p>任务调度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Quartz</span><br><span class="line"><span class="number">2</span>、Elastic-Job</span><br></pre></td></tr></table></figure></li>
<li><p>链路追踪和监控</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Zipkin</span><br><span class="line"><span class="number">2</span>、Sleuth</span><br><span class="line"><span class="number">3</span>、Skywalking</span><br></pre></td></tr></table></figure></li>
<li><p>日志分析与监控</p>
<ul>
<li><p>ELK</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、ElasticSearch</span><br><span class="line"><span class="number">2</span>、Logstash</span><br><span class="line"><span class="number">3</span>、Kibana</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>虚拟化/容器化</p>
<ol>
<li><p>容器技术</p>
<ul>
<li>Docker</li>
</ul>
</li>
<li><p>容器编排技术</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Kubernetes</span><br><span class="line"><span class="number">2</span>、Swarm</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul>
<li><p>基础套餐</p>
<ol>
<li><p>三大件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、HTML</span><br><span class="line"><span class="number">2</span>、JavaScript</span><br><span class="line"><span class="number">3</span>、CSS</span><br></pre></td></tr></table></figure></li>
<li><p>基础库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、jquery</span><br><span class="line"><span class="number">2</span>、Ajax</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>模板框架</p>
<ol>
<li>JSP/JSTL</li>
<li>Thymeleaf</li>
<li>FreeMarker</li>
</ol>
</li>
<li><p>组件化框架</p>
<ol>
<li>Node</li>
<li>VUE</li>
<li>React</li>
<li>Angular</li>
</ol>
</li>
</ul>
<h2 id="运维知识"><a href="#运维知识" class="headerlink" title="*运维知识"></a>*运维知识</h2><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><ul>
<li>Nginx</li>
</ul>
<h3 id="应用服务器"><a href="#应用服务器" class="headerlink" title="应用服务器"></a>应用服务器</h3><ul>
<li>Tomcat</li>
<li>Jetty</li>
<li>Undertow</li>
</ul>
<h3 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h3><h3 id="持续集成-持续部署"><a href="#持续集成-持续部署" class="headerlink" title="持续集成/持续部署"></a>持续集成/持续部署</h3><ul>
<li>Jenkins</li>
</ul>
<h3 id="代码质量检查"><a href="#代码质量检查" class="headerlink" title="代码质量检查"></a>代码质量检查</h3><ul>
<li>sonar</li>
</ul>
<h3 id="日志收集和分析"><a href="#日志收集和分析" class="headerlink" title="日志收集和分析"></a>日志收集和分析</h3><ul>
<li>ELK</li>
</ul>
<h2 id="成神之路（在梦里）"><a href="#成神之路（在梦里）" class="headerlink" title="*成神之路（在梦里）"></a>*成神之路（在梦里）</h2><ul>
<li><p>徒手撕源码</p>
</li>
<li><p>光脚造轮子</p>
</li>
<li><p>闭着眼睛深度调优</p>
</li>
<li><p>吊打面试官</p>
</li>
</ul>
<hr>
<p><img src="https://i.loli.net/2021/07/18/Ipn9jcsRz63wLGE.png" alt="滑稽"></p>
<p>​             很恐怖！兄弟们，有没有还没有入门就已经入土的感觉呀！不过不用过分担心，这些很多东西都不是在大学就需要学完的。而且，并不是每一项都需要深入学习，有些只需要了解即可。当然，学的越多竞争力越大这是肯定的。</p>
<p><img src="https://i.loli.net/2021/07/18/x1cbzBjWm3CfvhQ.png" alt="吃瓜ing"></p>
<hr>
<h2 id="学习计划（暂定）"><a href="#学习计划（暂定）" class="headerlink" title="## 学习计划（暂定）"></a>## 学习计划（暂定）</h2><table>
<thead>
<tr>
<th>阶段</th>
<th>资料</th>
<th>目标</th>
</tr>
</thead>
<tbody><tr>
<td>第一阶段</td>
<td>Java SE教学视频（+一本教科书）</td>
<td>入门了解Java</td>
</tr>
<tr>
<td>第二阶段</td>
<td>《Java核心技术 卷Ⅰ 卷Ⅱ》（+《Java编程思想》）</td>
<td>深入理解Java</td>
</tr>
<tr>
<td>第三阶段</td>
<td>《Java并发编程实战》《Java网络编程》《深入理解Java虚拟机》</td>
<td>学习Java虚拟机（JVM）、并发编程、多线程编程、网络编程</td>
</tr>
<tr>
<td>第四阶段</td>
<td>《深入分析Java Web技术内幕》（+《TCP、IP详解 卷Ⅰ》）</td>
<td>进入Java Web、设计、架构方面</td>
</tr>
<tr>
<td>贯穿始终</td>
<td>《大话数据结构》（《算法》）、《计算机网络 自顶向下》《TCP、IP详解 卷Ⅰ》（二选一）、《鸟哥的Linux私房菜》</td>
<td>数据结构与算法、操作系统、计算机网络、计算机组成原理、编译原理</td>
</tr>
<tr>
<td>工具方面</td>
<td>《鸟哥的Linux私房菜》</td>
<td>Linux系统</td>
</tr>
<tr>
<td>应用框架</td>
<td>《Spring实战》《Spring Boot实战》《Spring MVC+MyBatis开发从入门到项目实战》《Spring技术内幕》（可以挑战一下自己，）</td>
<td>Spring家族</td>
</tr>
</tbody></table>
<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://i.loli.net/2021/07/19/q1QM5XCRLy2j8BE.jpg" alt="思维导图"></p>
<hr>
<p>大家要注意保护自己的头发呦~</p>
<p><img src="https://i.loli.net/2021/07/19/7Lx2PbNjnfDurVg.png" alt="休息"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Java环境搭建</title>
    <url>/2021/07/22/Java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="JRE与JDK"><a href="#JRE与JDK" class="headerlink" title="JRE与JDK"></a>JRE与JDK</h1><h2 id="什么是JRE"><a href="#什么是JRE" class="headerlink" title="什么是JRE ?"></a>什么是JRE ?</h2><p>JRE全称Java Runtime Environment，即Java运行环境。</p>
<p>其主要包括Java虚拟机和Java的一些核心类库，用来运行Java程序。</p>
<h2 id="什么是JDK？"><a href="#什么是JDK？" class="headerlink" title="什么是JDK？"></a>什么是JDK？</h2><p>JDK全称Java Development Kit , 即Java开发工具包。</p>
<p>其主要包括Java的开发工具（编译工具、打包工具等），也包括了JRE，用来开发运行Java程序。</p>
<p>*注：因此，安装了JDk就不用安装JRE。</p>
<h1 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h1><p><a href="https://www.oracle.com/">官方网址</a></p>
<p><img src="https://i.loli.net/2021/07/22/aWqHLzuyrgO7k4R.jpg" alt="JDK"></p>
<p>点击Products -&gt; Java</p>
<p><img src="https://i.loli.net/2021/07/22/qGkfjZtyzEp5PvQ.jpg" alt="JDk"></p>
<p>点击Download Java now</p>
<p><img src="https://i.loli.net/2021/07/22/Fum4IVRv3OBoUdP.jpg" alt="JDK"></p>
<p>点击 JDK Download</p>
<p><img src="https://i.loli.net/2021/07/22/YrsZ8gXC5PHFRmb.jpg" alt="JDK"></p>
<p>点击Windows x64 Installer 行的下载，安装即可（也可以i下载Windows x64 Compressed Archive 后解压到自己想存放的位置）</p>
<p><img src="https://i.loli.net/2021/07/23/62OZUkx3umwhWc8.jpg" alt="JDK"></p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="为什么要配置环境"><a href="#为什么要配置环境" class="headerlink" title="为什么要配置环境 ?"></a>为什么要配置环境 ?</h2><p>首先，我们要知道在命令行中我们只能打开当前目录下的文件，否则就会报错,如下图所示：</p>
<p><img src="https://i.loli.net/2021/07/23/S7OygTc1W59JHb8.jpg" alt="erro"></p>
<p>我们不可能每次开发java都要cd到对应目录下打开开发工具，这未免也太过麻烦。所以我们要通过配置环境来让我们可以在任意目录下都能够直接执行bin目录（里面都是Java开发工具）里的程序。效果如图所示：</p>
<p><img src="https://i.loli.net/2021/07/23/Powb3SQFJZeGHh7.jpg" alt="result"></p>
<h2 id="如何配置环境-？"><a href="#如何配置环境-？" class="headerlink" title="如何配置环境 ？"></a>如何配置环境 ？</h2><ol>
<li><p>打开环境变量配置窗口</p>
<p>Windows设置–&gt;系统–&gt;关于–&gt;系统信息</p>
<p><img src="https://i.loli.net/2021/07/23/qS7TwruPNB9e3ij.jpg" alt="系统信息"></p>
</li>
<li><p>高级系统设置–&gt;高级–&gt;环境变量</p>
<p><img src="https://i.loli.net/2021/07/23/9s8FBGkXMoPANtQ.jpg" alt="环境变量"></p>
</li>
<li><p>在系统变量里创建新的变量“JAVA_HOME”并将它写进Path变量里去。（这一步的目的是把bin目录的路径储存在Path中)</p>
<p><img src="https://i.loli.net/2021/07/23/7hX5ySGbRuroOPT.jpg" alt="wdad"></p>
<p><img src="https://i.loli.net/2021/07/23/S7vPB56arGyzcOg.jpg" alt="add"></p>
</li>
</ol>
<p><a href="https://dengxiayouhun.github.io/2021/09/07/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3Win10%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%97%B6Path%E5%8F%98%E9%87%8F%E5%8F%AA%E6%98%BE%E7%A4%BA%E4%B8%80%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/"><strong>如何解决Win10环境变量Path只显示一行的问题</strong></a></p>
<h2 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h2><p><img src="https://i.loli.net/2021/07/23/Powb3SQFJZeGHh7.jpg" alt="result"></p>
<p>当我们在C盘执行javac时，cmd会把命令提交给Windows系统。Windows会在当前目录里寻找，而且还会在环境变量Path的路径里寻找，因此，当我们把bin目录的路径存放在Path变量里后，我们就可以在任何目录执行bin目录里的文件了。</p>
<p>*path环境变量：Windows系统执行命令时需要搜寻的路径。</p>
<h2 id="环境的临时配置"><a href="#环境的临时配置" class="headerlink" title="环境的临时配置"></a>环境的临时配置</h2><h3 id="为什么要临时配置环境？"><a href="#为什么要临时配置环境？" class="headerlink" title="为什么要临时配置环境？"></a>为什么要临时配置环境？</h3><p>通常来说我们一般都是用自己的设备进行程序开RR发。但有些时候我们也需要插上U盘，用别人的设备进行开发。这时候，我们就不能随便改变别人设备的参数了，所以只能进行临时配置，使我们不仅能够良好的的进行开发，而且不改变设备参数。</p>
<h3 id="如何进行临时配置"><a href="#如何进行临时配置" class="headerlink" title="如何进行临时配置?"></a>如何进行临时配置?</h3><ol>
<li><p>打开cmd，执行set命令，查看环境变量</p>
<p><img src="https://i.loli.net/2021/07/23/9HcPdFA6mX3KbvB.jpg" alt="set"></p>
</li>
<li><p>执行set path，查看path变量</p>
<p><img src="https://i.loli.net/2021/07/23/HKpoLlvBsXjuNV9.jpg" alt="set path"></p>
</li>
<li><p>执行set path=bin储存路径，修改path变量（使用时，直接执行这一步即可）</p>
<p><img src="https://i.loli.net/2021/07/23/BWhqfEFiwOS63NG.jpg" alt="path="></p>
</li>
<li><p>执行set path，查看path变量</p>
<p><img src="https://i.loli.net/2021/07/23/U4hAajTluOZWr3J.jpg" alt="set path"></p>
</li>
<li><p>执行javac,结果：可执行</p>
<p><img src="https://i.loli.net/2021/07/23/5IqzjKg2yJdV3oD.jpg" alt="javac"></p>
</li>
<li><p>关闭窗口，重新打开cmd，执行set path，查看path变量，path变量未被修改</p>
<p><img src="https://i.loli.net/2021/07/23/uAsftHQyRxqZFh2.jpg" alt="set path"></p>
</li>
</ol>
<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续 . . ."></a>未完待续 . . .</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的基本程序设计结构（未完）</title>
    <url>/2021/08/23/Java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol>
<li><p>//注释(单行注释)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//打印Hello World！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HHello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>/* 注释 */(多行注释)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这个程序的作用是打印一个Hello World</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HHello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>文档注释 </p>
</li>
</ol>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>用途：在内存中划出一定大小的空间来储存一个整数</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>储存需求</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>4字节</td>
<td align="center">-2 147 4833 648~2 147 4833 647</td>
</tr>
<tr>
<td>short</td>
<td>2字节</td>
<td align="center">-32 768~32 767</td>
</tr>
<tr>
<td>long</td>
<td>8字节</td>
<td align="center">-9 233 372 036 854 775 808~-9 233 372 036 854 775 807</td>
</tr>
<tr>
<td>byte</td>
<td>1字节</td>
<td align="center">-128~127</td>
</tr>
</tbody></table>
<ul>
<li><p>Java与C / C++的区别：</p>
<ul>
<li><p>Java不如C / C++效率高，但可移植性更强：</p>
<p>和Java不同，C / C++中整型数据的储存需求不是固定的，而是根据操作系统的不同选择最高效的范围。因此，C/C++对内存的利用效率是要大于Java的。但一个在32位系统上运行的C/C++程序在16位系统上运行时会发生整数溢出的情况，因此移植性较差。而Java因为兼顾了移植性，所以才采取所有平台固定储存需求的方式，这也导致在一些内存极为珍贵的情况下，更倾向于使用C/C++来编写程序。</p>
</li>
<li><p>Java整型是不存在任何无符号（unsigned）形式的：</p>
<p>如题。其实Java也是能够使用无负数的整形的，但实际操作起来必须相当仔细。初学者不必考虑，知道即可。</p>
</li>
</ul>
</li>
</ul>
<h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>用途：在内存中划出一定大小的空间来储存一个带小数的数</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">储存需求</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">float</td>
<td align="center">4字节</td>
<td align="center">有效位数6~7位</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">8字节</td>
<td align="center">有效位数15位</td>
</tr>
</tbody></table>
<ul>
<li><p>单精度浮点型和双精度浮点型的由来</p>
<p>float和double也分别被称为单精度浮点型和双精度浮点型，这是因为double的数值精度是float的两倍。</p>
</li>
</ul>
<h3 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h3><p>用途：在内存中划出一定大小的空间来储存一个字符</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">储存需求</th>
</tr>
</thead>
<tbody><tr>
<td align="center">char</td>
<td align="center">2字节</td>
</tr>
</tbody></table>
<h3 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h3><p>即布尔类型，只有两个值：false和true，用来判定逻辑条件。且在Java中，整型值不能和布尔值交换。</p>
<h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>使用变量前必须要先声明变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 语法:</span></span><br><span class="line"><span class="comment">* 变量类型 变量名；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> number;</span><br><span class="line"><span class="keyword">double</span> grace;</span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">boolean</span> done;</span><br></pre></td></tr></table></figure>

<h4 id="补充概念"><a href="#补充概念" class="headerlink" title="*补充概念"></a>*补充概念</h4><ol>
<li><h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><p>即在Java中有特殊作用的字，比如：int / double / char 等。</p>
</li>
<li><h4 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h4><p>之现在版本中没有作为关键字但在以后版本中会成为关键字的字。</p>
</li>
<li><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>自己起的名字都叫标识符，比如：变量名、方法名、类名等</p>
<p>标识符不能是关键字或保留字。</p>
<ul>
<li>标志符命名规则<ol>
<li>只能由英文字母，0~9，下划线_或 $ 组成。</li>
<li>单下划线 _不能作为标识符</li>
<li>标识符开头不能是数字</li>
<li>标识符不能是关键字或保留字</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h3><p>对声明的变量必须进行初始化后再使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 语法</span></span><br><span class="line"><span class="comment">* 变量名=对应类型的数据;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有两种初始化变量的方法：</span></span><br><span class="line"><span class="keyword">int</span> grace;</span><br><span class="line">grace=<span class="number">100</span>;<span class="comment">//先声明，再初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> grace=<span class="number">100</span>;<span class="comment">//声明的同时，直接初始化</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在Java中，变量的声明需要尽可能接近第一次使用的地方</li>
</ul>
<h4 id="关键字var"><a href="#关键字var" class="headerlink" title="关键字var"></a>关键字var</h4><p>var :是 一种动态类型。对于局部变量，当可以从变量的初始值判断出数据类型时。就不用声明类型，直接使用关键字var即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> grace=<span class="number">100</span>;<span class="comment">//grace的类型是整型</span></span><br><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;wuze&quot;</span>;<span class="comment">//name的类型是String</span></span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>只能被赋值一次就不能修改的量叫做常量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 语法：</span></span><br><span class="line"><span class="comment">* final 数据类型 变量名=数据；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> grace=<span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>未完待续 . . . </p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table>
<thead>
<tr>
<th align="center">算术运算符</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">除</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">求余</td>
</tr>
</tbody></table>
<ul>
<li><p>除法：</p>
<ol>
<li> / 两边的数据都是整数时，为整数除法，否则为浮点除法</li>
</ol>
<p><img src="https://i.loli.net/2021/08/04/TCSY15JWkGNBtsx.jpg"></p>
<ol start="2">
<li><p>除以0</p>
<p>当整数除以0时，程序会出现异常</p>
<p><img src="https://i.loli.net/2021/08/04/9VTFYQM6uWGaXLt.jpg"></p>
<p>当浮点型数据除以0时，会显示无穷大或者NaN</p>
<p><img src="https://i.loli.net/2021/08/04/Ql4d7Jg2NUcjO9u.jpg"></p>
</li>
</ol>
</li>
</ul>
<h3 id="数学函数与常量"><a href="#数学函数与常量" class="headerlink" title="数学函数与常量"></a>数学函数与常量</h3><p>在实际应用中，数据之间的运算并不是简简单单靠算术运算符完成的。很多复杂或者特殊的运算是依靠Math库里的各种函数来实现的。合理运用Math库里的数学函数运算能够有效的提高代码的效率。</p>
<p>首先，先上代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Math库中的一些数学函数与特殊常量。</span></span><br><span class="line"><span class="comment">数学函数：pow、sqrt、floorMod、sin、cos、tan、atan、atan2、exp、log、log10、PI、E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mathematicalfunction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> number1=Math.pow(<span class="number">4</span>。<span class="number">0</span>,<span class="number">3.0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4的3次方是:&quot;</span>+number1);</span><br><span class="line">        <span class="keyword">double</span> number2=Math.sqrt(<span class="number">4.0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4的算术平方根是:&quot;</span>+number2);</span><br><span class="line">        <span class="keyword">int</span> number3=Math.floorMod(-<span class="number">7</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-7除以3的余数是:&quot;</span>+number3);</span><br><span class="line">        <span class="keyword">double</span> number4=Math.sin(Math.PI/<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;60°的正弦是:&quot;</span>+number4);</span><br><span class="line">        <span class="keyword">double</span> number5=Math.cos(Math.PI/<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;60°的余弦是:&quot;</span>+number5);</span><br><span class="line">        <span class="keyword">double</span> number6=Math.tan(Math.PI/<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;60°的正切是:&quot;</span>+number6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li><p>pow函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法：</span></span><br><span class="line">pow(x,n);</span><br><span class="line"><span class="comment">//作用：</span></span><br><span class="line">计算x的n次方</span><br></pre></td></tr></table></figure>

<p>注意：pow( )的返回值必须是double类型</p>
</li>
<li><p>sqrt函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法：</span></span><br><span class="line">sqrt(x)</span><br><span class="line"><span class="comment">//作用：</span></span><br><span class="line">计算x的算术平方根</span><br></pre></td></tr></table></figure>

<p>sqrt的返回值也必须是double</p>
</li>
<li><p>floorMod</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法：</span></span><br><span class="line">floorMod(被除数，除数)</span><br><span class="line"><span class="comment">//作用：</span></span><br><span class="line">取模运算</span><br></pre></td></tr></table></figure>

<ul>
<li><p>和%的区别</p>
<p>挖个坑，以后再填（doge）</p>
</li>
</ul>
</li>
<li><p>直接引用数学函数</p>
<p>在源文件顶部加上这行代码即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mathematicalfunction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	    <span class="keyword">double</span> number1=pow(<span class="number">4.0</span>,<span class="number">3.0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4的3次方是:&quot;</span>+number1);</span><br><span class="line">        <span class="keyword">double</span> number2=sqrt(<span class="number">4.0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4的算术平方根是:&quot;</span>+number2);</span><br><span class="line">        <span class="keyword">int</span> number3=floorMod(-<span class="number">7</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-7除以3的余数是:&quot;</span>+number3);</span><br><span class="line">        <span class="keyword">double</span> number4=sin(PI/<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;60°的正弦是:&quot;</span>+number4);</span><br><span class="line">        <span class="keyword">double</span> number5=cos(PI/<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;60°的余弦是:&quot;</span>+number5);</span><br><span class="line">        <span class="keyword">double</span> number6=tan(PI/<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;60°的正切是:&quot;</span>+number6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="数值类型之间的转换"><a href="#数值类型之间的转换" class="headerlink" title="数值类型之间的转换"></a>数值类型之间的转换</h3><h4 id="数值类型之间存在的合法转换"><a href="#数值类型之间存在的合法转换" class="headerlink" title="数值类型之间存在的合法转换"></a>数值类型之间存在的合法转换</h4><p><img src="https://i.loli.net/2021/08/05/nJif4GI2kHjA7ro.jpg"></p>
<p>实线箭头的类型转换不会有信息丢失，但虚线箭头的类型转换可能会导致信息缺失，精度降低。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Change</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number1=<span class="number">123</span>;</span><br><span class="line">        <span class="keyword">int</span> number2=<span class="number">123456789</span>;</span><br><span class="line">        <span class="keyword">float</span> number3=number1;</span><br><span class="line">        <span class="keyword">float</span> number4=number2;</span><br><span class="line">        <span class="keyword">double</span> number5=number1;</span><br><span class="line">        <span class="keyword">double</span> number6=number2;</span><br><span class="line">        System.out.println(<span class="string">&quot;123由整型转化为单精度浮点型是：&quot;</span>+number3);</span><br><span class="line">        System.out.println(<span class="string">&quot;123456789由整型转化为单精度浮点型是：&quot;</span>+number4);</span><br><span class="line">        System.out.println(<span class="string">&quot;123由整型转化为双精度浮点型是：&quot;</span>+number5);</span><br><span class="line">        System.out.println(<span class="string">&quot;123456789由整型转化为双精度浮点型是：&quot;</span>+number6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/05/MEeUAuIOhDQspWP.jpg"></p>
<h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>先看一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bad</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x=<span class="number">9.843</span>;</span><br><span class="line">        <span class="keyword">int</span> y=x;</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/05/vxNrVzKLkRWZXtQ.jpg"></p>
<p>像这种一定会损失精度的转换，在Java中是不合法的。但在有些情况下，我们又不得不进行这样的转换。所以Java为我们提供了强制类型转换的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bad</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x=<span class="number">9.83</span>;</span><br><span class="line">        <span class="keyword">int</span> y=(<span class="keyword">int</span>)x;</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/05/tJSYk6Qwh7MvbH9.jpg"></p>
<p>但是强制类型转换是直接砍掉后面的数字。要想在类型转换时四舍五入，需要借助数学函数round：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bad</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x=<span class="number">9.83</span>;</span><br><span class="line">        <span class="keyword">int</span> y=(<span class="keyword">int</span>)Math.round(x);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/05/beXAyiMjfasCw6Y.jpg"></p>
<h5 id="警告："><a href="#警告：" class="headerlink" title="警告："></a>警告：</h5><p>如无必要，最好不要使用强制类型转换，使用强制类型转换有时候能造成数值被劫夺为一个完全不同的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bad</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">400</span>;</span><br><span class="line">        <span class="keyword">byte</span> y=(<span class="keyword">byte</span>)Math.round(x);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/05/Q2qSUGvcknRzJCO.jpg"></p>
<h3 id="结合赋值和运算符"><a href="#结合赋值和运算符" class="headerlink" title="结合赋值和运算符"></a>结合赋值和运算符</h3><p>是对赋值和运算符的一种简写。比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x=x+<span class="number">4</span>;可以简写成x+=<span class="number">4</span>;<span class="comment">//所有算术运算符都可以这么做</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>如果运算符得到一个值，并且与左侧的操作数类型不同则会发生强制转换，把运算符的值强制转换为左边操作数的值，而且是直接截断，比如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strong</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">        x+=<span class="number">2.5</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/05/62GYe9faXu57oV8.jpg"></p>
<h3 id="自增和自减运算符"><a href="#自增和自减运算符" class="headerlink" title="自增和自减运算符"></a>自增和自减运算符</h3><p>由于在平时开发中，变量加一或减一都很常见。所以，java就借鉴了C / C++，推出了自增和自减运算符，即++，–。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x=x+<span class="number">1</span>;可以转换为x++;<span class="comment">//当++的位置不同时，其运算方式也会发生不同。int m=8;int n=8;int x=2*++m;//x=18,m=9int y=2*n++;//x=16,m=9</span></span><br></pre></td></tr></table></figure>

<h3 id="关系和boolean运算符"><a href="#关系和boolean运算符" class="headerlink" title="关系和boolean运算符"></a>关系和boolean运算符</h3><ul>
<li><p>关系运算符有大于( &gt; )、小于( &lt; )、大于等于( &gt;= )、小于等于( &lt;= )、等于( = ).它们的值为true / false（boolean类型）。</p>
</li>
<li><p>逻辑运算符有&amp;&amp;、||、!=,具体用法和C / C++一样。</p>
</li>
<li><p>java 也支持 ? : 三元运算符，x?a:b;</p>
<p>即若x为true则表达式的值为a,否则为b.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Three</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> y=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> number=x&lt;y?<span class="number">100</span>:<span class="number">666</span>;</span><br><span class="line">        System.out.println(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/05/yGX19bM4Oq2cdwL.jpg"></p>
</li>
</ul>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>学习位运算符之前我们要先了解计算机二进制和一些偏底层的相关知识</p>
<h4 id="数据是如何被储存在计算机的？"><a href="#数据是如何被储存在计算机的？" class="headerlink" title="数据是如何被储存在计算机的？"></a>数据是如何被储存在计算机的？</h4><p>计算机中能够储存数据的硬件只有内存和存储设备（以下统称内存），然而数据是怎么存入其中的呢？所有的数据都是有类型的，比如整型、浮点型、char型、String型等。当我们要存储数据10时，我们首先要声明变量，其次把10放进这个变量里（其实就是变量赋值），就完成了数据的储存。然而，深入到底层硬件层次，这一通操作是怎么实现的呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number;<span class="comment">//声明变量//在内内存中划出一块4个字节大小的空间口口口口口口口口 口口口口口口口口 口口口口口口口口 口口口口口口口口 口口口口口口口口，命名为number。number=10;//变量赋值//编译器把10转换为二进制1010，然后把二进制的10储存在number空间里，即0000 0000 0000 1010.//这样，一个数据就成功地存入内存里了。</span></span><br></pre></td></tr></table></figure>

<h4 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h4><ol>
<li><p>有符号数 / 无符号数</p>
<ul>
<li><p>有符号数</p>
<p>有符号数就是指一个变量既可以存储正数，也可以存储负数。这是因为有符号数的二进制首项是符号位。比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number1=<span class="number">10</span>;<span class="comment">//它储存在空间里的样子是：00000000 00000000 00000000 1010int number2=-10;//它储存在空间里的样子是：10000000 00000000 00000000 00001010</span></span><br></pre></td></tr></table></figure></li>
<li><p>无符号运算符</p>
<p>无符号数是指只能存放正数不能存放负数，其原理就是去掉了符号位，这样可以使一个变量能够存储更大的数。比如：C / C++中的unsigned int 等。</p>
</li>
</ul>
</li>
<li><p>正负数的源码、反码、补码</p>
<ul>
<li><p>正数</p>
<p>源码、反码、补码都一样。</p>
</li>
<li><p>负数</p>
<p>反码=符号位不变，其他位取反（即1-&gt;0，0-&gt;1）</p>
<p>补码=反码+1</p>
<p>0的反码补码都是0</p>
</li>
</ul>
</li>
<li><p>关于十六进制</p>
<p>十六进制和二进制刚好有四对一的关系。为了不占用太大的空间，在书写记录时，一般我们用十六进制来书写二进制。</p>
<table>
<thead>
<tr>
<th align="center">二进制</th>
<th align="center">十六进制</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0000</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">0001</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">0010</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">0011</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">0100</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">0101</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">0110</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">0111</td>
<td align="center">7</td>
</tr>
<tr>
<td align="center">1000</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">1001</td>
<td align="center">9</td>
</tr>
<tr>
<td align="center">1010</td>
<td align="center">A</td>
</tr>
<tr>
<td align="center">1011</td>
<td align="center">B</td>
</tr>
<tr>
<td align="center">1100</td>
<td align="center">C</td>
</tr>
<tr>
<td align="center">1101</td>
<td align="center">D</td>
</tr>
<tr>
<td align="center">1110</td>
<td align="center">E</td>
</tr>
<tr>
<td align="center">1111</td>
<td align="center">F</td>
</tr>
</tbody></table>
<p>比如说：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number=<span class="number">127</span>;<span class="comment">//m=0000 0000 0000 0000 0000 0000 0111 1111(二进制源码)-&gt;0000 007F(十六进制源码)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="逻辑运算符和位移运算符"><a href="#逻辑运算符和位移运算符" class="headerlink" title="逻辑运算符和位移运算符"></a>逻辑运算符和位移运算符</h4><ul>
<li><p>提醒，计算机用位运算符计算数据是都是按补码计算的。</p>
</li>
<li><p>逻辑运算符</p>
<ol>
<li><p>与运算符（&amp;）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m=<span class="number">15</span>;<span class="comment">//n=0000 0000 0000 0000 0000 0000 0000 1111-&gt;0000 0000 0000 0000 0000 0000 0000 1111(补码)（为了简洁表达，之后的源码和补码会省略中间的0或1）</span></span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">127</span>;<span class="comment">//m=0000 0111 1111-&gt;0000 0111 1111(补码)</span></span><br><span class="line">        <span class="keyword">int</span> number1=n&amp;m;<span class="comment">//number=0000 1111-&gt;0000 1111(补码)</span></span><br><span class="line">        System.out.println(number1);<span class="comment">//number=15</span></span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">15</span>;<span class="comment">//x=0000 1111-&gt;0000 1111(补码)</span></span><br><span class="line">        <span class="keyword">int</span> y=-<span class="number">127</span>;<span class="comment">//y=1000 0111 1111-&gt;1111 1000 0001(补码)</span></span><br><span class="line">        <span class="keyword">int</span> number2=x&amp;y;<span class="comment">//number2=00000001-&gt;0000 0001(补码)</span></span><br><span class="line">        System.out.println(number2);<span class="comment">//number2=1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&amp;的规则是对应位两个都为1，则结果取1，否则都取0.</p>
</li>
<li><p>或运算符（|）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m=<span class="number">15</span>;<span class="comment">//n=0000 1111-&gt;0000 1111(补码)</span></span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">127</span>;<span class="comment">//m=0000 0111 1111-&gt;0000 0111 1111(补码)</span></span><br><span class="line">        <span class="keyword">int</span> number1=n|m;<span class="comment">//number=0000 0111 1111-&gt;0000 0111 1111(补码)</span></span><br><span class="line">        System.out.println(number1);<span class="comment">//number=127</span></span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">15</span>;<span class="comment">//x=0000 1111-&gt;0000 1111(补码)</span></span><br><span class="line">        <span class="keyword">int</span> y=-<span class="number">127</span>;<span class="comment">//y=1000 0111 1111-&gt;1111 1000 0001 (补码)</span></span><br><span class="line">        <span class="keyword">int</span> number2=x|y;<span class="comment">//number2=1000 0111 0001-&gt;1111 1000 1111(补码)</span></span><br><span class="line">        System.out.println(number2);<span class="comment">//number2=-113</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>| 的规则是对应位两个都为0，则结果取0，否则都取1.</p>
</li>
<li><p>非运算符（~）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m=<span class="number">15</span>;<span class="comment">//n=0000 1111-&gt;0000 1111(补码)</span></span><br><span class="line">        <span class="keyword">int</span> number1=~m;<span class="comment">//number=1000 0001 0000-&gt;1111 1111 0000(补码) </span></span><br><span class="line">        System.out.println(number1);<span class="comment">//number=-16 </span></span><br><span class="line">        <span class="keyword">int</span> x=-<span class="number">15</span>;<span class="comment">//x=1000 1111-&gt;1111 0001(补码)  </span></span><br><span class="line">        <span class="keyword">int</span> number2=~x;<span class="comment">//number2=0000 1110-&gt;0000 1110(补码)   </span></span><br><span class="line">        System.out.println(number2);<span class="comment">//number2=14  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>~ 的规则是每一位都取反。</p>
</li>
<li><p>异或运算符（^）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> m=<span class="number">15</span>;<span class="comment">//n=0000 1111-&gt;0000 1111(补码)  </span></span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">127</span>;<span class="comment">//m=0000 0111 1111-&gt;0000 0111 1111(补码) </span></span><br><span class="line">        <span class="keyword">int</span> number1=n^m;<span class="comment">//number=0000 0111 0000-&gt;0000 0111 0000(补码)  </span></span><br><span class="line">        System.out.println(number1);<span class="comment">//number=112  </span></span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">15</span>;<span class="comment">//x=0000 1111-&gt;0000 1111(补码)   </span></span><br><span class="line">        <span class="keyword">int</span> y=-<span class="number">127</span>;<span class="comment">//y=1000 0111 1111-&gt;1111 1000 0001 (补码) </span></span><br><span class="line">        <span class="keyword">int</span> number2=x^y;<span class="comment">//number2=1000 0111 0010-&gt;1111 1000 1110(补码)  </span></span><br><span class="line">        System.out.println(number2);<span class="comment">//number2=-114  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>^ 的规则是对应位相同取0，不同取1</p>
</li>
</ol>
</li>
<li><p>位移运算符</p>
<ol>
<li><p>左移运算符（&lt;&lt;）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">15</span>;<span class="comment">//x=0000 1111-&gt;0000 1111(补码)  </span></span><br><span class="line">        <span class="keyword">int</span> y=-<span class="number">15</span>;<span class="comment">//y=1000 1111-&gt;1111 0001(补码) </span></span><br><span class="line">        <span class="keyword">int</span> number1=x&lt;&lt;<span class="number">1</span>;<span class="comment">//number1=0000 0001 1110-&gt;0000 0001 1110(补码)</span></span><br><span class="line">        System.out.println(number1);<span class="comment">//number1=30</span></span><br><span class="line">        <span class="keyword">int</span> number2=y&lt;&lt;<span class="number">1</span>;<span class="comment">//number2=1000 0001 1110-&gt;1111 1110 0010(补码)</span></span><br><span class="line">        System.out.println(number2);<span class="comment">//nuber2=-30   </span></span><br><span class="line">        <span class="keyword">int</span> number3=x&lt;&lt;<span class="number">33</span>;<span class="comment">//number3=0000 0001 1110-&gt;0000 0001 1110(补码) </span></span><br><span class="line">        System.out.println(number3);<span class="comment">//number3=30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&lt;&lt;运算符的规则是:当x&lt;&lt;n时，所有对应位左移x%32位，右端补0，左端溢出的丢弃。（大部分时候等同于*2的x%32次方）</p>
</li>
<li><p>右移运算符(&gt;&gt;)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">15</span>;<span class="comment">//x=0000 1111-&gt;0000 1111(补码) </span></span><br><span class="line">        <span class="keyword">int</span> y=-<span class="number">15</span>;<span class="comment">//y=1000 1111-&gt;1111 0001(补码)  </span></span><br><span class="line">        <span class="keyword">int</span> number1=x&gt;&gt;<span class="number">1</span>;<span class="comment">//number1=0000 0001 1110-&gt;0000 0111(补码)   </span></span><br><span class="line">        System.out.println(number1);<span class="comment">//number1=7 </span></span><br><span class="line">        <span class="keyword">int</span> number2=y&gt;&gt;<span class="number">1</span>;<span class="comment">//number2=1000 1000-&gt;1111 1000(补码)</span></span><br><span class="line">        System.out.println(number2);<span class="comment">//nuber2=-8 </span></span><br><span class="line">        <span class="keyword">int</span> number3=x&gt;&gt;<span class="number">33</span>;<span class="comment">//number3=0000 0111-&gt;0000 0111(补码) </span></span><br><span class="line">        System.out.println(number3);<span class="comment">//number3=7 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>.&gt;&gt;运算符的规则是：当x&gt;&gt;&gt;n时，所有对应位右移x%32位，左端端正数补0、负数补1，右端溢出的丢弃。</p>
</li>
<li><p>无符号右移运算符(&gt;&gt;&gt;)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">15</span>;<span class="comment">//x=0000 1111-&gt;0000 1111(补码)  </span></span><br><span class="line">        <span class="keyword">int</span> y=-<span class="number">15</span>;<span class="comment">//y=1000 1111-&gt;1111 0001(补码)  </span></span><br><span class="line">        <span class="keyword">int</span> number1=x&gt;&gt;&gt;<span class="number">1</span>;<span class="comment">//number1=0000 0001 1110-&gt;0000 0111(补码) </span></span><br><span class="line">        System.out.println(number1);<span class="comment">//number1=7 </span></span><br><span class="line">        <span class="keyword">int</span> number2=y&gt;&gt;&gt;<span class="number">1</span>;<span class="comment">//number2=0111 1000-&gt;0111 1000(补码)  </span></span><br><span class="line">        System.out.println(number2);<span class="comment">//nuber2=2147483640    </span></span><br><span class="line">        <span class="keyword">int</span> number3=x&gt;&gt;&gt;<span class="number">33</span>;<span class="comment">//number3=0000 0111-&gt;0000 0111(补码)   </span></span><br><span class="line">        System.out.println(number3);<span class="comment">//number3=7  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>.&gt;&gt;&gt;的规则是：当x&gt;&gt;&gt;n时，所有对应位右移x%32位，左端补0，右端溢出的丢弃。</p>
</li>
</ol>
</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>Java没有字符串类型，而是在标准Java类库中提供了一个预定义类来使用字符串，也就是String</p>
<p>简单示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String name=<span class="string">&quot;China&quot;</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2021/08/14/9xZRTYDb4vEXztw.jpg"></p>
<h3 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h3><p>String类中的<strong>substring</strong>方法可以从字符串中提取一个子串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;   </span><br><span class="line">        String name=<span class="string">&quot;China&quot;</span>;   </span><br><span class="line">        String name1=name.substring(<span class="number">0</span>,<span class="number">3</span>);    </span><br><span class="line">        System.out.println(name1);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/14/mBEN1iGKFuWfwMJ.jpg"></p>
<p>name.substring(m,n) 中m是起始字符位置n是终止字符位置，且取n不取m。（注：0是第一个）</p>
<h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p>和绝大多数语言一样，java语言中字符串是可以通过+号对字符串进行连接的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String name1=<span class="string">&quot;China&quot;</span>; </span><br><span class="line">        String name2=<span class="string">&quot; is &quot;</span>;</span><br><span class="line">        String name3=<span class="string">&quot; very &quot;</span>;   </span><br><span class="line">        String name4=<span class="string">&quot; good!&quot;</span>;   </span><br><span class="line">        String name=name1+name2+name3+name4;    </span><br><span class="line">        System.out.println(name); </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/14/yf6gPuc59Wp2AKT.jpg"></p>
<p>当字符串和非字符串连接时，非字符串会被转换成字符串并和字符串进行拼接，常见的例子比如输出语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;我已经&quot;</span>+age+<span class="string">&quot;岁了&quot;</span>);<span class="comment">//age=20</span></span><br></pre></td></tr></table></figure>

<h4 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h4><p>这个用的比较少，是静态方法join的方法。当我们把多个字符串连接在一起并用一个界定符分割时，我们可以用 join 实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;    </span><br><span class="line">        String all1=String.join(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;Time&quot;</span>,<span class="string">&quot;Money&quot;</span>,<span class="string">&quot;Health&quot;</span>);      </span><br><span class="line">        System.out.println(all);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然我们也不一定非要加界定符，可以尽可能的发挥我们的想象力。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </span><br><span class="line">        String all1=String.join(<span class="string">&quot; &quot;</span>,<span class="string">&quot;Time&quot;</span>,<span class="string">&quot;Money&quot;</span>,<span class="string">&quot;Health&quot;</span>);  </span><br><span class="line">        String all2=String.join(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;Time&quot;</span>,<span class="string">&quot;Money&quot;</span>,<span class="string">&quot;Health&quot;</span>);   </span><br><span class="line">        String all3=String.join(<span class="string">&quot;Q&quot;</span>,<span class="string">&quot;Time&quot;</span>,<span class="string">&quot;Money&quot;</span>,<span class="string">&quot;Health&quot;</span>);   </span><br><span class="line">        System.out.println(all1);   </span><br><span class="line">        System.out.println(all2);   </span><br><span class="line">        System.out.println(all3); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/15/PjMhugBO6F97DqY.jpg"></p>
<p>​        </p>
<h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p>有些时候我们需要复制很多相同的字符串然而我们也不能傻乎乎的把一个字符串输入几百上千次。Java11中提供了一个repeat方法来解决这个问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </span><br><span class="line">        String one=<span class="string">&quot; ~(&gt;_&lt;)~ &quot;</span>;      </span><br><span class="line">        String all=one.repeat(<span class="number">10</span>);    </span><br><span class="line">        System.out.println(all);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/15/DR8Pa2evUgomGbH.jpg">  </p>
<h3 id="不可变字符串"><a href="#不可变字符串" class="headerlink" title="不可变字符串"></a>不可变字符串</h3><p>在Java中String类是不允许单独修改一个字符串中的某个字符的，我们一般可以通过提取字串加拼接的方式来构造新的字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String start=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        start=start.substring(<span class="number">0</span>,<span class="number">3</span>)+<span class="string">&quot;p&quot;</span>;</span><br><span class="line">        System.out.println(start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="检查字符串是否相等"><a href="#检查字符串是否相等" class="headerlink" title="检查字符串是否相等"></a>检查字符串是否相等</h3><p>要想检查两个字符串是否相等需要使用equals方法，相同返回true，不同返回false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String t=<span class="string">&quot;help&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b;</span><br><span class="line">        </span><br><span class="line">        b=s.equals(t);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        </span><br><span class="line">        b=<span class="string">&quot;Hello&quot;</span>.equals(s);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/24/wPebXGxTLHqNFC4.jpg"></p>
<p>如果不想区分大小写可以用equalsIgnoreCase方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b;</span><br><span class="line">        </span><br><span class="line">        b=<span class="string">&quot;hello&quot;</span>.equals(s);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        </span><br><span class="line">        b=<span class="string">&quot;hello&quot;</span>.equalsIgnoreCase(s);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/25/mbGFUNtj2igrn9e.jpg"></p>
<p>不要用==来检查字符串是否相等，只有当两个字符串相同并且位置相同时才会返回true，否则返回false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b;</span><br><span class="line">        </span><br><span class="line">        b=<span class="string">&quot;Hel&quot;</span>.equals(s.substring(<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;Hel&quot;</span>==s.substring(<span class="number">0</span>,<span class="number">3</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;true&quot;</span>);            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;flase&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/25/jKEdhQa5lUSWAY6.jpg"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java编程语言单词汇总</title>
    <url>/2021/08/01/Java%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%8D%95%E8%AF%8D%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="step-01"><a href="#step-01" class="headerlink" title="step-01"></a><strong>step-01</strong></h2><h3 id="掌握"><a href="#掌握" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、JDK </p>
<p>abbr. Java 开发工具包（Java Development Kit） （abbr.缩写）</p>
<p>2、JRE </p>
<p>abbr. Java 运行环境（Java Runtime Environment） </p>
<p>3、JVM </p>
<p>abbr. Java 虚拟机（Java Virtual Machine） </p>
<p>4、system [‘sɪstəm] <strong>System</strong></p>
<p>n. 制度，系统；</p>
<p>5、out [aʊt] </p>
<p>adj. 外面的；出去</p>
<p>6、println </p>
<p>n. 换行打印（Java 语言中的命令）</p>
<p>7、main [meɪn]</p>
<p>n. 主方法</p>
<p>8、download[daʊn’ləʊd]</p>
<p>vt. [计] 下载</p>
<p>9、path [pɑːθ] </p>
<p>n. 道路；小路；轨道；路径</p>
<p>10、JAVA_HOME</p>
<p>JDK 的安装根目录，例如：D:\ProgramFiles\Java\jdk1.8.0_141</p>
<p>11、public [‘pʌblɪk]</p>
<p>adj.公共的</p>
<p>12、static [‘stætɪk]</p>
<p>adj. 静态的；</p>
<p>13、void [vɒɪd] </p>
<p>adj. 空的；无效的；</p>
<p>14、string[strɪŋ] <strong>String</strong> </p>
<p>n. 一串，字符串</p>
<p>15、args</p>
<p>n. [计算机]参数</p>
<p>16、class [klɑːs] </p>
<p>n. 阶级；班级；种类；类；</p>
<p>17、bin [bɪn]</p>
<p>n. 二进制</p>
<p>18、src</p>
<p>源代码，源程序，这里代表 source code</p>
<p>19、bit [bɪt] </p>
<p>n. [计] 比特（二进位制信息单位）；</p>
<p>20、byte [baɪt] </p>
<p>n. 字节；8 位元组</p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、command [kə’mɑːnd] </p>
<p>vi. 命令，控制</p>
<p>2、compile [kəm’paɪl] </p>
<p>vt. 编译；编辑；</p>
<p>3、language [‘læŋgwɪdʒ] </p>
<p>n. 语言</p>
<p>4、lang [læŋ] </p>
<p>abbr. 语言（language） </p>
<p>5、development [dɪ’veləpm(ə)nt] </p>
<p>n. 发展；开发；</p>
<p>6、kit [kɪt] </p>
<p>n. 工具箱</p>
<p>7、machine [mə’ʃiːn] </p>
<p>n. 机械，机器；</p>
<p>8、Java SE：Java 标准版，Java Standard Edition</p>
<p>9、Java EE：Java 企业版，Java Enterprise Edition</p>
<p>10、Java ME：Java 小型版，Java Micro Edition</p>
<p>11、GC：垃圾收集机制（Garbage Collection）</p>
<h2 id="step-02"><a href="#step-02" class="headerlink" title="step-02"></a><strong>step-02</strong></h2><h3 id="掌握-1"><a href="#掌握-1" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、byte [baɪt] </p>
<p>n. 字节</p>
<p>2、short [ʃɔːt]</p>
<p>adj. 短的；</p>
<p>3、int 英 [ɪn’tɪəːrɪə(r)] 美 [ɪnt]</p>
<p>abbr. 整数</p>
<p>4、long [lɒŋ] </p>
<p>adj. 长的；过长的；</p>
<p>5、float [fləʊt] </p>
<p>单精度浮点数</p>
<p>6、double [‘dʌb(ə)l] </p>
<p>双精度浮点数</p>
<p>7、char [tʃɑː] </p>
<p>单个字符类型</p>
<p>8、boolean [‘bʊlɪən]</p>
<p>布尔型</p>
<p>9、unicode [‘juːnɪˌkəʊd] </p>
<p>n. 采用双字节对字符进行编码；统一的字符编码标准</p>
<p>10、ASCII [‘æski]</p>
<p>abbr. 美国信息交换标准码（American Standard Code for Information </p>
<p>Interchange）</p>
<p>11、true[truː]</p>
<p>adj. 真实的；正确的</p>
<p>12、false [fɔːls; fɒls]</p>
<p>adj. 错误的；</p>
<h3 id="拓展-1"><a href="#拓展-1" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、age[eɪdʒ]</p>
<p>n. 年龄；</p>
<p>2、name[neɪm] </p>
<p>n. 名称，名字；姓名</p>
<p>3、number [‘nʌmbə] </p>
<p>n. 数 </p>
<p>4、assign [ə’saɪn] </p>
<p>vt. 分配；指派；[计][数] 赋值</p>
<p>5、logic [‘lɒdʒɪk]</p>
<p>adj. 逻辑的</p>
<p>6、arithmetic[ə’rɪθmətɪk]</p>
<p>n. 算术，算法</p>
<p>7、operator[‘ɒpəreɪtə] </p>
<p>[计]操作符</p>
<p>8、relational [rɪ’leɪʃ(ə)n(ə)l]</p>
<p>adj. 相关的；</p>
<p>relational operator：关系运算符</p>
<p>relational database 关系型数据库</p>
<p>relational expression[计]关系表达式</p>
<p>9、variable [‘veərɪəb(ə)l] <strong>Java 课程系列</strong> </p>
<p>adj. 变量的；可变的；易变的，多变的；</p>
<p>10、sum [sʌm]</p>
<p>n. 金额；总数</p>
<p>11、const [‘kɒnst] </p>
<p>n. 常量，常数</p>
<p>12、constant [‘kɒnst(ə)nt] </p>
<p>n. [数] 常数；恒量</p>
<p>13、initialize [ɪ’nɪʃ(ə)laɪz] </p>
<p>vt. 初始化</p>
<h2 id="step-03"><a href="#step-03" class="headerlink" title="step-03"></a><strong>step-03</strong></h2><h3 id="掌握-2"><a href="#掌握-2" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、if [ɪf]</p>
<p>conj. （表条件）如果；即使；是否；（表假设）假如</p>
<p>2、 else[els]</p>
<p>adv. 其他；否则；另外</p>
<p>3、switch[swɪtʃ]</p>
<p>n. 开关；转换</p>
<p>4、case[keɪs]</p>
<p>n. 情况；</p>
<p>5、default[dɪ’fɔːlt; ‘diːfɔːlt]</p>
<p>n. 缺席；缺乏；系统默认值</p>
<p>6、scanner[‘skænə] Scanner</p>
<p>n. [计] 扫描仪；扫描器；</p>
<p>7、next [nekst]</p>
<p>adj. 下一个的；</p>
<p>8、import[ɪm’pɔːt; ‘ɪm-]</p>
<p>vt. 导入 </p>
<p>9、util [ju’til]</p>
<p>代表 utility[juːˈtɪlɪtɪ] adj. 实用的；通用的；</p>
<p>10、in[ɪn]</p>
<p>在里面的的，输入</p>
<p>11、count [kaʊnt]</p>
<p>vi. 计数</p>
<p>12、year [jɪə; jɜː]</p>
<p>n. 年；</p>
<p>13、month[mʌnθ]</p>
<p>n. 月</p>
<p>14、day[deɪ]</p>
<p>n. 一天；时期</p>
<p>15、date[deɪt]</p>
<p>n. 日期</p>
<h3 id="拓展-2"><a href="#拓展-2" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、length[leŋθ]</p>
<p>n. 长度，长；</p>
<p>2、height [haɪt]</p>
<p>n. 高地；高度；身高；</p>
<p>3、weight[weɪt]</p>
<p>n. 重量，重力；</p>
<p>4、radius[‘reɪdɪəs]</p>
<p>n. 半径</p>
<p>5、area[‘eərɪə]</p>
<p>n. 区域，地区；面积；范围</p>
<p>6、score [skɔː]</p>
<p>n. 分数</p>
<p>7、week[wiːk]</p>
<p>n. 周，星期 <strong>Java 课程系列</strong> </p>
<p>8、hour[‘aʊə]</p>
<p>n. 小时；</p>
<p>9、minute[‘mɪnɪt]</p>
<p>n. 分，分钟；</p>
<p>10、second[‘sek(ə)nd]</p>
<p>n. 秒；第二名</p>
<p>11、millisecond [‘mɪlɪsek(ə)nd]</p>
<p>n. 毫秒</p>
<p>12、monday [ˈmʌndeɪ; ˈmʌndi]</p>
<p>n. 星期一</p>
<p>13、tuesday[‘tjuːzdeɪ; -dɪ]</p>
<p>n. 星期二</p>
<p>14、wednesday[ˈwenzdɪ]</p>
<p>n. 星期三</p>
<p>15、thursday[‘θɜːzdeɪ; -dɪ]</p>
<p>n. 星期四</p>
<p>16、friday[ˈfraɪ.deɪ]</p>
<p>n. 星期五</p>
<p>17、saturday 英 [ˈsætədɪ; -deɪ]</p>
<p>n. 星期六</p>
<p>18、sunday [ˈsʌndeɪ; ˈsʌndi]</p>
<p>n. 星期日</p>
<p>19、season [‘siːz(ə)n]</p>
<p>n. 时期；季节；赛季</p>
<p>20、spring [sprɪŋ]</p>
<p>n. 春天</p>
<p>21、summer[‘sʌmə]</p>
<p>n. 夏季</p>
<p>22、fall[fɔːl]</p>
<p>n. 下降；秋天</p>
<p>autumn[‘ɔːtəm]n. 秋天；成熟期 </p>
<p>23、winter[‘wɪntə]</p>
<p>n. 冬季；</p>
<p>24、width [wɪtθ; wɪdθ]</p>
<p>n. 宽度；</p>
<h2 id="step-04"><a href="#step-04" class="headerlink" title="step-04"></a><strong>step-04</strong></h2><h3 id="掌握-3"><a href="#掌握-3" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、for[fə(r); fɔ:(r)]</p>
<p>prep. 为，为了；因为；给；对于；至于；适合于 conj. 因为</p>
<p>2、while [waɪl]</p>
<p>conj. 虽然；然而；当……的时候</p>
<p>3、do[duː]</p>
<p>v. 做；干；</p>
<p>4、break [breɪk]</p>
<p>vi. 打破；折断；中断</p>
<p>5、continue[kən’tɪnjuː]</p>
<p>vt. 使…继续；</p>
<p>6、math [mæθ]</p>
<p>n. 数学（等于 mathematics） </p>
<p>7、random[‘rændəm] Random</p>
<p>adj. [数] 随机的；</p>
<p>8、first [fɜːst] </p>
<p>adv. 第一；首先；优先；宁愿; </p>
<p>9、sum [sʌm] </p>
<p>n. 金额；总数; </p>
<p>10、check [tʃek] </p>
<p>vt. 检查，核对；制止 </p>
<h3 id="拓展-3"><a href="#拓展-3" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、for loop：For 循环</p>
<p>for 循环语句 for cyclic sentence</p>
<p>for 循环结构 for-loop structure</p>
<p>2、input[‘ɪnpʊt]</p>
<p>vt. [自][电子] 输入；将…输入电脑</p>
<p>3、max[mæks]</p>
<p>n.最大量；最大数</p>
<p>4、min [mɪn]</p>
<p>代表 minimum[‘mɪnɪməm]adj. 最小的；最低的</p>
<p>5、temp[temp]</p>
<p>临时的</p>
<p>6、 positive [‘pɒzɪtɪv] q</p>
<p>[数] 正的；确定的 n. 正数；</p>
<p>7、negative [‘negətɪv] </p>
<p>adj. [数] 负的；否定的； n. 否定；负数；</p>
<p>8、half [hɑːf] </p>
<p>n. 一半；半场；半学年; </p>
<p>adv. 一半地；部分地; </p>
<p>adj. 一半的；不完全的；半途的; </p>
<p>9、 middle [‘mɪd(ə)l] </p>
<p>adj. 中间的，中部的；中级的，中等的; </p>
<p>10、show [ʃəʊ] </p>
<p>vt. 显示；说明；演出；展出</p>
<p>vi. 显示；说明</p>
<p>11、round [raʊnd] </p>
<p>n. 圆；循环；一回合；</p>
<p>adj. 圆的；</p>
<p>12、item [‘aɪtəm] </p>
<p>n. 条款，项目 </p>
<p>13、content [kən’tent] </p>
<p>n. 内容，目录；满足；容量; </p>
<p>14、upload [ʌp’ləʊd] </p>
<p>vt. 上传</p>
<p>15、download [daʊn’ləʊd] </p>
<p>vt. 下载</p>
<h2 id="step-05"><a href="#step-05" class="headerlink" title="step-05"></a><strong>step-05</strong></h2><p>###<strong>掌握</strong></p>
<p>1、array[ə’reɪ]</p>
<p>n. 数组，阵列；排列，列阵；</p>
<p>2、element[‘elɪm(ə)nt]</p>
<p>n. 元素；要素；原理；成分；</p>
<p>3、index[‘ɪndeks]</p>
<p>n. 指标；指数；索引；指针</p>
<p>4、length[leŋθ]</p>
<p>n. 长度，长；</p>
<p>5、copy[‘kɒpɪ]</p>
<p>vi. 复制；复印；</p>
<p>6、sort[sɔːt]</p>
<p>vt. 将…分类；将…排序；挑选出某物</p>
<p>7、avg[ævərɪdʒ]</p>
<p>abbr. 平均值（average） </p>
<p>8、new[njuː]</p>
<p>adj. 新的 [计]创建新的</p>
<p>9、max[mæks]</p>
<p>n.最大量；最大数</p>
<p>10、min [mɪn] </p>
<p>代表 minimum[‘mɪnɪməm]adj. 最小的；最低的</p>
<p>11、temp[temp]</p>
<p>临时的</p>
<h3 id="拓展-4"><a href="#拓展-4" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、ArrayIndexOutOfBoundsException</p>
<p>数组下标越界异常</p>
<p>2、NullPointerException</p>
<p>空指针异常</p>
<p>3、reverse[rɪ’vɜːs]</p>
<p>vt. 颠倒；倒转</p>
<p>4、range [reɪn(d)ʒ]</p>
<p>n. 范围；幅度；</p>
<p>5、bubble sort</p>
<p>冒泡排序</p>
<p>6、binary search</p>
<p>[计] 对分查找；二进位检索；折半查找法；二分搜寻</p>
<p>7、parameter[pə’ræmɪtə]</p>
<p>n. 参数；系数；参量</p>
<p>[计] actual parameter 实参</p>
<p>[计] formal parameter 形参</p>
<p>[计] command line parameter 命令行参数</p>
<p>[计]variable parameter 可变参数</p>
<p>8、initialize [ɪ’nɪʃ(ə)laɪz]</p>
<p>vt. 初始化，设定初值 </p>
<h2 id="step-06"><a href="#step-06" class="headerlink" title="step-06"></a><strong>step-06</strong></h2><h3 id="掌握-4"><a href="#掌握-4" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、value[‘væljuː]</p>
<p>n. 值 </p>
<p>2、detail[‘diːteɪl]</p>
<p>n. 细节，详情 vt. 详述；选派</p>
<p>3、balance[‘bæl(ə)ns]</p>
<p>n. 平衡；余额；</p>
<p>4、account[ə’kaʊnt]</p>
<p>n. 账户；解释；账目，账单；理由；描述</p>
<p>5、family[‘fæməli]</p>
<p>adj. 家庭的，家族的</p>
<p>6、flag[flæg]</p>
<p>n. 标志；旗子；标记</p>
<p>7、menu[‘menju:, mə’nju:]</p>
<p>n. 菜单</p>
<p>8、select[si’lekt]</p>
<p>vt. 挑选；选拔</p>
<p>9、amount[ə’maunt]</p>
<p>n. 数量；总额，总数</p>
<p>10、confirm[kən’fə:m]</p>
<p>vt. 确认；确定；证实；批准；使巩固</p>
<p>11、foreach</p>
<p>n. 为每一个，循环的循环计数器，循环，迭代器</p>
<h3 id="拓展-5"><a href="#拓展-5" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、description[dɪ’skrɪpʃ(ə)n]</p>
<p>n. 描述，描写；类型；说明书 </p>
<p>2、monday [ˈmʌndeɪ; ˈmʌndi]</p>
<p>n. 星期一</p>
<p>3、tuesday[‘tjuːzdeɪ; -dɪ]</p>
<p>n. 星期二</p>
<p>4、wednesday[ˈwenzdɪ]</p>
<p>n. 星期三</p>
<p>5、thursday[‘θɜːzdeɪ; -dɪ]</p>
<p>n. 星期四</p>
<p>6、friday[ˈfraɪ.deɪ]</p>
<p>n. 星期五</p>
<p>7、saturday [ˈsætədɪ; -deɪ]</p>
<p>n. 星期六</p>
<p>8、sunday [ˈsʌndeɪ; ˈsʌndi]</p>
<p>n. 星期日</p>
<p>9、API [,e pi ‘aɪ] </p>
<p>abbr. 应用程序接口（Application Program Interface）</p>
<h2 id="step-07"><a href="#step-07" class="headerlink" title="step-07"></a><strong>step-07</strong></h2><h3 id="掌握-5"><a href="#掌握-5" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、object[‘ɒbdʒɪkt; -dʒekt]</p>
<p>n. 目标；物体；客体；宾语；对象</p>
<p>2、new[njuː]</p>
<p>adj. 新的 [计]创建新的</p>
<p>3、field[fiːld]</p>
<p>[计]字段、栏位、域、栏、属性</p>
<p>4、stack[stæk]</p>
<p>[计]堆栈</p>
<p>5、heap[hiːp] </p>
<p>n. 堆；</p>
<p>6、student[‘stjuːd(ə)nt]</p>
<p>n. 学生；学者</p>
<p>7、teacher[‘tiːtʃə]</p>
<p>n. 教师；导师</p>
<p>8、name [neɪm]</p>
<p>n. 名称，名字；姓名；</p>
<p>9、age[eɪdʒ]</p>
<p>n. 年龄；时代；</p>
<p>10、tel[tɛl]</p>
<p>telephone[‘telɪfəʊn]n. （美）电话；电话机；</p>
<p>phone[fəʊn]n. 电话；耳机，听筒</p>
<p>11、address[ə’dres]</p>
<p>n. 地址；</p>
<p>12、gender[‘dʒendə]</p>
<p>n. 性；性别；</p>
<p>13、title[‘taɪt(ə)l]</p>
<p>标题</p>
<p>14、price[praɪs] </p>
<p>n. 价格；价值；代价</p>
<p>15、null[nʌl]</p>
<p>adj. 无效的，无价值的；等于零的 n. 零，[数] 空</p>
<h3 id="拓展-6"><a href="#拓展-6" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、OOP</p>
<p>abbr. 面向对象的程序设计（Object Oriented Programming） </p>
<p>2、oriented</p>
<p>adj. 导向的；定向的；以…为方向的</p>
<p>v. 调整；使朝向（orient 的过去分词）；确定…的方位</p>
<p>3、programming[‘prəʊɡræmɪŋ]</p>
<p>n. 设计，规划；编制程序，[计] 程序编制 </p>
<p>4、member[‘membə]</p>
<p>n. 成员；</p>
<p>5、GC</p>
<p>垃圾收集 Garbage Collection（GC） </p>
<p>6、circle[‘sɜːk(ə)l]</p>
<p>n. 循环，周期；圆；</p>
<p>7、radius[‘reɪdɪəs]</p>
<p>n. 半径，</p>
<p>8、rectangle[‘rektæŋg(ə)l]</p>
<p>n. 矩形；长方形</p>
<p>9、triangle[‘traɪæŋg(ə)l]</p>
<p>n. 三角（形）；</p>
<h2 id="step-08"><a href="#step-08" class="headerlink" title="step-08"></a><strong>step-08</strong></h2><h3 id="掌握-6"><a href="#掌握-6" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、function[‘fʌŋ(k)ʃ(ə)n]</p>
<p>n. 功能；[数] 函数；</p>
<p>2、method[‘meθəd]</p>
<p>n. 方法；条理；类函数</p>
<p>3、return[rɪ’tɜːn]</p>
<p>n. 返回；归还；</p>
<p>4、return value</p>
<p>[计] 返回值；传回值</p>
<p>5、return type</p>
<p>返回类型</p>
<p>6、overload[əʊvə’ləʊd]</p>
<p>vt. 超载，重载</p>
<p>7、parameter[pə’ræmɪtə] </p>
<p>n. 参数；系数；参量</p>
<p>[计] actual parameter 实参</p>
<p>[计] formal parameter 形参</p>
<p>[计] command line parameter 命令行参数</p>
<p>[计]variable parameter 可变参数</p>
<p>8、modifier [‘mɒdɪfaɪə] </p>
<p>[语] 修饰语 [计]修饰符</p>
<p>9、variable[‘veərɪəb(ə)l]</p>
<p>[计]local variable 局部变量</p>
<p>[计]member variable 成员变量</p>
<p>10、reference[‘ref(ə)r(ə)ns]</p>
<p>vt. 引用，参考</p>
<p>11、statement[‘steɪtm(ə)nt]</p>
<p>[计]语句</p>
<p>12、arguments [‘ɑːgjʊm(ə)nts]</p>
<p>n. 参数</p>
<h3 id="拓展-7"><a href="#拓展-7" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、declare[‘dekleə] </p>
<p>[计]declare variables 声明变量</p>
<p>[计]method declaration 方法声明</p>
<p>[计]method invocation 方法调用 </p>
<p>[计]calling method 调用方法</p>
<p>2、definition[defɪ’nɪʃ(ə)n]</p>
<p>定义</p>
<p>[数] defined variable</p>
<p>User-Defined Method 用户定义方法</p>
<p>System-Generated Method 系统方法</p>
<p>3、undefined [ʌndɪ’faɪnd] </p>
<p>adj. 不明确的；未下定义的</p>
<p>4、husband[‘hʌzbənd] </p>
<p>n. 丈夫</p>
<p>5、wife[waɪf]</p>
<p>n. 妻子，已婚妇女；夫人</p>
<p>6、account[ə’kaʊnt]</p>
<p>n. 账户；解释；账目，账单；理由；描述</p>
<p>7、customer [‘kʌstəmə]</p>
<p>n. 顾客；家伙；消费者</p>
<p>8、bank[bæŋk]</p>
<p>n. 银行；</p>
<p>9、save[seɪv]</p>
<p>vt. 节省；保存；储蓄；解救</p>
<p>10、withdraw[wɪð’drɔː]</p>
<p>vt. 撤退；收回；撤消；提款</p>
<p>11、balance[‘bæl(ə)ns]</p>
<p>n. 平衡；余额；</p>
<p>12、identity[aɪ’dentɪtɪ]</p>
<p>n. 身份；同一性，一致；特性；恒等式</p>
<p>identity card：身份证或 ID Card;</p>
<p>identifier：标识符</p>
<p>##<strong>step-09</strong></p>
<h3 id="掌握-7"><a href="#掌握-7" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、public[‘pʌblɪk]</p>
<p>adj. 公众的；政府的；公用的；公立的</p>
<p>2、protected [prə’tektɪd]</p>
<p>adj. 受保护的</p>
<p>3、default[dɪ’fɔːlt; ‘diːfɔːlt]</p>
<p>vi. 拖欠；不履行；不到场</p>
<p>n. 违约；缺席；缺乏；系统默认值 </p>
<p>4、private[ˈpraɪvɪt]</p>
<p>adj. 私人的，私有的；私立的；私营的</p>
<p>5、constructor[kənˈstrʌktə(r)]</p>
<p>n. 构造函数；构造器；建造者</p>
<p>6、this[ðɪs]</p>
<p>pron. 这；这个；这里</p>
<p>[Java]当前对象</p>
<p>7、package [‘pækɪdʒ]</p>
<p>n. 包，包裹；</p>
<p>8、import[ɪm’pɔːt; ‘ɪm-] </p>
<p>[计]导入</p>
<p>9、get[get]</p>
<p>vt. 获得；</p>
<p>10、set [set]</p>
<p>set value[自] 设定值，给定值；</p>
<h3 id="拓展-8"><a href="#拓展-8" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、encapsulation[ɪn,kæpsə’leɪʃən]</p>
<p>n. 封装；包装</p>
<p>2、person[‘pɜːs(ə)n]</p>
<p>n. 人；身体；容貌，外表；人称</p>
<p>people[‘piːp(ə)l]n. 人；人类；民族；公民</p>
<p>human[‘hjuːmən]n. 人；人类</p>
<p>3、info[‘ɪnfəʊ]</p>
<p>n. 信息；情报</p>
<p>4、detail[‘diːteɪl]</p>
<p>n. 细节，详情 vt. 详述；选派</p>
<p>5、major [‘meɪdʒə]</p>
<p>adj. 主要的；重要的；主修的；n.专业</p>
<p>6、school[skuːl] </p>
<p>n. 学校；学院；</p>
<p>7、base[beɪs]</p>
<p>n. 基础；底部；</p>
<p>8、margin[‘mɑːdʒɪn]</p>
<p>n. 边缘；利润，余裕；页边的空白</p>
<p>9、bottom[‘bɒtəm]</p>
<p>n. 底部；末端；</p>
<p>10、top[tɒp]</p>
<p>n. 顶部，顶端；上部；</p>
<p>11、 pass by reference </p>
<p>按引用传递</p>
<p>12、 pass by value </p>
<p>按值传递</p>
<h2 id="step-10"><a href="#step-10" class="headerlink" title="step-10"></a><strong>step-10</strong></h2><h3 id="掌握-8"><a href="#掌握-8" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、extends[ɪk’stendz; ek-]</p>
<p>v. 延伸；扩充；继承（extend 的第三人称单数形式）</p>
<p>2、subclass [‘sʌbklɑːs]</p>
<p>子类</p>
<p>3、superclass[‘suːpəklɑːs; ‘sjuː-]</p>
<p>n. 超类</p>
<p>4、override[əʊvə’raɪd]</p>
<p>vt. 推翻；不顾；践踏</p>
<p>5、overload [əʊvə’ləʊd]</p>
<p>vt. 超载，超过负荷</p>
<p>6、super[‘suːpə; ‘sjuː-]</p>
<p>adj. 特级的；极好的 </p>
<p>[Java]父类</p>
<p>7、add[æd]</p>
<p>vt. 增加，添加；</p>
<p>8、update[ʌp’deɪt]</p>
<p>vt. 更新；校正，修正；</p>
<p>9、delete[dɪ’liːt]</p>
<p>vt. 删除</p>
<p>10、replace [rɪ’pleɪs]</p>
<p>vt. 取代，代替；替换，更换；</p>
<p>11、all[ɔːl]</p>
<p>adj. 全部的</p>
<p>12、total [‘təʊt(ə)l]</p>
<p>n. 总数，合计</p>
<p>13、view[vjuː]</p>
<p>vt. 观察；考虑；查看</p>
<p>14、list[lɪst]</p>
<p>n. [计] 列表；清单；目录</p>
<p>15、select [sɪ’lekt]</p>
<p>adj. 精选的；挑选出来的；极好的</p>
<p>16、read [ri:d;red]</p>
<p>读取</p>
<h3 id="拓展-9"><a href="#拓展-9" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、inherit[ɪn’herɪt]</p>
<p>vt. 继承；遗传而得</p>
<p>2、menu[‘menjuː]</p>
<p>n. 菜单</p>
<p>3、modify [‘mɒdɪfaɪ]</p>
<p>vt. 修改，修饰；更改</p>
<p>4、enter[‘entə] </p>
<p>n. [计] 输入；回车</p>
<p>5、confirm[kən’fɜːm]</p>
<p>vt. 确认；确定；证实；批准；使巩固</p>
<p>6、employee[ɪmˈplɔɪi;ˌemplɔɪˈi:]</p>
<p>n. 雇员；从业员工</p>
<p>7、manager[‘mænɪdʒə]</p>
<p>n. 经理；管理人员</p>
<p>8、salary[‘sælərɪ]</p>
<p>n. 薪水</p>
<p>9、pay[peɪ]</p>
<p>n. 工资，薪水；付款；报答</p>
<p>10、hire[‘haɪə]</p>
<p>vi. 雇用，租用；受雇</p>
<p>11、bonus[‘bəʊnəs]</p>
<p>n. 奖金；红利；额外津贴</p>
<p>12、stock[stɒk]</p>
<p>n. 股份，股票；</p>
<p>13、plan [plæn]</p>
<p>vi. 计划；打算</p>
<p>14、report[rɪ’pɔːt]</p>
<p>n. 报告；报道；成绩单</p>
<h2 id="step-11"><a href="#step-11" class="headerlink" title="step-11"></a><strong>step-11</strong></h2><h3 id="掌握-9"><a href="#掌握-9" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、instance[‘ɪnst(ə)ns]</p>
<p>n. 实例；情况；建议</p>
<p>2、instanceof</p>
<p>n. 实例；运算符 </p>
<p>3、casting [‘kɑːstɪŋ] </p>
<p>转型</p>
<p>4、upcasting</p>
<p>n. 向上转型</p>
<p>5、downcasting</p>
<p>n. 向下转型</p>
<p>Safe Downcasting 安全的向下转型 ; 安全向下转型 ; </p>
<p>6、ClassCastException</p>
<p>类型转换异常</p>
<h3 id="拓展-10"><a href="#拓展-10" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、polymorphism[,pɒlɪ’mɔːfɪz(ə)m]</p>
<p>n. 多态性；多形性；同质多晶</p>
<p>2、dependency[dɪ’pend(ə)nsɪ] </p>
<p>[计]依赖</p>
<p>3、association[[ə,soʃɪ’eʃən]]</p>
<p>[计]关联</p>
<p>4、aggregation [,æɡrɪ’ɡeɪʃən]</p>
<p>[计]聚合</p>
<p>5、composite[‘kɒmpəzɪt]</p>
<p>[计]复合，组合</p>
<p>6、generalization[,dʒenrələ’zeɪʃən]</p>
<p>n. 概括；普遍化；一般化</p>
<p>继承（Generalization，又称为泛化，is-a 的关系）</p>
<h2 id="step-12"><a href="#step-12" class="headerlink" title="step-12"></a><strong>step-12</strong></h2><p>###<strong>掌握</strong></p>
<p>1、equals[‘i:kwəlz] </p>
<p>v. 平等（equal 的第三人称单数形式）；与…相同</p>
<p>2、hash code hashCode()</p>
<p>hashCode(散列码)是由对象导出的一个整型值，散列码是没有规律的，</p>
<p>如果对象不一样，其散列码基本也不会一致。</p>
<p>3、finalize[‘faɪn(ə)laɪz]</p>
<p>vt. 完成；使结束</p>
<p>4、static[‘stætɪk]</p>
<p>adj. 静态的；静电的；静力的</p>
<p>5、final[‘faɪn(ə)l]</p>
<p>adj. 最终的；决定性的；不可更改的</p>
<p>6、native[‘neɪtɪv]</p>
<p>adj. 本国的；土著的；天然的；与生俱来的；天赋的；原生的</p>
<h3 id="拓展-11"><a href="#拓展-11" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、block [blɒk]</p>
<p>adj. 成批的，大块的；交通堵塞的</p>
<p>2、order[‘ɔːdə]</p>
<p>n. 命令；顺序；规则；[贸易] 定单</p>
<p>3、dog[dɒg]</p>
<p>n. 狗；</p>
<p>4、cat[kæt]</p>
<p>n. 猫 </p>
<p>5、animal[‘ænɪm(ə)l]</p>
<p>n. 动物</p>
<p>6、car[kɑː]</p>
<p>n. 汽车；车厢</p>
<p>7、vehicle[ˈvɪəkl]</p>
<p>n. [车辆] 车辆；工具；交通工具；运载工具；传播媒介；媒介物</p>
<p>8、truck[trʌk]</p>
<p>n. 卡车； </p>
<p>9、train[treɪn]</p>
<p>n. 火车；</p>
<p>10、plane [pleɪn]</p>
<p>n. 飞机；</p>
<p>11、fly[flaɪ]</p>
<p>vt. 飞行；飞越；</p>
<p>12、ship[ʃɪp]</p>
<p>n. 船；舰；太空船</p>
<p>13、boat[bəʊt]</p>
<p>n. 小船；轮船</p>
<p>14、clone [kləʊn] </p>
<p>n. 克隆</p>
<p>15、init [ɪ’nɪt] </p>
<p>abbr. 初始化（initialization）</p>
<h2 id="step-13"><a href="#step-13" class="headerlink" title="step-13"></a><strong>step-13</strong></h2><h3 id="掌握-10"><a href="#掌握-10" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、abstract[‘æbstrækt]</p>
<p>n. 摘要；抽象；抽象的概念</p>
<p>2、interface [‘ɪntəfeɪs]</p>
<p>n. 界面；&lt;计&gt;接口；交界面</p>
<p>3、implements[‘ɪmplɪm(ə)nts]</p>
<p>vt. 实施，执行；实现（第三人称单数）</p>
<p>4、single [‘sɪŋg(ə)l] </p>
<p>adj. 单一的；单身的；单程的; </p>
<p>n. 一个；</p>
<p>5、singleton [‘sɪŋg(ə)lt(ə)n] </p>
<p>单例 </p>
<p>6、comparable [‘kɒmp(ə)rəb(ə)l] Comparable</p>
<p>adj. 可比较的；比得上的</p>
<h3 id="拓展-12"><a href="#拓展-12" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、subject[ˈsʌbdʒɪkt;]</p>
<p>n. 主题；科目</p>
<p>2、simple[‘sɪmp(ə)l]</p>
<p>adj. 简单的；</p>
<p>3、pattern[‘pæt(ə)n]</p>
<p>n. 模式；</p>
<p>4、proxy[‘prɒksɪ]</p>
<p>n. 代理人；</p>
<p>5、factory[‘fækt(ə)rɪ]</p>
<p>n. 工厂；制造厂；</p>
<p>6、template [‘templeɪt; -plɪt] </p>
<p>n. 模板，样板</p>
<h2 id="step-14"><a href="#step-14" class="headerlink" title="step-14"></a><strong>step-14</strong></h2><h3 id="掌握-11"><a href="#掌握-11" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、inner[ɪnə]</p>
<p>adj. 内部的；</p>
<p>2、outer[‘aʊtə]</p>
<p>adj. 外面的，外部的；</p>
<p>3、enum[‘enəm]</p>
<p>n. 枚举</p>
<p>4、annotation[ænə’teɪʃ(ə)n]</p>
<p>n. 注释；注解； </p>
<p>5、override[əʊvə’raɪd] @Override</p>
<p>覆盖、覆写</p>
<p>6、deprecated[ˈdeprəkeɪtɪd] @Deprecated</p>
<p>v. 不赞成；弃用；不宜用（deprecate 的过去式及过去分词形式）</p>
<p>7、suppress[sə’pres]</p>
<p>vt. 抑制；镇压；废止</p>
<p>8、warning[‘wɔːnɪŋ]</p>
<p>n. 警告；预兆；预告</p>
<p>9、suppresswarings @SuppressWarnings</p>
<p>抑制警告</p>
<p>10、source[sɔːs]</p>
<p>source code 源代码</p>
<p>11、runtime [‘rʌntæɪm]</p>
<p>n. 执行时间，运行时间</p>
<p>12、class [klɑːs]</p>
<p>字节码</p>
<h3 id="拓展-13"><a href="#拓展-13" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、nest[nest]</p>
<p>vt. 筑巢；嵌套</p>
<p>2、local [‘ləʊk(ə)l]</p>
<p>n. [计] 局部；adj. 当地的；局部的；</p>
<p>3、anonymous[ə’nɒnɪməs]</p>
<p>adj. 匿名的，无名的</p>
<p>4、ordinal[‘ɔːdɪn(ə)l]</p>
<p>adj. 顺序的，依次的</p>
<p>n. [数] 序数</p>
<p>5、author[‘ɔːθə]</p>
<p>n. 作者；作家；创始人</p>
<p>6、version[‘vɜːʃ(ə)n]</p>
<p>n. 版本；译文； </p>
<p>7、see[siː]</p>
<p>vi. 看；看见；参见</p>
<p>8、since [sɪns]</p>
<p>prep. 自…以来；自…以后</p>
<p>9、param[ˌpærəˈm]</p>
<p>abbr. 参数（Parametric）</p>
<p>10、exception [ɪk’sepʃ(ə)n; ek-]</p>
<p>n. 例外；异议</p>
<p>11、target[‘tɑːgɪt] @Target</p>
<p>n. 目标，指标；</p>
<p>12、retention[rɪ’tenʃ(ə)n] @Retention</p>
<p>n. 保留；扣留，滞留；</p>
<p>13、documented[‘dɒkjʊm(ə)ntɪd] @Documented</p>
<p>登记在案</p>
<p>14、inherited[ɪn’herɪtɪd] @Inherited</p>
<p>adj. 遗传的；继承权的；通过继承得到的</p>
<p>15、element [‘elɪm(ə)nt]</p>
<p>n. 元素；</p>
<p>16、type [taɪp]</p>
<p>n. 类型，品种；</p>
<p>ElementType 元素类型</p>
<p>17、policy[‘pɒləsɪ]</p>
<p>n. 政策，方针；策略</p>
<p>RetentionPolicy：保留策略</p>
<p>18、local variable</p>
<p>局部变量</p>
<p>19、metadata [‘metədeɪtə] </p>
<p>n. [计] 元数据 </p>
<h2 id="step-15"><a href="#step-15" class="headerlink" title="step-15"></a><strong>step-15</strong></h2><h3 id="掌握-12"><a href="#掌握-12" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、exception[ɪk’sɛpʃən]</p>
<p>n. 例外；异议；异常</p>
<p>2、error[‘erə]</p>
<p>n. 误差；错误；过失</p>
<p>3、throwable</p>
<p>可抛出</p>
<p>4、try[traɪ]</p>
<p>vi. 尝试；</p>
<p>5、catch[kætʃ]</p>
<p>n. 捕捉；</p>
<p>6、finally[‘faɪnəlɪ]</p>
<p>adv. 最后；终于；决定性地</p>
<p>7、throw[θrəʊ]</p>
<p>vt. 投；抛；</p>
<p>8、throws[θrəʊz]</p>
<p>v. 投；抛（throw 的三单形式）；掷</p>
<h3 id="拓展-14"><a href="#拓展-14" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、arithmetic[ə’rɪθmətɪk]</p>
<p>n. 算术，算法</p>
<p>ArithmeticException：算术异常</p>
<p>2、RuntimeException</p>
<p>运行时异常</p>
<p>3、NullPointerException</p>
<p>空指针异常 </p>
<p>4、ClassCastException</p>
<p>类型转换异常</p>
<p>5、ArrayIndexOutOfBoundsException</p>
<p>数组下标越界异常</p>
<p>6、NumberFormatException</p>
<p>数字格式化异常</p>
<p>7、trace[treɪs]</p>
<p>n. 痕迹，踪迹；</p>
<p>stack trace ： 堆叠追踪；堆栈踪迹</p>
<p>8、message [‘mesɪdʒ]</p>
<p>vt. 通知 n.消息</p>
<h2 id="step-16"><a href="#step-16" class="headerlink" title="step-16"></a><strong>step-16</strong></h2><h3 id="掌握-13"><a href="#掌握-13" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、data[‘deɪtə]</p>
<p>n. 数据（datum 的复数）；资料</p>
<p>2、team[tiːm]</p>
<p>n. 队；组</p>
<p>3、service [‘sɜːvɪs]</p>
<p>n. 服务，服侍；</p>
<p>4、view[vjuː]</p>
<p>视图</p>
<p>5、bean[biːn]</p>
<p>豆</p>
<p>JavaBean：对象</p>
<p>6、salary[‘sælərɪ]</p>
<p>n. 薪水 </p>
<h3 id="拓展-15"><a href="#拓展-15" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、employee[ɪmˈplɔɪi;ˌemplɔɪˈi:]</p>
<p>n. 雇员；从业员工</p>
<p>2、programmer [‘prəʊgræmə]</p>
<p>n. [自][计] 程序设计员</p>
<p>3、designer[dɪ’zaɪnə]</p>
<p>n. 设计师；</p>
<p>4、architect [‘ɑːkɪtekt]</p>
<p>设计师，建筑师</p>
<p>5、equipment [ɪ’kwɪpm(ə)nt]</p>
<p>n. 设备，装备；器材</p>
<p>6、PC[,pi: ‘si:]</p>
<p>abbr. 个人电脑（Personal Computer）；</p>
<p>7、notebook[‘nəʊtbʊk]</p>
<p>n. 笔记本，笔记簿；</p>
<p>8、printer [‘prɪntə]</p>
<p>n. [计] 打印机；印刷工；</p>
<p>9、status[‘steɪtəs]</p>
<p>n. 地位；状态；情形；</p>
<p>10、free[friː]</p>
<p>adv. 自由地；免费；空闲的</p>
<p>11、busy[‘bɪzɪ]</p>
<p>adj. 忙碌的；热闹的；正被占用的</p>
<p>12、vacation[vəˈkeɪʃn]</p>
<p>vi. 休假，度假</p>
<p>13、bonus[‘bəʊnəs]</p>
<p>n. 奖金；红利；额外津贴</p>
<p>14、stock[stɒk]</p>
<p>n. 股份，股票；</p>
<p>15、description[dɪ’skrɪpʃ(ə)n] </p>
<p>n. 描述，描写；类型；说明书</p>
<p>16、display[dɪ’spleɪ]</p>
<p>显示器</p>
<p>17、model [‘mɒdl]</p>
<p>模型、型号</p>
<p>18、type [taɪp]</p>
<p>n. 类型，品种；模范；样式</p>
<p>19、remove[rɪ’muːv]</p>
<p>移除、删除</p>
<h2 id="step-17"><a href="#step-17" class="headerlink" title="step-17"></a><strong>step-17</strong></h2><h3 id="掌握-14"><a href="#掌握-14" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、integer[‘ɪntɪdʒə]</p>
<p>n. [数] 整数</p>
<p>2、character[‘kærəktə] </p>
<p>[计] 字符</p>
<p>3、parse [pɑːz]</p>
<p>解析</p>
<p>4、empty[ˈemptɪ]</p>
<p>adj. 空的；无意义的；</p>
<p>5、trim[trɪm]</p>
<p>vi. 削减</p>
<p>6、last [lɑːst]</p>
<p>adj. 最后的 n. 末尾，最后；上个；</p>
<p>7、first[fɜːst]</p>
<p>adv. 第一；首先；优先；</p>
<p>8、starts</p>
<p>n. 开始（start 的复数）； </p>
<p>start with：从…开始</p>
<p>9、ends</p>
<p>n. 结束（end 的复数）；目的；末端</p>
<p>end with ： 以……结束</p>
<p>10、replace[rɪ’pleɪs]</p>
<p>vt. 取代，代替；替换，更换；</p>
<p>replace all：全部替换</p>
<p>replace first：替换第一个</p>
<p>replace with：用…替换</p>
<p>11、substring[‘sʌb,striŋ]</p>
<p>n. [计] 子串；子字符串</p>
<p>12、split [splɪt]</p>
<p>vt. 分离；使分离；</p>
<p>13、contains[kən’teinz]</p>
<p>v. 包含；容纳；包含某字符串（contain 的单三形式）</p>
<p>14、uppercase[‘ʌpə’keɪs]</p>
<p>n. 大写字母</p>
<p>15、lowercase[,ləʊə’keɪs]</p>
<p>n. 小写字母；</p>
<p>16、concat</p>
<p>n. 合并多个数组；合并多个字符串</p>
<p>17、buffer[‘bʌfə]</p>
<p>n. [计] 缓冲区；</p>
<p>18、sqrt</p>
<p>abbr. 开平方根（square root）</p>
<p>19、pow </p>
<p>乘幂</p>
<p>20、ceil</p>
<p>向正无穷取整</p>
<p>21、floor</p>
<p>向负无穷取整 </p>
<p>22、round</p>
<p>四舍五入</p>
<p>23、date[deɪt]</p>
<p>n. 日期；</p>
<p>24、time [taɪm]</p>
<p>n. 时间；次数；</p>
<p>25、calendar[‘kælɪndə]</p>
<p>n. 日历；[天] 历法；日程表</p>
<p>26、append[ə’pend]</p>
<p>追加，附加</p>
<p>27、format[‘fɔːmæt]</p>
<p>vt. 使格式化；规定…的格式</p>
<p>28、local[‘ləʊk(ə)l]</p>
<p>n. [计] 局部；当地的；本地的</p>
<p>29、now [naʊ]</p>
<p>adv. 现在；如今；立刻</p>
<p>30、before[bɪ’fɔː]</p>
<p>prep. 在…之前，先于</p>
<p>31、after [‘ɑːftə]</p>
<p>prep. 在……之后</p>
<p>32、comparable[‘kɒmp(ə)rəb(ə)l]</p>
<p>adj. 可比较的；</p>
<p>33、comparator[kəm’pærətə]</p>
<p>比较器</p>
<h3 id="拓展-16"><a href="#拓展-16" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、wrapper[‘ræpə]</p>
<p>包装类</p>
<p>2、boxing[‘bɒksɪŋ]</p>
<p>v. 将…装入盒中（box 的 ing 形式） n.装箱 </p>
<p>3、unbox [,ʌn’bɔks]</p>
<p>vt. 从箱子中取出</p>
<p>4、auto[‘ɔːtəʊ]</p>
<p>n.自动</p>
<p>5、cache[kæʃ]</p>
<p>缓存</p>
<p>6、binary[‘baɪnərɪ]</p>
<p>adj. [数] 二进制的；</p>
<p>7、octal[‘ɒkt(ə)l]</p>
<p>adj. [数] 八进制的</p>
<p>8、hex [heks]</p>
<p>n. 十六进制；</p>
<p>9、decimal[‘desɪm(ə)l]</p>
<p>adj. 小数的；十进位的 n. 小数</p>
<p>10、ignore[ɪg’nɔː]</p>
<p>vt. 驳回诉讼；忽视；不理睬</p>
<p>11、equalsIgnoreCase</p>
<p>忽视大小写比较是否相等</p>
<p>12、memory[‘mem(ə)rɪ]</p>
<p>n. 记忆，记忆力；内存，[计] 存储器；回忆</p>
<p>13、free [friː]</p>
<p>adj. 免费的；自由的，不受约束的</p>
<p>14、current[‘kʌr(ə)nt]</p>
<p>adj. 现在的；流通的，通用的；最近的；</p>
<p>15、add[æd]</p>
<p>vi. 加；增加；加起来；做加法</p>
<p>16、subtract[səb’trækt]</p>
<p>vt. 减去；扣掉</p>
<p>17、multiply[‘mʌltɪplaɪ]</p>
<p>vt. 乘；使增加；使繁殖；使相乘</p>
<p>18、divide [dɪ’vaɪd] </p>
<p>vt. 划分；除；</p>
<p>19、remainder[rɪ’meɪndə]</p>
<p>n. [数] 余数，残余；</p>
<p>20、milli[‘mɪli]</p>
<p>毫，千分之一</p>
<p>21、zone[zəʊn]</p>
<p>地区</p>
<p>22、timezone</p>
<p>时区</p>
<p>23、locale[ləʊ’kɑːl]</p>
<p>区域、场所</p>
<p>24、plus[plʌs]</p>
<p>prep. 加，加上</p>
<p>25、minus[‘maɪnəs]</p>
<p>prep. 减，减去</p>
<p>26、leap [liːp]</p>
<p>vi. 跳，跳跃</p>
<p>leap year：闰年</p>
<p>27、Instant[‘ɪnst(ə)nt]</p>
<p>adj. 立即的；紧急的；紧迫的</p>
<p>28duration[djʊ’reɪʃ(ə)n]</p>
<p>n. 持续，持续的时间，期间</p>
<p>29、period[‘pɪərɪəd]</p>
<p>n. 周期，期间；时期；</p>
<p>30、offset[‘ɒfset]</p>
<p>位移、偏移</p>
<p>31、available [ə’veɪləb(ə)l]</p>
<p>adj. 有效的，可得的；可利用的；空闲的</p>
<p>32、temporal [‘temp(ə)r(ə)l]</p>
<p>adj. 时间的; 世俗的; 暂存的; &lt;语&gt;表示时间的</p>
<p>33、adjuster[ə’dʒʌstə] </p>
<p>n. 调停者，调节器</p>
<h2 id="step-18"><a href="#step-18" class="headerlink" title="step-18"></a><strong>step-18</strong></h2><h3 id="掌握-15"><a href="#掌握-15" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、collection [kə’lekʃ(ə)n] Collection</p>
<p>收集，采集</p>
<p>2、arrayList ArrayList</p>
<p>n. 数组列表、动态数组</p>
<p>3、list[lɪst] List</p>
<p>n. [计] 列表；清单；目录</p>
<p>4、set[set] Set</p>
<p>n. [数] 集合；</p>
<p>5、clear[klɪə]</p>
<p>vt. 清除；</p>
<p>6、size[saɪz]</p>
<p>n. 大小；尺寸</p>
<p>7、contains [kən’teinz]</p>
<p>v. 包含；容纳；包含某字符串（contain 的单三形式）</p>
<p>8、iterator [ɪtə’reɪtə] Iterator</p>
<p>n. 迭代器；</p>
<p>9、iterable Iterable</p>
<p>可迭代的; 可重复的; 迭代的</p>
<p>10、has[hæz]</p>
<p>v. 有，得到（have 的第三人称单数）；</p>
<p>11、next[nekst]</p>
<p>下一个</p>
<p>12、previous [‘priːvɪəs]</p>
<p>前一个、上一个 </p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a><strong>扩展</strong></h3><p>1、resize[riː’saɪz]</p>
<p>vt. 调整大小</p>
<p>2、retain[rɪ’teɪn]</p>
<p>vt. 保持、留存</p>
<p>3、vector[‘vektə]</p>
<p>向量</p>
<p>4、linked[lɪŋkt]</p>
<p>v. 连接；串联（link 的过去分词）</p>
<p>linked list ： 链表 LinkedList</p>
<p>5、enumeration [ɪ,njuːmə’reɪʃən] </p>
<p>n. 列举；[数] 计算；细目</p>
<p>6、concurrent [kən’kʌr(ə)nt]</p>
<p>adj. 并发的；一致的；同时发生的；并存的</p>
<p>7、modification[,mɒdɪfɪ’keɪʃ(ə)n]</p>
<p>n. 修改，修正；改变</p>
<p>8、ConcurrentModificationException</p>
<p>并发修改异常</p>
<p>9、HashSet</p>
<p>散列集合</p>
<p>10、LinkedHashSet </p>
<p>链式散列集</p>
<p>11、TreeSet</p>
<p>树集 </p>
<h2 id="step-19"><a href="#step-19" class="headerlink" title="step-19"></a><strong>step-19</strong></h2><h3 id="掌握-16"><a href="#掌握-16" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、map[mæp]</p>
<p>vt. 映射；</p>
<p>2、key[kiː]</p>
<p>n. （打字机等的）键；关键；钥匙</p>
<p>3、value[‘væljuː]</p>
<p>n. 值；</p>
<p>4、put[pʊt]</p>
<p>vt. 放；安置；赋予</p>
<p>5、entry[ˈentrɪ]</p>
<p>n. 进入；入口；条目；</p>
<h3 id="拓展-17"><a href="#拓展-17" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、HashMap</p>
<p>哈希图</p>
<p>2、Hashtable</p>
<p>哈希表</p>
<p>3、TreeMap</p>
<p>矩阵树图</p>
<p>4、LinkedHashMap </p>
<p>链表哈希映射</p>
<p>5、property[‘prɒpətɪ]</p>
<p>属性</p>
<p>6、properties[‘prɒpətɪz]</p>
<p>（property 的复数形式）</p>
<p>7、bucket [‘bʌkɪt] </p>
<p>n. 桶 </p>
<p>8、generic[dʒɪ’nerɪk]</p>
<p>泛化</p>
<p>9、wildcard[‘waɪldkɑrd]</p>
<p>n. 通配符</p>
<p>10、shuffle[‘ʃʌf(ə)l]</p>
<p>v. 洗牌</p>
<p>11、iterate [‘ɪtərət] </p>
<p>vt. 迭代；重复；</p>
<p>12、compare [kəm’peə] </p>
<p>n. 比较</p>
<p>13、insert [ɪn’sɜːt] </p>
<p>vt. 插入；嵌入;</p>
<p>14、fill [fɪl] </p>
<p>vt. 装满，使充满；满足；</p>
<p>vi. 被充满</p>
<h2 id="step-20"><a href="#step-20" class="headerlink" title="step-20"></a><strong>step-20</strong></h2><h3 id="掌握-17"><a href="#掌握-17" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、file[faɪl]</p>
<p>n. 文件；</p>
<p>2、directory[dɪ’rekt(ə)rɪ; daɪ-]</p>
<p>n. [计] 目录；</p>
<p>3、create[kriː’eɪt]</p>
<p>创建</p>
<p>4、InputStream</p>
<p>字节输入流</p>
<p>5、OutputStream </p>
<p>字节输出流</p>
<p>6、Reader</p>
<p>字符输入流</p>
<p>7、Writer</p>
<p>字符输出流</p>
<p>8、read [ri:d;red]</p>
<p>读取</p>
<p>9、write [raɪt]</p>
<p>写</p>
<p>10、close[kləʊs]</p>
<p>vi. 关；结束；关闭</p>
<p>11、flush [flʌʃ] </p>
<p>刷新</p>
<p>12、stream [striːm] </p>
<p>流动；流</p>
<h3 id="拓展-18"><a href="#拓展-18" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、folder[‘fəʊldə]</p>
<p>n. 文件夹；折叠机；</p>
<p>2、modified[ˈmɒdɪfaɪd]</p>
<p>adj. 改进的，修改的</p>
<p>long lastModified 获取最后一次的修改时间 ; 上次修改的时间</p>
<p>3、parent[‘peər(ə)nt]</p>
<p>n. 父亲（或母亲）；父母亲；根源</p>
<p>4、absolute[‘æbsəluːt]</p>
<p>adj. 绝对的；完全的；</p>
<p>5、canonical [kə’nɒnɪk(ə)l]</p>
<p>规范化</p>
<p>6、mkdir</p>
<p>n. 建立一个新的子目录（DOS 命令） </p>
<p>7、separator[‘sepəreɪtə] </p>
<p>[计] 分隔符</p>
<p>8、hidden [‘hɪdn]</p>
<p>adj. 隐藏的</p>
<p>9、suffix[‘sʌfɪks]</p>
<p>n. 后缀；下标</p>
<p>10、prefix[‘priːfɪks]</p>
<p>n. 前缀</p>
<p>11、readonly</p>
<p>adj. 只读的</p>
<p>12、canWrite </p>
<p>是否可写</p>
<p>13、readable[‘riːdəb(ə)l]</p>
<p>adj. 可读的；</p>
<p>14、exists</p>
<p>n. 存在量词（exist 的复数）</p>
<p>15、rename[riː’neɪm]</p>
<p>vt. 重新命名，改名</p>
<p>16、FileNotFoundException</p>
<p>文件找不到异常</p>
<h2 id="step-21"><a href="#step-21" class="headerlink" title="step-21"></a><strong>step-21</strong></h2><p>###<strong>掌握</strong></p>
<p>1、buffered</p>
<p>adj. 缓冲的</p>
<p>v. 缓冲（buffer 的过去分词）</p>
<p>2、ObjectInputStream </p>
<p>对象输入流，从字节流中读出序列化的状态信息并把它们恢复为对象 </p>
<p>3、ObjectOutputStream</p>
<p>对象输出流，序列化一个对象</p>
<p>4、serializable Serializable</p>
<p>adj. 可串行化的</p>
<p>5、transient[‘trænzɪənt]</p>
<p>暂时性，瞬态的</p>
<p>6、channel[‘tʃæn(ə)l]</p>
<p>n. 通道；频道；海峡</p>
<h3 id="拓展-19"><a href="#拓展-19" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、transfer[træns’fɜː; trɑːns-; -nz-]</p>
<p>n. 转让；转移；</p>
<p>2、encoding[ɪn’kəʊdɪŋ]</p>
<p>v. [计] 编码（encode 的 ing 形式）</p>
<p>3、decoding[‘di’kodɪŋ]</p>
<p>v. 破译；译解（decode 的 ing 形式）</p>
<p>4、charset</p>
<p>n. 字符集</p>
<p>5、UID</p>
<p>唯一标识符：unique identifier</p>
<p>6、serialVersionUID</p>
<p>序列化唯一标识符</p>
<p>7、access[‘ækses]</p>
<p>存取</p>
<p>8、RandomAccessFile</p>
<p>支持“随机访问”</p>
<p>的方式，程序可以直接跳到文件的任意地方来读、</p>
<p>写文件</p>
<p>9、seek [siːk]</p>
<p>vt. 寻求；寻找；</p>
<p>10、skip[skɪp] </p>
<p>vt. 跳过；遗漏</p>
<p>11、resources [rɪˈsɔːsiz]</p>
<p>n. [计][环境] 资源；物力（resource 的复数）</p>
<p>12、option[‘ɒpʃ(ə)n]</p>
<p>n. [计] 选项；</p>
<p>13、capacity[kə’pæsɪtɪ]</p>
<p>n. 能力；容量；</p>
<p>14、limit[‘lɪmɪt]</p>
<p>n. 限制；限度；界线</p>
<p>15、position[pə’zɪʃ(ə)n]</p>
<p>位置</p>
<p>16、mark[mɑːk]</p>
<p>标记，标志</p>
<p>17、reset [riː’set]</p>
<p>vi. 重置；清零</p>
<p>18、allocate[‘æləkeɪt]</p>
<p>vi. 分配；指定</p>
<p>19、flip[flɪp]</p>
<p>翻转</p>
<p>20、rewind[riː’waɪnd]</p>
<p>反绕、倒带、倒转、倒回；重绕</p>
<p>21、direct[dəˈrekt; daɪˈrekt]</p>
<p>adj. 直接的；</p>
<p>22、encoder [en’kəʊdə]</p>
<p>n. 编码器；译码器</p>
<p>23、decoder[,diː’kəʊdə]</p>
<p>n. 解码器，译码器；</p>
<p>24、serialize [‘sɪrɪəlaɪz] </p>
<p>vt. 连载，使连续，串行化</p>
<p>25、serialized </p>
<p>n. 序列化;  </p>
<p>使…成序列（serialize 的过去分词）</p>
<p>26、serialization [,sɪərɪəlɪ’zeʃən] </p>
<p>n. 序列化；串行化；</p>
<h2 id="step-22"><a href="#step-22" class="headerlink" title="step-22"></a><strong>step-22</strong></h2><p>###<strong>掌握</strong></p>
<p>1、thread [θred]</p>
<p>线程</p>
<p>2、start[stɑːt]</p>
<p>vt. 开始；启动</p>
<p>3、run[rʌn]</p>
<p>执行，运行</p>
<p>4、sleep[sliːp]</p>
<p>n. 睡眠</p>
<p>5、wait[weɪt]</p>
<p>vt. 等候；推迟；延缓</p>
<p>6、notify[‘nəʊtɪfaɪ]</p>
<p>vt. 通告，通知；公布</p>
<p>7、stop[stɒp]</p>
<p>vi. 停止；中止；</p>
<p>8、synchronized[‘sɪŋkrənaɪzd]</p>
<p>adj. 同步的；同步化的</p>
<p>v. 使协调（synchronize 的过去分词）；同时发生；校准</p>
<p>9、lock [lɒk]</p>
<p>vt. 锁，锁上； </p>
<h3 id="拓展-20"><a href="#拓展-20" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、program[‘prəʊɡræm]</p>
<p>n. 程序；</p>
<p>2、process [prəˈses;(for n.)ˈprəʊses]</p>
<p>过程，进程</p>
<p>3、illegal [ɪ’liːg(ə)l]</p>
<p>adj. [法] 非法的；违法的；违反规则的</p>
<p>IllegalThreadStateException：非法的线程状态异常</p>
<p>4、interrupted[ɪntə’rʌptɪd]</p>
<p>adj. 中断的；被打断的；</p>
<p>5、suspend[sə’spend]</p>
<p>vt. 延缓，推迟；使暂停</p>
<p>6、resume[rɪˈzjuːm]</p>
<p>vt. 重新开始，继续；恢复，重新占用</p>
<p>7、yield[jiːld]</p>
<p>vi. 屈服，投降</p>
<p>8、alive[ə’laɪv]</p>
<p>adj. 活着的；</p>
<p>9、priority[praɪ’ɒrɪtɪ]</p>
<p>n. 优先；优先权；[数] 优先次序；</p>
<p>10、singleton[‘sɪŋg(ə)lt(ə)n]</p>
<p>独身，单例</p>
<p>11、lazy[‘leɪzɪ]</p>
<p>adj. 懒惰的</p>
<p>12、hungry[‘hʌŋgrɪ]</p>
<p>adj. 饥饿的；渴望的；</p>
<p>13、safe [seɪf]</p>
<p>adj. 安全的；可靠的；</p>
<p>14、join [dʒɒɪn] </p>
<p>vt. 参加；结合；连接;</p>
<h2 id="step-23"><a href="#step-23" class="headerlink" title="step-23"></a><strong>step-23</strong></h2><h3 id="掌握-18"><a href="#掌握-18" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、host name[‘host,nem]</p>
<p>n. 主机名称；主名</p>
<p>2、host address</p>
<p>[计] 主机地址</p>
<p>3、IP[‘aɪ’pi]</p>
<p>abbr. 互联网协议（Internet Protocol）；</p>
<p>4、localhost</p>
<p>n. 本地主机；本地服务器</p>
<p>5、TCP</p>
<p>abbr. 传输控制协议（Transmission Control Protocol）；</p>
<p>6、UDP</p>
<p>abbr. 用户数据报协议（User Datagram Protocol）；</p>
<p>7、socket[‘sɒkɪt]</p>
<p>n. 插座；窝，穴；牙槽 [计]套接口，套接字</p>
<p>8、connect[kə’nekt]</p>
<p>vt. 连接；</p>
<p>9、server[‘sɜːvə]</p>
<p>服务器</p>
<p>10、client[‘klaɪənt]</p>
<p>客户端</p>
<p>11、receive[rɪ’siːv]</p>
<p>接收</p>
<p>12、send[send]</p>
<p>发送</p>
<p>13、port [pɔːt] </p>
<p>（计算机的）端口； </p>
<h3 id="拓展-21"><a href="#拓展-21" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、internet [‘ɪntənet] </p>
<p>n. 因特网</p>
<p>2、datagram [‘detə,græm] </p>
<p>n. 数据报</p>
<p>3、packet [‘pækɪt] </p>
<p>n. 数据包，信息包；</p>
<p>4、HTTP</p>
<p>abbr. 超文本传输协议（Hyper Text Transport Protocol） </p>
<p>5、url [,ju: ɑ:r ‘el] </p>
<p>abbr. 全球资源定位器（Uniform Resource Locator）; </p>
<p>6、request [rɪ’kwest] </p>
<p>n. 请求；需要; </p>
<p>vt. 要求，请求</p>
<p>7、response[rɪ’spɒns]</p>
<p>n. 响应；反应；回答</p>
<p>8、locate [lə(ʊ)’keɪt] </p>
<p>vt. 位于；查找…的地点; </p>
<p>vi. 定位；定居</p>
<p>9、link [lɪŋk] </p>
<p>n. [计] 链环，环节；联系，关系</p>
<p>vt. 连接，连结；</p>
<p>linkage [‘lɪŋkɪdʒ] </p>
<p>n. 连接；结合；联接</p>
<p>linker [‘lɪŋkɚ] </p>
<p>n. 链接器；连结器</p>
<p>10、firewall [‘faɪɚwɔl] </p>
<p>n. 防火墙; </p>
<p>vt. 用作防火墙</p>
<p>11、login [‘lɒɡɪn] </p>
<p>n. [计] 进入系统</p>
<p>vt. [计] 登录；注册</p>
<p>12、online [ɒn’laɪn] </p>
<p>adj. 联机的；在线的</p>
<p>13、offline [ɒf’laɪn]</p>
<p>adj. 脱机的；离线的，未连线的</p>
<h2 id="step-24"><a href="#step-24" class="headerlink" title="step-24"></a><strong>step-24</strong></h2><h3 id="掌握-19"><a href="#掌握-19" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、field[fiːld]</p>
<p>字段、域、属性</p>
<p>2、method[‘meθəd]</p>
<p>n. 方法；条理；类函数</p>
<p>3、invoke[ɪn’vəʊk]</p>
<p>调用</p>
<p>4、constructor[kənˈstrʌktə(r)]</p>
<p>n. 构造函数；构造器；</p>
<p>5、new instance newInstance()</p>
<p>创建实例对象</p>
<p>6、ClassLoader</p>
<p>类加载器</p>
<h3 id="拓展-22"><a href="#拓展-22" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、reflect[rɪ’flekt]</p>
<p>反射</p>
<p>2、load[ləʊd]</p>
<p>vi. [力] 加载；装载 </p>
<p>3、declared [dɪ’kleəd]</p>
<p>已声明的</p>
<p>4、accessible[ək’sesɪb(ə)l]</p>
<p>adj. 易接近的；可进入的；</p>
<p>5、dynamic[daɪ’næmɪk]</p>
<p>adj. 动态的；</p>
<p>6、handle [‘hænd(ə)l] </p>
<p>vt. 处理；操作；</p>
<p>InvocationHandler</p>
<p>调用处理器，其实动态代理机制最核心的就是 InvocationHandler(调用</p>
<p>处理器)这个接口。在动态代理中，是基于面向接口编程的。</p>
<p>7、parameter type</p>
<p>参数类型，parameterTypes（复数形式）</p>
<p>8、primitive type</p>
<p>基本数据类型</p>
<p>网络其他描述方式：base data type、primary data type、atomic data type </p>
<p>9、reference type</p>
<p>引用数据类型</p>
<p>10、Generic Superclass</p>
<p>泛化父类，例如：Father<String></p>
<p>11、Generic Interfaces </p>
<p>泛化接口们，例如：Comparable<Student>等</p>
<p>12、getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes) </p>
<p>返回一个 Method 对象，该对象反映此 Class 对象所表示的类或接</p>
<p>口的指定已声明方法</p>
<p>getMethod(String name, Class&lt;?&gt;… parameterTypes)</p>
<p>返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的</p>
<p>指定公共成员方法。</p>
<p>13、target [‘tɑːgɪt] </p>
<p>n. 目标；靶子</p>
<p>vt. 把……作为目标；规定……的指标； </p>
<h2 id="step-25"><a href="#step-25" class="headerlink" title="step-25"></a><strong>step-25</strong></h2><h3 id="掌握-20"><a href="#掌握-20" class="headerlink" title="掌握"></a><strong>掌握</strong></h3><p>1、lambda[‘læmdə]</p>
<p>n. 希腊字母的第 11 个 </p>
<p>2、functional[‘fʌŋkʃənl]</p>
<p>adj. 功能的</p>
<p>3、interface[‘intəfeis]</p>
<p>n. 界面；接口；接触面</p>
<p>4、consumer[kən’sju:mə]</p>
<p>n. 消费者；用户，顾客</p>
<p>5、supplier[sə’plaɪə]</p>
<p>n. 供应厂商，供应国；供应者</p>
<p>6、function[‘fʌŋ(k)ʃ(ə)n]</p>
<p>n. 功能；[数] 函数；职责；盛大的集会</p>
<p>vi. 运行；活动；行使职责</p>
<p>7、predicate[ˈprɛdɪˌkeɪt]</p>
<p>vt. 断定为…；使…基于</p>
<p>vi. 断言，断定</p>
<p>n. 谓语，述语</p>
<p>adj. 谓语的；述语的</p>
<p>8、optional [‘ɒpʃ(ə)n(ə)l] Optional</p>
<p>adj. 可选择的，随意的</p>
<p>9、stream[striːm]</p>
<p>n. 溪流；流动；潮流；光线</p>
<p>vi. 流；涌进；飘扬</p>
<p>vt. 流出；涌出；使飘动</p>
<p>10、filter [‘fɪltə] </p>
<p>vi. 滤过；渗入；慢慢传开</p>
<p>n. 滤波器；[化工] 过滤器；筛选；滤光器</p>
<p>vt. 过滤；渗透；用过滤法除去</p>
<p>11、distinct[dɪ’stɪŋ(k)t]</p>
<p>adj. 明显的；独特的；清楚的；有区别的</p>
<p>12、limit[‘lɪmɪt]</p>
<p>n. 限制；限度；界线</p>
<p>vt. 限制；限定</p>
<p>13、skip[skɪp]</p>
<p>vi. 跳跃；跳绳；遗漏；跳读</p>
<p>vt. 跳过；遗漏</p>
<p>n. 跳跃；跳读</p>
<p>14、map [mæp]</p>
<p>vt. 映射；计划；绘制地图；确定基因在染色体中的位置</p>
<p>15、flat[flæt]</p>
<p>adj. 平的；单调的；不景气的；干脆的；平坦的；扁平的；浅的</p>
<p>adv. （尤指贴着另一表面）平直地；断然地；水平地；直接地，完全</p>
<p>地</p>
<p>n. 平地；公寓；平面</p>
<p>vt. 使变平；[音乐]使（音调）下降，尤指降半音</p>
<p>16、match[mætʃ]</p>
<p>vt. 使比赛；使相配；敌得过，比得上；相配；与…竞争</p>
<p>17、reduce [rɪ’djuːs]</p>
<p>vt. 减少；降低；使处于；把…分解</p>
<p>vi. 减少；缩小；归纳为</p>
<p>18、collect[kə’lekt]</p>
<p>vt. 收集；募捐</p>
<p>vi. 收集；聚集；募捐 </p>
<h3 id="拓展-23"><a href="#拓展-23" class="headerlink" title="拓展"></a><strong>拓展</strong></h3><p>1、unary[‘juːnərɪ]</p>
<p>adj. [数] 一元的</p>
<p>2、operator[‘ɒpəreɪtə]</p>
<p>n. 经营者；操作员；话务员；行家</p>
<p>3、binary[‘baɪnərɪ]</p>
<p>adj. [数] 二进制的；二元的，二态的</p>
<p>4、parallel[‘pærəlel]</p>
<p>n. 平行线；对比</p>
<p>vt. 使…与…平行</p>
<p>adj. 平行的；类似的，相同的</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>Java输出语句中的println、print和printf</title>
    <url>/2021/10/03/Java%E8%BE%93%E5%87%BA%E8%AF%AD%E5%8F%A5%E4%B8%AD%E7%9A%84println%E3%80%81print%E5%92%8Cprintf/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="前情提要："><a href="#前情提要：" class="headerlink" title="前情提要："></a>前情提要：</h2><p>最初接触的Java输出语句就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>也一直以为Java就这么一种输出形式，没有思考过其他可能。果然，今天我就遇到了麻烦 . . . </p>
<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>今天做Java练习，要输出一个char型数组，但“println”会自动换行就导致以下情况：</p>
<p><img src="https://i.loli.net/2021/10/03/cUy7asTQVIk5b6M.jpg"></p>
<p>就很离谱 . . .</p>
<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>把println换为print即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">chr</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String str = <span class="string">&quot;I love you !&quot;</span>;</span><br><span class="line">		<span class="keyword">char</span>[] chr = str.toCharArray();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chr.length; i ++) &#123;</span><br><span class="line">			System.out.print(chr[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/03/ce98SChoTJHxXnU.jpg"></p>
<h2 id="知识拓展："><a href="#知识拓展：" class="headerlink" title="知识拓展："></a>知识拓展：</h2><p>Java中输出语句有三种<strong>print</strong>，分别是<strong>println</strong>、<strong>print</strong>和<strong>printf</strong></p>
<p>1、printf主要是继承了C语言的printf的一些特性，可以进行格式化输出</p>
<p>2、print就是一般的标准输出，输入信息后不会换行</p>
<p>3、println输入信息会换行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Print</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">		System.out.print(<span class="string">&quot;print:num = &quot;</span>);</span><br><span class="line">		System.out.print(num + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;println:num = &quot;</span>);</span><br><span class="line">		System.out.println(num);</span><br><span class="line">		System.out.printf(<span class="string">&quot;printf:num = %d&quot;</span>,num);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/03/OIEa4jsDGgcMeAC.jpg"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>踩坑小记录</tag>
      </tags>
  </entry>
  <entry>
    <title>java语言的特点</title>
    <url>/2021/07/20/Java%E8%AF%AD%E8%A8%80%E7%9A%84%E7%89%B9%E7%82%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="跨平台性"><a href="#跨平台性" class="headerlink" title="跨平台性"></a>跨平台性</h2><h3 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h3><p>这里的平台是指计算机的系统平台，也就是Windows、Linux、Mac等。所有软件（可以看成代码集合体）都是基于平台运行的。</p>
<h3 id="什么叫做跨平台性？"><a href="#什么叫做跨平台性？" class="headerlink" title="什么叫做跨平台性？"></a>什么叫做跨平台性？</h3><p>软件是基于平台进行运行的，也就是说一个又C++编写的软件能够在Windows上运行，但如果换一个平台就不能运行了，所以说C++不具备跨平台性（相对来说是这样，在源码级别，C++还是跨平台的）。而一个用java’编写的软件能够在所有平台上运行，因此java具有跨平台性。</p>
<h3 id="为什么Java能够跨平台"><a href="#为什么Java能够跨平台" class="headerlink" title="为什么Java能够跨平台"></a>为什么Java能够跨平台</h3><p>实际上，Java应用程序并不是在新系统平台上运行的，它是由在Java虚拟机（JVM）上运行，然后发送指令给计算机进行操作的。因此，我们只需要在计算机上装一个JVM，就可以领java应用程序在计算机上运行。</p>
<p>ps：JVM是不能跨平台的</p>
<h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p>Java应用程序的执行过程（从左往右）</p>
<p><img src="https://i.loli.net/2021/07/20/Lp43gtW526G9zEk.jpg" alt="Java应用程序"></p>
<p>C++应用程序的执行过程（从右往左）</p>
<p><img src="https://i.loli.net/2021/07/20/Frm6JiXpPf3VkZT.jpg" alt="C++应用程序的执行过程"></p>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续 . . ."></a>未完待续 . . .</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法简单教程</title>
    <url>/2021/07/16/Markdown%E8%AF%AD%E6%B3%95%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>markdown语言是一种轻量级的标记语言，主要通过一些简单的符号对文本进行处理，可以说是程序员写博客的首选语言。</p>
<h1 id="程序员为什么比较偏爱markdown-？"><a href="#程序员为什么比较偏爱markdown-？" class="headerlink" title="程序员为什么比较偏爱markdown ？"></a>程序员为什么比较偏爱markdown ？</h1><ul>
<li><p><strong>markdown比较符合程序员的平时习惯</strong></p>
<p>程序员平时做的最多的就是敲代码。而在敲代码的过程中，鼠标就成为了一个很“碍事”的东西。每一次使用鼠标都会不同程度上的打断程序员的思维，从而给编程带来很多麻烦。而且，程序员的很多工作本身也不需要怎么使用鼠标。因此，久而久之，程序员多少有些抗拒使用鼠标。</p>
<p>markdown语言就是一个能够解放鼠标的语言。平时我们使用word编辑文档时，需要使用鼠标点击达到各种格式，比如：字体调节，列表，定标题等。对于平时不怎么喜欢使用鼠标的程序员来说，这是一种心灵上的折磨。因此，markdown因其可以通过各种符号进行文本处理的特性就成为了程序员的最佳选择。</p>
</li>
<li><p><strong>markdown语言格式统一，便于阅读</strong></p>
<p>在丰富度方面，word是碾压mark down的，有些人总会通过自己的脑洞用word搞出各种奇葩的文章风格，搞得其他人阅读起来就会很吃力。而markdown的各种处理都是固定的，这也导致用markdown写出来的文章风格几乎一模一样。</p>
<p>格式简洁、单一看似是markdown的缺点，实际上却是markdown的真正魅力所在。如果100个人用word写文章，会有100种风格，而1000个人用markdown写文章也只有一种风格。一个人习惯了自己的风格，再去看别人的风格的文章就会形成阅读壁垒，从而造成不必要的障碍。而markdown就不存在这种问题，因为它只有一种风格，只要我们习惯了自己的风格，再去看其他程序员的技术博客就不会有阅读壁垒，因为风格都是一样的。</p>
</li>
<li><p><strong>格式简约，更多的注意力都聚焦于文章内容</strong></p>
<p>程序员的博客大多都是技术博客和知识分享博客，这些大多都聚焦于文章内容，过于花里胡哨的格式反而会令文章价值大打折扣，而markdown的格式就是走的极致简约路线，很符合程序员的需求。</p>
</li>
<li><p><strong>稳定性强，可移植性强</strong></p>
<p>word最令人诟病的一点就是文章稳定性差，可移植性极差，往往一篇文章在自己电脑里排版的整整齐齐，换一台设备打开，文章排版就会被打乱，一般都需要转成PDF在别的设备上的开。</p>
<p>markdown就不存在这种问题，只要是支持markdown语言的，无论在哪里打开都不会乱。这也算是个相当省头发特性。</p>
</li>
</ul>
<h1 id="Markdown语法快速入门（typora）："><a href="#Markdown语法快速入门（typora）：" class="headerlink" title="Markdown语法快速入门（typora）："></a>Markdown语法快速入门（typora）：</h1><h2 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码块语法：</span></span><br><span class="line">​~~~语言名</span><br><span class="line">比如：~~~java</span><br><span class="line">     ~~~c++</span><br></pre></td></tr></table></figure>

<p><strong>Java代码块</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yrp.po;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br></pre></td></tr></table></figure>

<p><strong>C++代码块</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout&lt;&lt;<span class="string">&quot;C++代码块&quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure>

<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标题语法</span></span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题    </span><br><span class="line">##### 五级标题    </span><br><span class="line">###### 六级标题   </span><br></pre></td></tr></table></figure>

<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加粗</span></span><br><span class="line">**加粗**</span><br><span class="line"><span class="comment">//代码高亮显示</span></span><br><span class="line">    ==代码高亮显示==</span><br><span class="line"><span class="comment">//删除线</span></span><br><span class="line">    ~~删除线~~</span><br><span class="line"><span class="comment">//斜体</span></span><br><span class="line">    *斜体*</span><br></pre></td></tr></table></figure>

<p>// 加粗<br><strong>加粗</strong><br>//代码高亮显示<br>    ==代码高亮显示==<br>//删除线<br>    <del>删除线</del><br>//斜体<br>    <em>斜体</em></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用语法：</span></span><br><span class="line">&gt;一级引用</span><br><span class="line">&gt;&gt;二级引用</span><br><span class="line">&gt;&gt;&gt;三级引用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一级引用</p>
<blockquote>
<p>二级引用</p>
</blockquote>
<blockquote>
<blockquote>
<p>三级引用</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分割线语法：</span></span><br><span class="line"><span class="comment">//全屏分割线：</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">//分割线</span></span><br><span class="line">***</span><br></pre></td></tr></table></figure>

<p>//全屏分割线：</p>
<hr>
<p>//分割线</p>
<hr>
<h2 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在线图片/本地图片</span></span><br><span class="line">![甘雨](https:<span class="comment">//i.loli.net/2021/07/16/URVdtBlu7KyI3fW.jpg) </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/07/16/URVdtBlu7KyI3fW.jpg" alt="甘雨"></p>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//超链接语法</span></span><br><span class="line">[我的个人博客](https:<span class="comment">//dengxiayouhun.github.io/)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://dengxiayouhun.github.io/">我的个人博客</a></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表语法</span></span><br><span class="line"><span class="comment">//无序列表</span></span><br><span class="line">- 目录<span class="number">1</span></span><br><span class="line">- 目录<span class="number">2</span></span><br><span class="line">- 目录<span class="number">3</span></span><br><span class="line"><span class="comment">//有序列表</span></span><br><span class="line"> 数字. 名称</span><br><span class="line"> <span class="number">1.</span> 首页</span><br><span class="line"> <span class="number">2.</span> 标签</span><br><span class="line"> <span class="number">3.</span> 分类</span><br></pre></td></tr></table></figure>

<p>//无序列表</p>
<ul>
<li>目录1</li>
<li>目录2</li>
<li>目录3</li>
</ul>
<p>//有序列表</p>
<ol>
<li>首页</li>
<li>标签</li>
<li>分类</li>
</ol>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/s/建议用快捷键：Ctrl+T</span><br><span class="line"><span class="comment">//表格语法</span></span><br><span class="line">|数据结构与算法| 计算机组成原理|计算机网络|</span><br><span class="line">|-|-|-|</span><br><span class="line">| 操作系统|编译原理|汇编语言| </span><br><span class="line">|Java SE|Java Web||</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>数据结构与算法</th>
<th>计算机组成原理</th>
<th>计算机网络</th>
</tr>
</thead>
<tbody><tr>
<td>操作系统</td>
<td>编译原理</td>
<td>汇编语言</td>
</tr>
<tr>
<td>Java SE</td>
<td>Java Web</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的安装、删库、服务的开启、删除与登录</title>
    <url>/2021/09/25/MySQL%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E5%88%A0%E5%BA%93%E3%80%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%BC%80%E5%90%AF%E3%80%81%E5%88%A0%E9%99%A4%E4%B8%8E%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>去官网下载压缩包然后把文件夹解压到自己喜欢放的位置，比如我是放在D盘。</p>
<p><img src="https://i.loli.net/2021/09/25/mYq3V8h42ENWpPI.jpg"></p>
<p><a href="https://dev.mysql.com/downloads/mysql/">官网传送门</a></p>
<h2 id="创建my-ini配置文件"><a href="#创建my-ini配置文件" class="headerlink" title="创建my.ini配置文件"></a>创建my.ini配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port=3306</span><br><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port=3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=D:\MySQL\mysql-8.0.26</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=D:\MySQL\mysql-8.0.26\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors=10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集 </span><br><span class="line">default-character-set=utf8</span><br><span class="line">[client]</span><br><span class="line"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

<p>把里面的内容C+V到my.ini文件（自己创建）里，注意两个路径要改成你自己的路径。</p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>把bin的路径配置到Path系统变量里，可以参考Java配置环境变量</p>
<p><a href="https://dengxiayouhun.github.io/2021/07/22/Java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">Java环境变量配置—传送门</a></p>
<h2 id="初始化MySQL"><a href="#初始化MySQL" class="headerlink" title="初始化MySQL"></a>初始化MySQL</h2><p>打开cmd命令行（以管理员身份运行，下面的cmd都是如此），cd到bin目录下，输入下面这条命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure>

<p>记得截图保存初始密码，之后登陆MySQL要用，就是这个东西。</p>
<p><img src="https://i.loli.net/2021/09/25/xHwdITAyCoWmg23.jpg"></p>
<blockquote>
<p>*在初始化MySQL之前是没有data文件夹的，初始化会自动生成，不要自己瞎搞一个data文件夹（没错,这个小可爱就是我）</p>
</blockquote>
<h2 id="安装MySQL服务"><a href="#安装MySQL服务" class="headerlink" title="安装MySQL服务"></a>安装MySQL服务</h2><p>打开cmd命令行（应该还没关吧），cd到bin目录下，输入下面这条命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --install </span><br></pre></td></tr></table></figure>

<blockquote>
<p>其实原本命令是mysqld –install [服务名]，不过如果不写服务名就会默认是mysql。我奉劝各位小可爱不要瞎起名字，MySQL就挺好的。</p>
</blockquote>
<h2 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h2><p>在cmd命令行（默认各位都还开着）输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其实这个命令是net start 服务名，用来启动服务的。</p>
</blockquote>
<h2 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h2><p>在cmd命令行输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p>然后，输入密码，就是那个初始密码（没截图的可以重新初始化，重新获得密码）</p>
<h2 id="退出MySQL"><a href="#退出MySQL" class="headerlink" title="退出MySQL"></a>退出MySQL</h2><p>输入以下指令任意一个即可</p>
<p><img src="https://i.loli.net/2021/09/25/JFhHltpoGfvSuNw.png"></p>
<h2 id="删库跑路"><a href="#删库跑路" class="headerlink" title="删库跑路"></a>删库跑路</h2><p>一位优秀的程序员要熟练删库操作（卸载MySQL），虽然你写bug的样子很狼狈，但你删库跑路的背影却很靓仔。</p>
<p><img src="https://i.loli.net/2021/09/25/bN6EIpk9wacdBSH.jpg"></p>
<ol>
<li><p>首先我们要停止MySQL服务</p>
<p>打开cmd输入以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure></li>
<li><p>删掉MySQL文件夹</p>
<p>就是那个解压的文件夹（记得把环境变量也清洗一下）</p>
</li>
<li><p>删掉注册表</p>
<p>打开cmd命令行，输入regedit，运行，然后打开注册表，删除HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL文件夹</p>
</li>
<li><p>删除MySQL服务</p>
<p>如果已经将MySQL卸载，但通过“开始-》所有应用-》Windows管理工具-》服务”查看到MySQL服务仍然残留在系统服务里。又不想改服务名，改怎么办呢。只要在CMD里输入一条命令就可以将服务删除：<br>　　sc delete mysql //这里的mysql是你要删除的服务名, 这样一来服务就被删除了。</p>
<blockquote>
<p>如果是通过安装包安装的MySQL，还需要进行软件卸载</p>
<p><img src="https://i.loli.net/2021/09/29/NLGCsQuS7t3VOae.jpg"></p>
<p>就是在这里，找到MySQL应用并删除</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Scanner中的nextLine()与next()</title>
    <url>/2021/09/24/Scanner%E4%B8%AD%E7%9A%84nextLine-%E4%B8%8Enext/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="情景回顾"><a href="#情景回顾" class="headerlink" title="情景回顾"></a>情景回顾</h2><p>今天练习代码，遇见了以下情况：</p>
<p>（1）</p>
<p><img src="https://i.loli.net/2021/09/24/v6KTuUzXsmFDWwt.jpg"></p>
<p>(2)</p>
<p><img src="https://i.loli.net/2021/09/24/PuIBwLNlz69bjgE.jpg"></p>
<p>(3)<img src="https://i.loli.net/2021/09/24/C5qyg1R8stJrZMf.jpg"></p>
<p>(4)<img src="https://i.loli.net/2021/09/24/a8NvhbSqoBdreJi.jpg"></p>
<p>基本就是只要nextLine()前面有输入语句，那么nextLine()就会直接结束不会输入任何字符串。而将nextLine()换成next()就不会有这种情况。</p>
<h2 id="这是为什么呢？"><a href="#这是为什么呢？" class="headerlink" title="这是为什么呢？"></a>这是为什么呢？</h2><p>nextLine()相比于nextInt()、nextDouble()、next()等方法缺少一个类似于保护机制的东西。</p>
<p>比如：</p>
<p><img src="https://i.loli.net/2021/09/24/a8NvhbSqoBdreJi.jpg"></p>
<p>当我们输入“1”并按下回车键时，“1”会被nextInt()接受，而回车却被留在标准输入流当中了，如果下一个就是nextLine()，那么nextLine()就会直接读取到回车键，然后执行，这样我们就无法输入任何数据。</p>
<p>那么为什么把换成next()就没事了呢，因为next()如果没有读取到任何数据是不会结束的，nextDouble()、nextInt()等都有这个保护机制。</p>
<p>比如：<img src="https://i.loli.net/2021/09/24/ao2Kz3MFE1Xp7ke.jpg"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>踩坑小记录</tag>
      </tags>
  </entry>
  <entry>
    <title>java踩坑小记录（目录）</title>
    <url>/2021/09/22/java%E8%B8%A9%E5%9D%91%E5%B0%8F%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><table>
<thead>
<tr>
<th>问题描述</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td>Java输出语句中的println、print和printf</td>
<td><a href="https://dengxiayouhun.github.io/2021/10/03/Java%E8%BE%93%E5%87%BA%E8%AF%AD%E5%8F%A5%E4%B8%AD%E7%9A%84println%E3%80%81print%E5%92%8Cprintf/">Java输出语句中的println、print和printf</a></td>
</tr>
<tr>
<td>next()与nextLine()</td>
<td><a href="https://dengxiayouhun.github.io/2021/09/24/Scanner%E4%B8%AD%E7%9A%84nextLine-%E4%B8%8Ennext/">Scanner中的nextLine()与next()</a></td>
</tr>
<tr>
<td>如何解决Win 10环境变量配置时Path变量只显示一行的问题</td>
<td><a href="https://dengxiayouhun.github.io/2021/09/07/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3Win10%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%97%B6Path%E5%8F%98%E9%87%8F%E5%8F%AA%E6%98%BE%E7%A4%BA%E4%B8%80%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/">环境变量Path的显示设置</a></td>
</tr>
<tr>
<td>Resource leak:”XXX” is never closed</td>
<td><a href="https://blog.csdn.net/fesdab/article/details/107291816?ops_request_misc=&request_id=&biz_id=102&utm_term=java%E5%87%BA%E7%8E%B0Resource">ScannerTest</a></td>
</tr>
<tr>
<td>如何连续的输出char类型的变量</td>
<td><a href="https://dengxiayouhun.github.io/2021/10/02/%E5%A6%82%E4%BD%95%E8%BF%9E%E7%BB%AD%E7%9A%84%E8%BE%93%E5%87%BAchar%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F/">如何连续的输出char类型的变量</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>踩坑记录</tag>
      </tags>
  </entry>
  <entry>
    <title>初始化线性表（顺序结构）</title>
    <url>/2021/09/27/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%88%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="Operation："><a href="#Operation：" class="headerlink" title="Operation："></a>Operation：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">InitList(L):初始化操作，</span><br></pre></td></tr></table></figure>



<h2 id="任务："><a href="#任务：" class="headerlink" title="任务："></a>任务：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.定义线性表类型的对象L。</span></span><br><span class="line"><span class="comment">2.初始化线性表L，并输出其长度。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><ul>
<li><p>C</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//抽象数据类型，是线性表中数据元素的数据类型。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//抽象数据类型，是函数返回值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;<span class="comment">//定义一个顺序结构的线性表。</span></span><br><span class="line">    Status i;</span><br><span class="line">    </span><br><span class="line">    i = InitList(L);<span class="comment">//初始化线性表L。</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L.length = %d\n&quot;</span>,L.length);<span class="comment">//输出线性表的长度。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>C++</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//抽象数据类型，是线性表中数据元素的数据类型。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//抽象数据类型，是函数返回值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;<span class="comment">//定义一个顺序结构的线性表。</span></span><br><span class="line">    Status i;</span><br><span class="line">    </span><br><span class="line">    i = <span class="built_in">InitList</span>(L);<span class="comment">//初始化线性表L。</span></span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;L.length = &quot;</span>&lt;&lt;L.length&lt;&lt;endl;<span class="comment">//输出线性表的长度。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>删除线性表中第i个位置的元素</title>
    <url>/2021/09/30/%E5%88%A0%E9%99%A4%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B8%AD%E7%AC%ACi%E4%B8%AA%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%85%83%E7%B4%A0(%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="operation"><a href="#operation" class="headerlink" title="operation"></a>operation</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InitList(L):初始化线性表。</span><br><span class="line">ListInsert(*L, i, e)；在线性表第i个位置插入新元素e。</span><br><span class="line">ListDelet(*L, i, *e):删除线性表第i个元素，并用e返回其值。</span><br></pre></td></tr></table></figure>

<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.定义线性表类型的对象L。</span></span><br><span class="line"><span class="comment">2.初始化线性表L，并输出其长度。</span></span><br><span class="line"><span class="comment">3.在表头依次插入1~5，输出其长度，并判断L是否为空。</span></span><br><span class="line"><span class="comment">4.删除第3个元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul>
<li><p>C</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//抽象数据类型，是线性表中数据元素的数据类型。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//抽象数据类型，是函数返回值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="comment">//初始化线性表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将线性表中第i个位置插入新元素e</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList *L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">    <span class="comment">//判断线性表是否已满  </span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == MAXSIZE)</span><br><span class="line">        <span class="keyword">return</span>  ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span>)<span class="comment">//判断i是否有效</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将第i个位置及其之后的元素后移一位</span></span><br><span class="line">        <span class="keyword">for</span>(k = L-&gt;length<span class="number">-1</span>;k &gt;= i<span class="number">-1</span>; k--)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k+<span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//将新元素插入</span></span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">    <span class="comment">//更新线性表的长度</span></span><br><span class="line">    L-&gt;length ++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除线性表第i个元素，并且用e返回</span></span><br><span class="line">ListDelet(SqList *L, <span class="keyword">int</span> i, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;<span class="comment">//定义一个顺序结构的线性表。</span></span><br><span class="line">    Status i;</span><br><span class="line">    </span><br><span class="line">    i = InitList(L);<span class="comment">//初始化线性表L。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L.length = %d\n&quot;</span>,L.length);</span><br><span class="line">    <span class="comment">//在表头依次插入1~5</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)&#123;</span><br><span class="line">        ListInsert(&amp;L, <span class="number">1</span>, j); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L.length = %d\n&quot;</span>,L.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>C++</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>判断线性表是否为空（顺序结构）</title>
    <url>/2021/09/27/%E5%88%A4%E6%96%AD%E7%BA%BF%E6%80%A7%E8%A1%A8%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%EF%BC%88%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="operation"><a href="#operation" class="headerlink" title="operation"></a>operation</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">InitList(L): 初始化线性表</span><br><span class="line">ListEmpty(L): 判断线性表是否为空</span><br></pre></td></tr></table></figure>

<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.定义线性表类型的对象L。</span></span><br><span class="line"><span class="comment">2.初始化线性表L，并输出其长度。</span></span><br><span class="line"><span class="comment">3.判断线性表是否为空。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//抽象数据类型，是线性表中数据元素的数据类型。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//抽象数据类型，是函数返回值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListEmpty</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;<span class="comment">//定义一个顺序结构的线性表。</span></span><br><span class="line">    Status i;</span><br><span class="line">    </span><br><span class="line">    i = InitList(L);<span class="comment">//初始化线性表L。</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L.length = %d\n&quot;</span>,L.length);<span class="comment">//输出线性表的长度。</span></span><br><span class="line">    </span><br><span class="line">    i = ListEmpty(L);<span class="comment">//判断线性表是否为空</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L是否为空？i=%d（1：是 0：否）\n&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//抽象数据类型，是线性表中数据元素的数据类型。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//抽象数据类型，是函数返回值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListEmpty</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;<span class="comment">//定义一个顺序结构的线性表。</span></span><br><span class="line">    Status i;</span><br><span class="line">    </span><br><span class="line">    i = <span class="built_in">InitList</span>(L);<span class="comment">//初始化线性表L。</span></span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;L.length = &quot;</span>&lt;&lt;L.length&lt;&lt;endl;<span class="comment">//输出线性表的长度。</span></span><br><span class="line">    </span><br><span class="line">    i = <span class="built_in">ListEmpty</span>(L);<span class="comment">//判断线性表是否为空</span></span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;L是否为空？i=&quot;</span>&lt;&lt; i &lt;&lt;<span class="string">&quot;（1：是 0：否）&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>前言-关于搭建博客</title>
    <url>/2021/07/13/%E5%89%8D%E8%A8%80-%E5%85%B3%E4%BA%8E%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><h2 id="零基础能搭建个人博客吗-？"><a href="#零基础能搭建个人博客吗-？" class="headerlink" title="零基础能搭建个人博客吗 ？"></a>零基础能搭建个人博客吗 ？</h2><p>当然可以 ！</p>
<p>我搭建这个博客时就是零基础。刚开始做这个的时候，我也只会一些浅显的C语言和C++的语法，其他的知识像计算机网络，框架，数据结构与算法之类的和搭建网站，一概不知。但最后我依旧断断续续的搭建出了这么一个不错的静态博客，用时一个星期左右 。</p>
<h2 id="零基础搭建博客难吗-？"><a href="#零基础搭建博客难吗-？" class="headerlink" title="零基础搭建博客难吗 ？"></a>零基础搭建博客难吗 ？</h2><p>说实话，零基础搭建博客是比较难的。</p>
<p>它的难点主要在于“从0到1”这个过程，因为在这个过程中，我们基本处于盲人摸象的状态，任何一个bug都可能让人特别头疼。大部分人也是在在这个过程中放弃的。</p>
<p>但是，“从1到10”甚至“从1到100”这个过程却是越来越容易。因为当我们达到“1”这个水平后，我们对搭建博客就有了一个大概的了解，遇到的问题都能够做到对症下药，越来越熟练，也越来越容易。并且，搭建静态博客所用到的框架，插件，代码包，主题等都不需要我们去学，我们在只需要学会怎么拿来用即可。所以，每当我们遇到问题时，只要我们去查资料、问大佬，持之以恒，坚持不懈、最后一定会成功的。</p>
<h2 id="大学生需要写博客吗"><a href="#大学生需要写博客吗" class="headerlink" title="大学生需要写博客吗"></a>大学生需要写博客吗</h2><p>我对其他专业并不了解。但对于未来准备从事程序员工作的同学们，我可以负责任的告诉大家：“写自己的个人博客几乎是必需的，写与不写无非是早晚的问题。” </p>
<p>写博客的理由具体如下：</p>
<ul>
<li><p>能够加深对于知识和技术的理解</p>
<p>像程序员这种行业，完全就是靠技术吃饭。所以，如果我们不能在学生时期把基础知识打的足够牢固，未来我们就会付出更大的代价去弥补基础上上的不足。</p>
<p>相信大家都体验过“一听就会，一写就废”。出现这种情况有很大一部分原因是很多知识我们只是看懂了，但却没有深刻理解其核心原理。深入理解每一个知识的核心原理是我们平时必须要做的事，而输出知识就是一种加深理解知识核心原理的重要手段，写博客的重要目的之一就是为了输出知识。</p>
<blockquote>
<p>ps：当我们学习变量的时候，我们很轻易地就能学会，然后就跳过去学习其他知识了，然而我们大多数却并不知道变量这个知识点的根本原理。放在平时学习，我们不会去深究这些，但当我们写学习笔记的时候我们就会不由自主地去深究其原理（正常人应该不会花费时间写一些没有意义的东西吧）。比如：”int a”就是在储存空间中划出一个int类型大小的空间，并将其命名为a，之后无论是赋值，运算都是围绕着“a”这个空间进行的。这就是写学习博客的作用，它会引导我们潜移默化地加深对知识的理解。</p>
</blockquote>
</li>
<li><p>增强逻辑总结能力</p>
<p>优秀的程序员都是技术宅，但这并不意味着优秀程序员情商低。优秀的程序员可以不八面玲珑，但必须逻辑缜密、头脑清晰、善于总结。因为程序员的工作并不只有写代码，与同事交流沟通也是其工作中极其重要的一环。据我所知，程序员的工作中至少有1/3的时间是在开会，因为一个大的项目往往是由很多个程序员共同完成的，所以在实际项目之中，沟通交流能力是十分重要的。如果我们在沟通过程中不能将自己想要说的说出来，那么一定会在未来的工作中栽大跟头。</p>
<p>写博客就是一个不断总结、不断提高自身逻辑思维能力的事。如果我们能坚持写博客2年以上，沟通与交流将不会成为我们未来职业道路上的拦路虎。</p>
</li>
<li><p>写进简历、找工作的加分项</p>
<p>首先，在简历中写上自己的个人博客的链接本身就是一件十分有逼格的事。</p>
<p>其次，搭建个人博客实际上就是一个实战项目（指那种每一行代码都是有自己敲出来的博客），我们的博客就是我们掌握知识的最好证明，每当我们学习新的知识我们就可以优化我们的博客。当HR看到我们的个人博客时，就能很直观地知道我们拥有那些技能知识，获得好感度，这是个很大的加分项。</p>
<p>我们写在博客里的内容HR或许并不会看，但HR进入我们的博客就会看到比如：Java核心技术 卷一学习笔记 100篇博客 、实战项目一 30篇博客、踩坑记录 200篇博客等东西。当HR看到这些东西，哪怕他不点进去看具体的文章内容，他也会大致了解我们基础知识掌握的如何，对知识技术的态度到什么程度。在这种情况下下，如果我们有一个十分优秀的个人博客，只要我们其他面试环节不太拉跨，通过面试的几率就会高上不少</p>
</li>
</ul>
<h2 id="怎么搭建博客？"><a href="#怎么搭建博客？" class="headerlink" title="怎么搭建博客？"></a>怎么搭建博客？</h2><p>这个我就不能乱说了，因为我本身也是通过参考各种资料、视频才把个人博客搭建起来的。让我搭建一个博客没啥问题，但让我教别人 . . . . . .  说实话，我自认还没达到那个水平。如果有想自己搭建博客的小伙伴，可以在右下角的小弹窗（一个短信的图标）上私信我，我会把我搭建博客时用到过的资料、视频发给你。</p>
<p>如果搭建博客的过程中遇到什么问题也可以来问我，如果我能知道，一定会解答。</p>
]]></content>
      <categories>
        <category>前言</category>
      </categories>
      <tags>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>如何连续的输出char类型的变量</title>
    <url>/2021/10/02/%E5%A6%82%E4%BD%95%E8%BF%9E%E7%BB%AD%E7%9A%84%E8%BE%93%E5%87%BAchar%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>两个char类型输出时不能直接(chr[1] + chr[2]);的输出，这样 + 的连接符就不是连接符，编译器会直接将两者ASCII码值相加并转换为int类型输出。</p>
<p>所以，我们可以连接一个空字符串进行输出，像这样：(chr[1] + “” + chr[2]);</p>
]]></content>
      <categories>
        <category>踩坑小记录</category>
      </categories>
  </entry>
  <entry>
    <title>如何解决Win 10环境变量配置时Path变量只显示一行的问题</title>
    <url>/2021/09/07/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3Win10%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%97%B6Path%E5%8F%98%E9%87%8F%E5%8F%AA%E6%98%BE%E7%A4%BA%E4%B8%80%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="以前的版本"><a href="#以前的版本" class="headerlink" title="以前的版本"></a>以前的版本</h2><p>以前的版本，编辑环境变量时，变量总是显示一行，像这样：</p>
<p><img src="https://i.loli.net/2021/09/07/Nk5V7XeoCUQBLSa.jpg"></p>
<p>修改环境变量的时候特别麻烦。</p>
<h2 id="Win-10的版本"><a href="#Win-10的版本" class="headerlink" title="Win 10的版本"></a>Win 10的版本</h2><p>到了Win 10版本后，这个问题就得到了解决</p>
<p><img src="https://i.loli.net/2021/07/23/S7vPB56arGyzcOg.jpg"></p>
<p>变量的显示不再是一行，而是变成了列表形式。</p>
<h2 id="Win-10又更新了"><a href="#Win-10又更新了" class="headerlink" title="Win 10又更新了"></a>Win 10又更新了</h2><p>但后来，再次打开了环境变量，他又变成了原来的样子 -_-</p>
<p><img src="https://i.loli.net/2021/09/07/Nk5V7XeoCUQBLSa.jpg"></p>
<p>而实际上，并不是又回到了原来的版本，只是Win 10在更新后同时兼顾了两种查看方式。</p>
<ul>
<li><p>当%xxxxx%这种变量放在第一个时，就会按照第一行显示</p>
</li>
<li><p>当路径变量放在第一行时，就会按照列表显示。</p>
<p><img src="https://i.loli.net/2021/09/07/XDrNMRWa217bjnJ.jpg"></p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/07/ABe3Kvna2QLuhNz.jpg"></p>
<p><img src="https://i.loli.net/2021/09/07/gy5Pv49reJSQnRj.jpg"></p>
]]></content>
      <categories>
        <category>踩坑小记录</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>搭建环境</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库的一些基本概念</title>
    <url>/2021/09/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h3><p>数据库(database），简单来说就是存储数据的容器。</p>
<h3 id="什么是数据库管理系统-？"><a href="#什么是数据库管理系统-？" class="headerlink" title="什么是数据库管理系统 ？"></a>什么是数据库管理系统 ？</h3><p>数据库管理系统（DBMS），顾名思义，就是用来操作管理数据库的工具。</p>
<h3 id="什么是SQL-？"><a href="#什么是SQL-？" class="headerlink" title="什么是SQL ？"></a>什么是SQL ？</h3><p>是一种专门用来服务数据库的语言，DBMS一般用SQL来操作数据库。</p>
<h3 id="什么是端口-？"><a href="#什么是端口-？" class="headerlink" title="什么是端口 ？"></a>什么是端口 ？</h3><p>类似于IP地址至于计算机。每一台计算机都有一个唯一的IP地址，而每一个计算机的服务都有一个独一无二的端口号（不同计算机的相同服务端口号是相同的）。</p>
<h3 id="什么是MySQL-？"><a href="#什么是MySQL-？" class="headerlink" title="什么是MySQL ？"></a>什么是MySQL ？</h3><p>MySQL是一种特别常用的DBMS。</p>
<h3 id="数据库、数据库管理系统与SQL的关系："><a href="#数据库、数据库管理系统与SQL的关系：" class="headerlink" title="数据库、数据库管理系统与SQL的关系："></a>数据库、数据库管理系统与SQL的关系：</h3><p><img src="https://i.loli.net/2021/09/25/cShzX5Re4qnyV1M.jpg"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2021/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><h2 id="数据-data"><a href="#数据-data" class="headerlink" title="数据(data)"></a>数据(data)</h2><ul>
<li><p>什么是数据？</p>
<p>数据就是描述客观事物的符号，可以是字符、数字、视频、音频、图片等。</p>
</li>
<li><p>数据有什么特点？</p>
<ol>
<li>可以被计算机识别</li>
<li>可以被计算级操作</li>
</ol>
</li>
</ul>
<h2 id="数据元素-data-element"><a href="#数据元素-data-element" class="headerlink" title="数据元素(data element)"></a>数据元素(data element)</h2><p>数据元素是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。（也称结点、元素、记录或者顶点）</p>
<blockquote>
<p>比如：在畜禽类这个数据中，鸡、鸭、牛、羊就都是是数据元素。</p>
</blockquote>
<h2 id="数据项-（date-item）"><a href="#数据项-（date-item）" class="headerlink" title="数据项 （date item）"></a>数据项 （date item）</h2><p>一个数据元素可以由若干个数据项组成</p>
<blockquote>
<p>比如：人这样的数据元素可以有鼻子、嘴巴、眼睛、手、脚这样的数据项，也可以有名字、性别、年龄、家庭住址、身份证号这样的数据项。</p>
</blockquote>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul>
<li><p>数据项是不可分割的最小单位</p>
</li>
<li><p>通常研究时我们研究的基本单位是数据元素</p>
<blockquote>
<p>比如：当我们研究生物时，我们会以猪、牛、羊等数据元素为基本研究单位，而不是以牛的眼睛、牛的尾巴等数据项作为基本单位去研究。</p>
</blockquote>
</li>
</ul>
<h2 id="数据对象-data-object"><a href="#数据对象-data-object" class="headerlink" title="数据对象(data object)"></a>数据对象(data object)</h2><p>​     数据对象是<strong>性质相同</strong>的数据元素的集合，是数据的子集。</p>
<ul>
<li><p>什么是性质相同？</p>
<p>性质相同就是两个数据元素具有相同数量和类型的数据项。</p>
</li>
<li><p>数据和数据对象</p>
<p>由于数据对象是数据的子集，在实际应用中，数据对象往往和数据有相同的性质。在不产生混淆的情况下，我们都将数据对象简称为数据。</p>
<blockquote>
<table>
<thead>
<tr>
<th align="center">姓名</th>
<th align="center">性别</th>
<th align="center">年龄</th>
</tr>
</thead>
<tbody><tr>
<td align="center">小明</td>
<td align="center">男</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">小红</td>
<td align="center">女</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">小磊</td>
<td align="center">男</td>
<td align="center">13</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">课程名n</th>
<th align="center">学时</th>
<th align="center">学分</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数据结构与算法</td>
<td align="center">40</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">计算机组成原理</td>
<td align="center">25</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">操作系统</td>
<td align="center">20</td>
<td align="center">4</td>
</tr>
</tbody></table>
<p>两个列表都是数据，两个列表是两个数据对象，列表的每一行都是一个数据元素，每一列都是数据项。</p>
</blockquote>
</li>
</ul>
<h1 id="数据结构-data-structure"><a href="#数据结构-data-structure" class="headerlink" title="数据结构(data structure)"></a>数据结构(data structure)</h1><p>数据之间都不是完全独立存在的，不同数据之间都特定的关系，这些关系就是<strong>结构</strong></p>
<ul>
<li>按照视角的不同，我们可以把数据结构分为<strong>逻辑结构</strong>和<strong>物理结构</strong></li>
</ul>
<h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><p>逻辑结构是数据对象中数据元素之间的相互关系</p>
<ol>
<li><p>集合结构</p>
<p>集合结构中的数据元素除了在一个集合之外，没有任何其他关系。</p>
<blockquote>
<p>一些数学中的数字集合，比如数据对象自然数中的是数据元素1、2、3、4、5之间就没有任何和其他的逻辑关系。</p>
</blockquote>
</li>
<li><p>线性结构</p>
<p>线性结构中的数据元素是一对一的关系。</p>
</li>
<li><p>树形结构</p>
<p>树形结构中的数据元素之间存在一对多的关系。</p>
</li>
<li><p>图形结构</p>
<p>图形结构的是数据元素是多对多的关系。</p>
</li>
</ol>
<h2 id="物理结构-存储结构"><a href="#物理结构-存储结构" class="headerlink" title="物理结构(存储结构)"></a>物理结构(存储结构)</h2><p>物理结构是指如何把数据元素储存在存储器中，因此也叫存储结构。数据的存储结构如何正确的反应数据元素之间的逻辑结构是物理结构的难点和重点。</p>
<ol>
<li><p>顺序存储结构</p>
<p>顺序存储出结构是把数据元素存放在地址连续的存储单元里。</p>
<blockquote>
<p>数组的存储结构就是顺序存储结构</p>
</blockquote>
</li>
<li><p>链式存储结构</p>
<p>链式存储结构是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的也可以是不连续的。</p>
</li>
</ol>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul>
<li><p>什么是数据类型？</p>
<p>数据类型是指一组性质相同的值的集合及定义在此集合上的一些此操作的总称。</p>
</li>
<li><p>我们为什么要分出各种数据类型？</p>
<p>根本原因是内存是十分珍贵的，我们必须以最小的内存存放最多的数据，从而降低成本。</p>
</li>
<li><p>数据是如何和被储存到内存当中的？</p>
<p>要想把数据存储在内存中，必须在内存中开辟出一片空间出来，然后把数据塞到这片空间中，而且这片空间的大小必须大于等于是数据所占用的空间。</p>
</li>
<li><p>为什么需要设置各种数据类型？</p>
<blockquote>
<p>比如说：养鸡，我们有一个1平方千米的养鸡场。当我们养的鸡的数量比较少时，我们可以随意地把鸡撒到养鸡场里。这个时候养鸡场的空间价值并没有显得那么珍贵。但随着我们养的鸡的数量不断增多，我们不得通过设置篱笆等方式限制鸡的活动范围，从而使养鸡厂里能养更多的鸡。甚至到最后一个鸡一个笼子，大笼子装大鸡，小笼子装小鸡，把养鸡场的空间价值开发到极致。</p>
</blockquote>
<p>数据与内存的关系就是到了后期的鸡与养鸡场的关系，每一份内存都十分珍贵。如果我们把一个2字节的数据存放到一片8字节的空间中，这种操作是极为浪费的行为。因此我们为各种类型的数据设置了各种数据类型，把数据存储到对应数据开辟出的空间当中，既不会因为开辟的空间太小导致数据失真，有可以避免开辟的空间太大，造成过多的浪费。</p>
</li>
</ul>
<h2 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h2><ul>
<li><p>抽象是什么？</p>
<p>抽象是指抽取出事物具有的普遍性的本质。</p>
</li>
<li><p>什么是抽象数据类型？</p>
<p>一个数学学模型及定义在该模型上的是一组操作。</p>
<blockquote>
<p>比如：智能手机、PC、平板上都有整型数据，但他们在各种计算机中事务实现方式并不一样，所以这些整型又不完全相同。但由于整型的本质是1、2、3、4 . . . 等整形数据的集合，所以我们可以抽象出整型这个抽象数据类型。这个整型同时代指各个计算机上的整形数据，并且这个数据类型只用考虑其抽象出来的特性，其他特性都被隐藏不用考虑。</p>
</blockquote>
<p>当然，抽象数据类型的应用很广，我们甚至可以抽取几个变量的特性进而抽象出一个新的变量。</p>
<blockquote>
<p>比如：当我们编写绘图相关的软件的时候，总会有成对出现的x、y变量（代表横坐标轴和纵坐标轴）。为了方便，我们可以定义一个point的抽象数据类型，他有x、y两种整型变量。</p>
</blockquote>
</li>
<li><p>抽象数据类型的核心理念：</p>
<p>抽象数据类型体现了程序设计中<strong>问题分解</strong>、<strong>抽象</strong>和<strong>信息隐藏</strong>的特性。</p>
<blockquote>
<p>抽象数据类型把实际生活中的问题<strong>分解</strong>为多个规模小且容易处理的问题，然后<strong>建立</strong>一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程<strong>隐藏</strong>起来。</p>
</blockquote>
</li>
</ul>
<p>​                                                                                                                                 </p>
<p>​                                                                                                                                                     <strong>——参考资料《大话数据结构》</strong></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库课堂笔记1</title>
    <url>/2021/09/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h3><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><h2 id="关系数据库概述"><a href="#关系数据库概述" class="headerlink" title="关系数据库概述"></a>关系数据库概述</h2>]]></content>
  </entry>
  <entry>
    <title>字符串练习</title>
    <url>/2021/10/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%83%E4%B9%A0%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="任务一："><a href="#任务一：" class="headerlink" title="任务一："></a>任务一：</h1><h2 id="任务描述："><a href="#任务描述：" class="headerlink" title="任务描述："></a>任务描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编写程序将“jdk16”全部变为大写，并输出到屏幕，截取子串“DK”并输出到屏幕。</span><br></pre></td></tr></table></figure>

<h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><h3 id="代码逻辑："><a href="#代码逻辑：" class="headerlink" title="代码逻辑："></a>代码逻辑：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 用char数组存储“jdk16”</span><br><span class="line">2. 用for语句和if语句进行大写转换</span><br><span class="line">3. 用数组进行字串输出（也可以转换成字符串之后截取字串输出，但是完全没有必要）</span><br></pre></td></tr></table></figure>

<h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Two_String_1_1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//建立char数组，存储“jdk16”</span></span><br><span class="line">		<span class="keyword">char</span>[] jdk = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">		jdk[<span class="number">0</span>] = <span class="string">&#x27;j&#x27;</span>;</span><br><span class="line">		jdk[<span class="number">1</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">		jdk[<span class="number">2</span>] = <span class="string">&#x27;k&#x27;</span>;</span><br><span class="line">		jdk[<span class="number">3</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">		jdk[<span class="number">4</span>] = <span class="string">&#x27;6&#x27;</span>;</span><br><span class="line">		<span class="keyword">int</span> length = <span class="number">5</span>;</span><br><span class="line">		<span class="comment">//大写转换</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= length - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(jdk[i] &gt;= <span class="number">97</span> &amp;&amp; jdk[i] &lt;= <span class="number">122</span>) &#123;</span><br><span class="line">				jdk[i] -= <span class="number">32</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//输出“DK”</span></span><br><span class="line">		System.out.println(jdk[<span class="number">1</span>] + <span class="string">&quot;&quot;</span> + jdk[<span class="number">2</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行检测："><a href="#运行检测：" class="headerlink" title="运行检测："></a>运行检测：</h3><p><img src="https://i.loli.net/2021/10/02/4NOatZSE59kdijQ.jpg"></p>
<h3 id="自评："><a href="#自评：" class="headerlink" title="自评："></a>自评：</h3><ul>
<li><p><strong>缺点：</strong></p>
<p>方法常规，没有特色，</p>
</li>
<li><p><strong>优点：</strong></p>
<p>容易想到QAQ</p>
</li>
</ul>
<h3 id="收获："><a href="#收获：" class="headerlink" title="收获："></a>收获：</h3><p><a href="https://dengxiayouhun.github.io/2021/10/02/%E5%A6%82%E4%BD%95%E8%BF%9E%E7%BB%AD%E7%9A%84%E8%BE%93%E5%87%BAchar%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F/">如何连续的输出两个char类型变量</a></p>
<h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><h3 id="代码逻辑：-1"><a href="#代码逻辑：-1" class="headerlink" title="代码逻辑："></a>代码逻辑：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 将jdk16存储到String类型变量中</span><br><span class="line">2. 通过toUpperCase方法将小写字母转换为大写字母。</span><br><span class="line">3. 用substring方法输出子串“DK”</span><br></pre></td></tr></table></figure>

<h3 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Two_String_1_2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//将jdk16存储到String类型变量中</span></span><br><span class="line">		String str = <span class="string">&quot;jdk16&quot;</span>;</span><br><span class="line">		<span class="comment">//调用toUpperCase方法将小写字母转换为大写字母。</span></span><br><span class="line">		str = str.toUpperCase();</span><br><span class="line">		<span class="comment">//用substring方法输出子串“DK”</span></span><br><span class="line">		System.out.println(str.substring(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码检测："><a href="#代码检测：" class="headerlink" title="代码检测："></a>代码检测：</h3><p><img src="https://i.loli.net/2021/10/02/pfbWBg3Yxwtemqj.jpg"></p>
<h3 id="自评：-1"><a href="#自评：-1" class="headerlink" title="自评："></a>自评：</h3><ul>
<li><p><strong>优点：</strong></p>
<p>代码简洁，规范，效率较高。</p>
</li>
<li><p><strong>缺点：</strong></p>
<p>不容易想到，需要熟读API文档，或者百度抄答案 -_-</p>
</li>
</ul>
<h3 id="API文档："><a href="#API文档：" class="headerlink" title="API文档："></a>API文档：</h3><p><img src="https://i.loli.net/2021/10/03/t51xILwNMQVFDOd.jpg"></p>
<h1 id="任务二："><a href="#任务二：" class="headerlink" title="任务二："></a>任务二：</h1><h2 id="任务描述：-1"><a href="#任务描述：-1" class="headerlink" title="任务描述："></a>任务描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">统计任意给定字符串中数字个数。</span><br></pre></td></tr></table></figure>

<h2 id="代码逻辑：-2"><a href="#代码逻辑：-2" class="headerlink" title="代码逻辑："></a>代码逻辑：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 输入字符串</span><br><span class="line">2. 用length方法获取字符串长度，用toCharArray方法将字符串转化为char型数组。</span><br><span class="line">3. 判断是否为数字并输出其个数</span><br></pre></td></tr></table></figure>

<h2 id="代码实现：-2"><a href="#代码实现：-2" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Two_String_2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//输入字符串</span></span><br><span class="line">		System.out.println(<span class="string">&quot;请输入一行字符串：&quot;</span>);</span><br><span class="line">		String str = scan.nextLine();</span><br><span class="line">		scan.close();</span><br><span class="line">		<span class="comment">//用length方法获取字符串长度，用toCharArray方法将字符串转化为char型数组。</span></span><br><span class="line">		<span class="keyword">int</span> length = str.length();</span><br><span class="line">		<span class="keyword">char</span>[] chr = <span class="keyword">new</span> <span class="keyword">char</span>[length];</span><br><span class="line">		chr = str.toCharArray();</span><br><span class="line">		<span class="comment">//判断每个字符是否是数字并计数</span></span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(chr[i] &gt;= <span class="number">48</span> &amp;&amp; chr[i] &lt;=<span class="number">57</span>) &#123;</span><br><span class="line">				count ++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//输出</span></span><br><span class="line">		System.out.println(<span class="string">&quot;您输入的字符串中有&quot;</span> + count + <span class="string">&quot;个数字。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行检测：-1"><a href="#运行检测：-1" class="headerlink" title="运行检测："></a>运行检测：</h2><p><img src="https://i.loli.net/2021/10/03/wbZMXxAcJuk7UC1.jpg"></p>
<h2 id="自评：-2"><a href="#自评：-2" class="headerlink" title="自评："></a>自评：</h2><p>中规中矩，主要是String相关方法的使用。</p>
<h1 id="任务三："><a href="#任务三：" class="headerlink" title="任务三："></a>任务三：</h1><h2 id="任务描述：-2"><a href="#任务描述：-2" class="headerlink" title="任务描述："></a>任务描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将一个数组从左开始第几位之前的进行旋转：</span><br><span class="line">左旋数组，如：将”abcdef”第2位之前（a为0号位置）</span><br><span class="line">进行旋转后为：”cdefab“。</span><br></pre></td></tr></table></figure>

<h2 id="代码逻辑：-3"><a href="#代码逻辑：-3" class="headerlink" title="代码逻辑："></a>代码逻辑：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 输入字符串和旋转位</span><br><span class="line">2. 将字符串转换为char型数组，并新建一个char型数组存储旋转后的数据。</span><br><span class="line">3. 存储旋转位之前的数组元素</span><br><span class="line">4. 存储旋转位之后的数组元素</span><br><span class="line">5. 将旋转数组转化位字符串</span><br><span class="line">6. 输出旋转字符串</span><br></pre></td></tr></table></figure>

<h2 id="代码实现：-3"><a href="#代码实现：-3" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Two_String_3</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//输入字符串和旋转位</span></span><br><span class="line">		System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">		String str = scan.nextLine();</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入旋转位：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> location = scan.nextInt();</span><br><span class="line">		scan.close();</span><br><span class="line">		<span class="comment">//将字符串转换为char型数组，并新建一个char型数组存储旋转后的数据。</span></span><br><span class="line">		<span class="keyword">char</span>[] chr = str.toCharArray();</span><br><span class="line">		<span class="keyword">char</span>[] chr_new = <span class="keyword">new</span> <span class="keyword">char</span>[str.length()];</span><br><span class="line">		<span class="comment">//存储旋转位之前的数组元素</span></span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = location; j &lt;= str.length() - <span class="number">1</span>; j++) &#123;</span><br><span class="line">			chr_new[i] = chr[j];</span><br><span class="line">			i ++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//存储旋转位之后的数组元素</span></span><br><span class="line">		<span class="keyword">int</span> m = str.length() - location;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">0</span>; n &lt;= location - <span class="number">1</span>; n++ ) &#123;</span><br><span class="line">			chr_new[m] = chr[n];</span><br><span class="line">			m ++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将旋转数组转化位字符串</span></span><br><span class="line">		String str_new = <span class="keyword">new</span> String(chr_new);</span><br><span class="line">		<span class="comment">//输出旋转字符串</span></span><br><span class="line">		System.out.println(<span class="string">&quot;旋转后的字符串为：&quot;</span> + str_new);	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行检测：-2"><a href="#运行检测：-2" class="headerlink" title="运行检测："></a>运行检测：</h2><p><img src="https://i.loli.net/2021/10/03/2AdjNCyO3vX74ki.jpg"></p>
<h2 id="API文档：-1"><a href="#API文档：-1" class="headerlink" title="API文档："></a>API文档：</h2><p><img src="https://i.loli.net/2021/10/03/GVsmu6LIU7cRxXZ.jpg"></p>
<h2 id="自评：-3"><a href="#自评：-3" class="headerlink" title="自评："></a>自评：</h2><p>比较满意，</p>
<p>运用的方法比较一般，难点主要在设计上</p>
<p>代码逻辑如果设计好，任务就完成了一大半。</p>
<h1 id="任务四："><a href="#任务四：" class="headerlink" title="任务四："></a>任务四：</h1><h2 id="任务描述：-3"><a href="#任务描述：-3" class="headerlink" title="任务描述："></a>任务描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将一个数组从左开始第几位之前的进行翻转：翻转数组，如：</span><br><span class="line">将”abcdef”第2位之前（a为0号位置）</span><br><span class="line">进行翻转后为：”bacdef“。</span><br></pre></td></tr></table></figure>

<h2 id="代码逻辑：-4"><a href="#代码逻辑：-4" class="headerlink" title="代码逻辑："></a>代码逻辑：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 输入字符串和翻转位</span><br><span class="line">2. 将字符串转换为char型数组，并新建一个char型数组存储反转后的数据。</span><br><span class="line">3. 存储翻转位之前的数组元素</span><br><span class="line">4. 存储翻转位之后的数组元素</span><br><span class="line">5. 将翻转数组转化位字符串</span><br><span class="line">6. 输出翻转字符串</span><br></pre></td></tr></table></figure>

<h2 id="代码实现：-4"><a href="#代码实现：-4" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Two_String_4</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//输入字符串和翻转位</span></span><br><span class="line">		System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">		String str = scan.nextLine();</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入翻转位：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> location = scan.nextInt();</span><br><span class="line">		scan.close();</span><br><span class="line">		<span class="comment">//将字符串转换为char型数组，并新建一个char型数组存储翻转后的数据。</span></span><br><span class="line">		<span class="keyword">char</span>[] chr = str.toCharArray();</span><br><span class="line">		<span class="keyword">char</span>[] chr_new = <span class="keyword">new</span> <span class="keyword">char</span>[str.length()];</span><br><span class="line">		<span class="comment">//存储旋翻转位之前的数组元素</span></span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = location - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j --) &#123;</span><br><span class="line">			chr_new[i] = chr[j];</span><br><span class="line">			i ++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//存储翻转位之后的数组元素</span></span><br><span class="line">		<span class="keyword">int</span> m = location;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> n = location; n &lt;= str.length() - <span class="number">1</span>; n++ ) &#123;</span><br><span class="line">			chr_new[m] = chr[n];</span><br><span class="line">			m ++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将翻转数组转化位字符串</span></span><br><span class="line">		String str_new = <span class="keyword">new</span> String(chr_new);</span><br><span class="line">		<span class="comment">//输出翻转字符串</span></span><br><span class="line">		System.out.println(<span class="string">&quot;翻转后的字符串为：&quot;</span> + str_new);	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行检测：-3"><a href="#运行检测：-3" class="headerlink" title="运行检测："></a>运行检测：</h2><p><img src="https://i.loli.net/2021/10/03/TxVX8nqWM1ejDI3.jpg"></p>
<h2 id="自评：-4"><a href="#自评：-4" class="headerlink" title="自评："></a>自评：</h2><p>和任务三的代码逻辑一样，没有什么难度，任务三的代码稍加修改就是任务四</p>
<h2 id="收获：-1"><a href="#收获：-1" class="headerlink" title="收获："></a>收获：</h2><p><a href="https://dengxiayouhun.github.io/2021/10/03/Java%E8%BE%93%E5%87%BA%E8%AF%AD%E5%8F%A5%E4%B8%AD%E7%9A%84println%E3%80%81print%E5%92%8Cprintf/">Java输出语句中的println、print和printf</a></p>
<h1 id="任务五："><a href="#任务五：" class="headerlink" title="任务五："></a>任务五：</h1><h2 id="任务描述：-4"><a href="#任务描述：-4" class="headerlink" title="任务描述："></a>任务描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编写一个程序，将下面的一段文本中的各个单词的字母顺序翻转，</span><br><span class="line">“To be or not to bo” 将变成</span><br><span class="line">”oT eb ro ton ot ob. ”。(后面加.) </span><br><span class="line"></span><br><span class="line">直接来个plus版本的，可将任意输入的文本座椅上变换</span><br></pre></td></tr></table></figure>

<h2 id="代码逻辑：-5"><a href="#代码逻辑：-5" class="headerlink" title="代码逻辑："></a>代码逻辑：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 输入字符串：</span><br><span class="line">2. 使用split将字符串转化为字符串数组并存储到定义的字符串数组中</span><br><span class="line">3. 用for语句将对所有数组元素的翻转处理，转换成对单个数组元素的翻转处理。</span><br><span class="line">4. 对单个字符串的翻转处理：</span><br><span class="line">	用substring方法提取子串，然后反向拼接赋值给原字符串数组。</span><br><span class="line">5. 使用print和for语句输出字符串数组，并在最后添加一个“.”</span><br></pre></td></tr></table></figure>

<h2 id="代码实现：-5"><a href="#代码实现：-5" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Three_String_5</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//输入字符串</span></span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入一句英文（最好不要加标点符号&gt;-&lt;）：&quot;</span>);</span><br><span class="line">		String str = scan.nextLine();</span><br><span class="line">		scan.close();</span><br><span class="line">		<span class="comment">//使用split将字符串转化为字符串数组并存储到定义的字符串数组中</span></span><br><span class="line">		String[] stri = <span class="keyword">new</span> String[<span class="number">20</span>];</span><br><span class="line">		stri = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		<span class="comment">//用for语句将对所有数组元素的翻转处理，转换成对单个数组元素的翻转处理。</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= stri.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="comment">//用substring方法提取子串</span></span><br><span class="line">			String[] sub = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= stri[i].length() - <span class="number">1</span>; j ++) &#123;</span><br><span class="line">				sub[j] = stri[i].substring(j, j + <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//反向拼接赋值给原字符串数组</span></span><br><span class="line">			<span class="keyword">int</span> length = stri[i].length();</span><br><span class="line">			stri[i] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = length - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k --) &#123;</span><br><span class="line">				stri[i] = stri[i] + sub[k];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//使用print和for语句输出字符串数组，并在最后添加一个“.”</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>; m &lt;= stri.length - <span class="number">1</span>; m ++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(m &lt; stri.length - <span class="number">1</span>)</span><br><span class="line">				System.out.print(stri[m] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				System.out.print(stri[m] + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行检测：-4"><a href="#运行检测：-4" class="headerlink" title="运行检测："></a>运行检测：</h2><p><img src="https://i.loli.net/2021/10/03/cvWs14leFpxiNhO.jpg"></p>
<p><img src="https://i.loli.net/2021/10/03/34BVADsE6I2RStq.jpg"></p>
<h2 id="自评：-5"><a href="#自评：-5" class="headerlink" title="自评："></a>自评：</h2><p>难度和三、四差不多，还是先设计代码逻辑，然后搭框架，之后填充代码。</p>
<h2 id="API文档：-2"><a href="#API文档：-2" class="headerlink" title="API文档："></a>API文档：</h2><p><img src="https://i.loli.net/2021/10/03/CtU6ad2Bx1LAJXu.jpg"></p>
<p><img src="https://i.loli.net/2021/10/03/tOsyv251NwSeHlF.jpg"></p>
<h1 id="任务六："><a href="#任务六：" class="headerlink" title="任务六："></a>任务六：</h1><h2 id="任务描述：-5"><a href="#任务描述：-5" class="headerlink" title="任务描述："></a>任务描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串转化（压缩）。</span><br><span class="line">如：“aabbccdaa”--------“a2b2c2d1a2”</span><br></pre></td></tr></table></figure>

<h2 id="代码逻辑：-6"><a href="#代码逻辑：-6" class="headerlink" title="代码逻辑："></a>代码逻辑：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 输入一串字符串</span><br><span class="line">2. 定义一个StringBuilder变量</span><br><span class="line">3. 用toCharArray方法将字符串转化成char型数组</span><br><span class="line">4. 定义一个char类型的变量来获取字符</span><br><span class="line">5. 定义一个int类型的变量来获取压缩数量</span><br><span class="line">6. 用for语句和contion来让char和int获取正确的数值，并用append方法进行拼接</span><br><span class="line">7. StringBuilder变量转化为String变量输出(不转化直接输出也行)</span><br></pre></td></tr></table></figure>

<h2 id="代码实现：-6"><a href="#代码实现：-6" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Three_String_6</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//输入一串字符串</span></span><br><span class="line">       	System.out.println(<span class="string">&quot;请输入一串字符串：&quot;</span>);</span><br><span class="line">       	Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       	String str = scan.nextLine();</span><br><span class="line">       	scan.close();</span><br><span class="line">        <span class="comment">//定义相关变量</span></span><br><span class="line">       	StringBuilder a = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">       	<span class="keyword">char</span>[] b = str.toCharArray();</span><br><span class="line">       	<span class="keyword">char</span> char1 = str.charAt(<span class="number">0</span>);</span><br><span class="line">       	<span class="keyword">int</span> count = <span class="number">1</span>;<span class="comment">//计数</span></span><br><span class="line">       	<span class="comment">//用for语句和contion来让char和int获取正确的数值，并用append方法进行拼接</span></span><br><span class="line">       	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; b.length; i ++) &#123;</span><br><span class="line">       		<span class="keyword">if</span> (char1 == str.charAt(i)) &#123;</span><br><span class="line">       			count++;</span><br><span class="line">       			<span class="keyword">continue</span>;</span><br><span class="line">        	&#125;</span><br><span class="line">        	a = a.append(char1).append(count);</span><br><span class="line">       		count = <span class="number">1</span>;</span><br><span class="line">       		char1 = str.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">       	a = a.append(char1).append(count);</span><br><span class="line">       	<span class="comment">//StringBuilder变量转化为String变量输出</span></span><br><span class="line">       	System.out.println(<span class="string">&quot;经压缩后为：&quot;</span> + a.toString());</span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行检测：-5"><a href="#运行检测：-5" class="headerlink" title="运行检测："></a>运行检测：</h2><p><img src="https://i.loli.net/2021/10/03/b1v3VCBMI496dw5.jpg"></p>
<h2 id="API文档：-3"><a href="#API文档：-3" class="headerlink" title="API文档："></a>API文档：</h2><p><img src="https://i.loli.net/2021/10/03/XW5AcQbSsl71qj6.jpg"></p>
<p>其实append方法有很多个，但都只是参数不同。</p>
<p><img src="https://i.loli.net/2021/10/03/oL2yC8P1t3ZMqGb.jpg"></p>
<p><img src="https://i.loli.net/2021/10/03/1ZEIrUA6YgFO79t.jpg"></p>
<h2 id="自评：-6"><a href="#自评：-6" class="headerlink" title="自评："></a>自评：</h2><ul>
<li>个人认为这个程序相当优秀</li>
<li>我承认这个程序的主体逻辑是我在CSDN上抄的。我原本也写了一个，但是逻辑太过复杂，代码量足足122行，而且最后运行结果还未达到目标，和这个确实比不了，所以也就不拿出来了。</li>
</ul>
<h1 id="感想："><a href="#感想：" class="headerlink" title="感想："></a>感想：</h1><ol>
<li><p><strong>API文档是个好东西</strong></p>
<p>背API文档里常用类的方法，或者至少熟读是非常重要的。</p>
<p>在编程中如果我们知道许多API文档里的方法，原来需要写100多行的代码往往很可能只需要2、30行就能搞定，而且效率一般会更高。</p>
<p>而且，熟练运用API文档也是面向对象编程的要求之一。</p>
</li>
<li><p><strong>注释是个好东西</strong></p>
<p>大家还是要尽量的去给代码写上注释。</p>
<ol>
<li><p>方便：</p>
<p>很多比较复杂的程序，出现bug是很正常的感觉。如果很长的程序出现了bug，而且还们写注释就会有一种“似曾相识的感觉”，一脸懵逼根本无从下手，根本不敢随意修改。如果加上注释，无论是阅读代码还是修改bug都会方便得多。</p>
</li>
<li><p>规范代码：</p>
<p>很多人代码习惯都很一般（比如我），经常不经意间就写了好些垃圾代码。而写注释的过程就是优化代码的过程，很多垃圾代码都会因为没办法添加注释而被修改、删掉。所以说长期写注释对规范代码也有一定作用。</p>
</li>
<li><p><strong>先设计代码逻辑（框架），再动手写代码</strong></p>
<p>这个相当重要，很多代码其实写代码并不重要。一些复杂的代码只要代码逻辑设计好，框架搭起来，代码也就完成了一大半。剩下的只需要去无脑的堆代码即可。</p>
<p>而且，经常设计代码逻辑也有助于拔高视野，能避免在写体量较大的代码时出现走迷宫一样的困境。</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>查找线性表中是否有某元素（顺序结构）</title>
    <url>/2021/09/27/%E6%9F%A5%E6%89%BE%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B8%AD%E7%BB%99%E6%98%AF%E5%90%A6%E6%9C%89%E6%9F%90%E5%85%83%E7%B4%A0%EF%BC%88%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="operation"><a href="#operation" class="headerlink" title="operation"></a>operation</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InitList(L):初始化线性表</span><br><span class="line">ListInsert(*L, i, e):在线性表中的第i个位置插入新元素e</span><br><span class="line">LocateElem(L, e):查找线性表中是否有某元素</span><br></pre></td></tr></table></figure>

<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.定义线性表类型的对象L。</span></span><br><span class="line"><span class="comment">2.初始化线性表L，并输出其长度。</span></span><br><span class="line"><span class="comment">3.在表头依次插入1~5，输出其长度，并判断L是否为空。</span></span><br><span class="line"><span class="comment">4.判断元素3在不在L中，若在，则输出其位置，若不在，则输出”没有该元素“；</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul>
<li><p>C</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//抽象数据类型，是线性表中数据元素的数据类型。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//抽象数据类型，是函数返回值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="comment">//初始化线性表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将线性表中第i个位置插入新元素e</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList *L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">    <span class="comment">//判断线性表是否已满  </span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == MAXSIZE)</span><br><span class="line">        <span class="keyword">return</span>  ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span>)<span class="comment">//判断i是否有效</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将第i个位置及其之后的元素后移一位</span></span><br><span class="line">        <span class="keyword">for</span>(k = L-&gt;length<span class="number">-1</span>;k &gt;= i<span class="number">-1</span>; k--)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k+<span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//将新元素插入</span></span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">    <span class="comment">//更新线性表的长度</span></span><br><span class="line">    L-&gt;length ++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找线性表中是否有某元素</span></span><br><span class="line"><span class="function">Status <span class="title">LocateElem</span><span class="params">(SqList L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">//判断线性表是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(L.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="comment">//在线性表中寻找数据元素e，并获取其位置</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; L.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i] == e)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回数据元素e在线性表的位置</span></span><br><span class="line">    <span class="keyword">return</span> (i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;<span class="comment">//定义一个顺序结构的线性表。</span></span><br><span class="line">    Status i;</span><br><span class="line">    </span><br><span class="line">    i = InitList(L);<span class="comment">//初始化线性表L。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L.length = %d\n&quot;</span>,L.length);</span><br><span class="line">    <span class="comment">//在表头依次插入1~5</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)&#123;</span><br><span class="line">        ListInsert(&amp;L, <span class="number">1</span>, j); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L.length = %d\n&quot;</span>,L.length);</span><br><span class="line">    <span class="comment">//判断元素3在不在L中，若在，则输出其位置，若不在，则输出”没有该元素“；</span></span><br><span class="line">    <span class="keyword">int</span> k = LocateElem(L, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span>(k)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;第%d个元素的值为3\n&quot;</span>,k);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有值为3的元素\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>C++</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//抽象数据类型，是线性表中数据元素的数据类型。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//抽象数据类型，是函数返回值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="comment">//初始化线性表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将线性表中第i个位置插入新元素e</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList *L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">    <span class="comment">//判断线性表是否已满  </span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == MAXSIZE)</span><br><span class="line">        <span class="keyword">return</span>  ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span>)<span class="comment">//判断i是否有效</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将第i个位置及其之后的元素后移一位</span></span><br><span class="line">        <span class="keyword">for</span>(k = L-&gt;length<span class="number">-1</span>;k &gt;= i<span class="number">-1</span>; k--)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k+<span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//将新元素插入</span></span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">    <span class="comment">//更新线性表的长度</span></span><br><span class="line">    L-&gt;length ++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找线性表中是否有某元素</span></span><br><span class="line"><span class="function">Status <span class="title">LocateElem</span><span class="params">(SqList L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">//判断线性表是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(L.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="comment">//在线性表中寻找数据元素e，并获取其位置</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; L.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i] == e)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回数据元素e在线性表的位置</span></span><br><span class="line">    <span class="keyword">return</span> (i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;<span class="comment">//定义一个顺序结构的线性表。</span></span><br><span class="line">    Status i;</span><br><span class="line">    </span><br><span class="line">    i = <span class="built_in">InitList</span>(L);<span class="comment">//初始化线性表L。</span></span><br><span class="line">    cout&lt;&lt; <span class="string">&quot;L.length = &quot;</span>&lt;&lt; L.length &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//在表头依次插入1~5</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)&#123;</span><br><span class="line">        <span class="built_in">ListInsert</span>(&amp;L, <span class="number">1</span>, j); </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt; <span class="string">&quot;L.length = &quot;</span> &lt;&lt; L.length &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//判断元素3在不在L中，若在，则输出其位置，若不在，则输出”没有该元素“；</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">LocateElem</span>(L, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span>(k)</span><br><span class="line">            cout&lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; k &lt;&lt; <span class="string">&quot;个元素的值为3\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt; <span class="string">&quot;没有值为3的元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>清空线性表（顺序结构）</title>
    <url>/2021/09/27/%E6%B8%85%E7%A9%BA%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%88%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InitList(L):初始化线性表</span><br><span class="line">ListInsert(*L, i, e):在线性表的第i个位置插入新元素e</span><br><span class="line">ClearList(*L):将线性表清空。</span><br></pre></td></tr></table></figure>

<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.定义线性表类型的对象L。</span></span><br><span class="line"><span class="comment">2.初始化线性表L，并输出其长度。</span></span><br><span class="line"><span class="comment">3.在表头依次插入1~5，输出其长度，并判断L是否为空。</span></span><br><span class="line"><span class="comment">4.清空L，输出其长度，</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul>
<li><p>C</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//抽象数据类型，是线性表中数据元素的数据类型。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//抽象数据类型，是函数返回值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="comment">//初始化线性表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将线性表中第i个位置插入新元素e</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList *L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">    <span class="comment">//判断线性表是否已满  </span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == MAXSIZE)</span><br><span class="line">        <span class="keyword">return</span>  ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span>)<span class="comment">//判断i是否有效</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将第i个位置及其之后的元素后移一位</span></span><br><span class="line">        <span class="keyword">for</span>(k = L-&gt;length<span class="number">-1</span>;k &gt;= i<span class="number">-1</span>; k--)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k+<span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//将新元素插入</span></span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">    <span class="comment">//更新线性表的长度</span></span><br><span class="line">    L-&gt;length ++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空线性表</span></span><br><span class="line"><span class="function">Status <span class="title">ClearList</span><span class="params">(SqList *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;<span class="comment">//将线性表重置为空表</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;<span class="comment">//定义一个顺序结构的线性表。</span></span><br><span class="line">    Status i;</span><br><span class="line">    </span><br><span class="line">    i = InitList(L);<span class="comment">//初始化线性表L。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L.length = %d\n&quot;</span>,L.length);</span><br><span class="line">    <span class="comment">//在表头依次插入1~5</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)&#123;</span><br><span class="line">        ListInsert(&amp;L, <span class="number">1</span>, j); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L.length = %d\n&quot;</span>,L.length);</span><br><span class="line">    <span class="comment">//清空线性表</span></span><br><span class="line">    ClearList(&amp;L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L.length = &quot;</span>,L.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>C++</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//抽象数据类型，是线性表中数据元素的数据类型。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//抽象数据类型，是函数返回值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="comment">//初始化线性表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将线性表中第i个位置插入新元素e</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList *L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">    <span class="comment">//判断线性表是否已满  </span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == MAXSIZE)</span><br><span class="line">        <span class="keyword">return</span>  ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span>)<span class="comment">//判断i是否有效</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将第i个位置及其之后的元素后移一位</span></span><br><span class="line">        <span class="keyword">for</span>(k = L-&gt;length<span class="number">-1</span>;k &gt;= i<span class="number">-1</span>; k--)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k+<span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//将新元素插入</span></span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">    <span class="comment">//更新线性表的长度</span></span><br><span class="line">    L-&gt;length ++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空线性表</span></span><br><span class="line"><span class="function">Status <span class="title">ClearList</span><span class="params">(SqList *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;<span class="comment">//将线性表重置为空表</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;<span class="comment">//定义一个顺序结构的线性表。</span></span><br><span class="line">    Status i;</span><br><span class="line">    </span><br><span class="line">    i = <span class="built_in">InitList</span>(L);<span class="comment">//初始化线性表L。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;L.length = &quot;</span> &lt;&lt; L.length &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//在表头依次插入1~5</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)&#123;</span><br><span class="line">        <span class="built_in">ListInsert</span>(&amp;L, <span class="number">1</span>, j); </span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;L.length = &quot;</span> &lt;&lt; L.length &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//清空线性表</span></span><br><span class="line">    <span class="built_in">ClearList</span>(&amp;L);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;L.length = &quot;</span> &lt;&lt; L.length &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法(未完成)</title>
    <url>/2021/09/08/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="算法的定义"><a href="#算法的定义" class="headerlink" title="算法的定义"></a>算法的定义</h2><p>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列。并且每条指令表示一个或多个操作。</p>
<h3 id="为什么要学习更加优秀的算法？"><a href="#为什么要学习更加优秀的算法？" class="headerlink" title="为什么要学习更加优秀的算法？"></a>为什么要学习更加优秀的算法？</h3><p>在此之前先讲一个伟大数学家高斯关于算法的故事：</p>
<blockquote>
<p>据说18世纪生于德国小村庄的高斯，上小学的一天，课堂很乱，老师非常生气。于是老师在放学时，就要求每个学生都计算1+2+3+···+100的结果，谁先算出来谁先回家。</p>
<p>天才当然不会被这样的问题难倒，高斯很快就的处理了答案，是5050.老师非常惊讶，因为他自己也是通过1+2=3，3+3=6,6+4=10, ······，4950+100=5050这样算出来的，也算了很久很久，怕算错，还算了两三遍。可眼前这个少年，一个上小学的孩子为何可以这么快的得出结果？</p>
<p>高斯解释道：sum=1+2+3+···+99+100</p>
<p>​                     sum=100+99+98+···+2+1</p>
<p>​                     2 x sum=101+101+101+···+101=101 x 100=10100</p>
<p>​                     sump>
</blockquote>
<p>这里老师和高斯就用了两种算法：</p>
<p>老师的算法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,n=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    sum=sum+i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br></pre></td></tr></table></figure>

<p>高斯的算法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,n=<span class="number">100</span>;</span><br><span class="line">sum=(<span class="number">1</span>+n)*n/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br></pre></td></tr></table></figure>

<p>很明显，高斯的算法比老师的算法要好得多，尤其是当n的值越来越大时，高斯的算法简直是对老师算法降维打击。</p>
<p>现在我们回到主题：<strong>为什么我们要学习更加优秀的算法？</strong></p>
<p>很简单，节约算力。</p>
<p>众所周知，计算机的算力要远远强于人类。但如果把n的值换成100亿，计算机用老师的算法，我们用高斯的算法，谁算的更快呢？很显然我们能够轻松地在两三分钟内算出结果，而计算机很可能算一年也算不出来，甚至可能直接嗝屁。</p>
<p>所以说，一个优秀的算法能够让我们用有限的算力处理更复杂的问题，而且往往越秀的算法往往对垃圾算法是降维打击的。</p>
<h2 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h2><p>算法有五个基本特性：<strong>输入</strong>、<strong>输出</strong>、<strong>有穷性</strong>、<strong>确定性</strong>和<strong>可行性</strong></p>
<h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><ul>
<li><p>算法有零个或者多个输入</p>
</li>
<li><p>算法至少有一个或者多个输出</p>
<p>这个输出值可以是打印输出，也可以是返回一个或多个值。</p>
</li>
</ul>
<h3 id="有穷性"><a href="#有穷性" class="headerlink" title="有穷性"></a>有穷性</h3><p>指算法在执行有限的步骤后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。</p>
<h3 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h3><p>算法的每一步骤都具有确定的含义，不会出现二义性。</p>
<h3 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h3><p>算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成</p>
<h2 id="算法的设计要求"><a href="#算法的设计要求" class="headerlink" title="算法的设计要求"></a>算法的设计要求</h2><p>我们要尽可能地去写一些好的算法，然而什么是好的算法呢？</p>
<p>好的算法一般具有<strong>正确性</strong>、<strong>可读性</strong>、<strong>健壮性</strong>、<strong>时间效率高</strong>和<strong>存储量低</strong>的特点。</p>
<h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><p>算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性能正确反应web提的需求，能够i要得到问题的正确答案。</p>
<ul>
<li>算法正确性的级别：<ol>
<li>算法程序的语法没有错误</li>
<li>算法程序对于合法的输入数据能够得到满足需求的输出结果</li>
<li>算法程序对于非法的输入数据能够给出错误说明</li>
<li>算法程序对于精心选择的、刁钻的测试数据都能给出满足需求的输出结果</li>
</ol>
</li>
<li>一般我们对算法正确性的要求？<br>算法正确性的四个级别，第一层是最容易做到的，第四层是最难做到的。通常我们如果要写出第四层的算法会消耗大量的时间和精力。因此，综合考虑，一般情况下，我们把第三层作为一个算法是否正确的标准。</li>
</ul>
<h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><p>算法设计的另一目的是为了便于理解阅读和交流。</p>
<p>算法不仅需要让自己读懂，而且需要让别人读懂。</p>
<h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><p>健壮性指当输入数据不合法时，算法也能做出相应处理，而不是运行异常，或者输出莫名其妙的结果。</p>
<h3 id="时间效率高和存储量低"><a href="#时间效率高和存储量低" class="headerlink" title="时间效率高和存储量低"></a>时间效率高和存储量低</h3><p> 好的算法应该具有时间效率高和存储量低的特性。</p>
<h2 id="算法效率的度量方法"><a href="#算法效率的度量方法" class="headerlink" title="算法效率的度量方法"></a>算法效率的度量方法</h2><h3 id="事后统计法"><a href="#事后统计法" class="headerlink" title="事后统计法"></a>事后统计法</h3><p>事后统计法是指通过设计好的程序和数据来对不同的算法进行测试，比较它们运行的时间的多少。</p>
<ul>
<li>事后统计法的缺点：<ol>
<li>必须把算法写出来后才能直达票算法的效率，如果算法不符合要求，写算法花费的工夫就会竹篮打水一场空。</li>
<li>运行时间不完全依赖于算法，还和软件、操作系统、编译器等因素有关。甚至同一台计算机不同时候测试同一个算法，得到的运行时间也是不完全相同的，因为运行时间还和内存的占用情况相关。因此，测出的时间有时并不能反映什么。</li>
<li>算法的测试数据实际困难，不同算法间运行速度的差异往往与数据规模有关。比如果我们要将0随机数排序，那么无论我们用任何算法，运行时间几乎都差不多。而如果给一百万个随机数排列，不同算法之间差异会很大，而且有些算法对CPU相当不友好0.0!</li>
</ol>
</li>
</ul>
<h3 id="事前分析估算法"><a href="#事前分析估算法" class="headerlink" title="事前分析估算法"></a>事前分析估算法</h3><ul>
<li><p>一个高级语言编译的程序运行时间取决于哪些因素？</p>
<ol>
<li>算法采用的方法、策略</li>
<li>编译产生的代码的质量</li>
<li>问题的输入规模</li>
<li>机器执行指令的速度</li>
</ol>
</li>
</ul>
<h2 id="函数的渐近增长"><a href="#函数的渐近增长" class="headerlink" title="函数的渐近增长"></a>函数的渐近增长</h2><h2 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h2><h3 id="算法时间复杂度定义"><a href="#算法时间复杂度定义" class="headerlink" title="算法时间复杂度定义"></a>算法时间复杂度定义</h3><h3 id="推导大O阶方法"><a href="#推导大O阶方法" class="headerlink" title="推导大O阶方法"></a>推导大<em>O</em>阶方法</h3><h3 id="常数阶"><a href="#常数阶" class="headerlink" title="常数阶"></a>常数阶</h3><h3 id="线性阶"><a href="#线性阶" class="headerlink" title="线性阶"></a>线性阶</h3><h3 id="对数阶"><a href="#对数阶" class="headerlink" title="对数阶"></a>对数阶</h3><h3 id="平方阶"><a href="#平方阶" class="headerlink" title="平方阶"></a>平方阶</h3><h2 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h2><h2 id="算法的空间复杂度"><a href="#算法的空间复杂度" class="headerlink" title="算法的空间复杂度"></a>算法的空间复杂度</h2>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>线性表的插入（顺序结构）</title>
    <url>/2021/09/27/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%EF%BC%88%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">InitList(L):初始化线性表</span><br><span class="line">ListInsert(L,i,e):在线性表的第i个位置插入新元素e</span><br></pre></td></tr></table></figure>

<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.定义线性表类型的对象L。</span></span><br><span class="line"><span class="comment">2.初始化线性表L，并输出其长度。</span></span><br><span class="line"><span class="comment">3.在表头依次插入1~5，输出其长度，并判断L是否为空。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul>
<li><p>C</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//抽象数据类型，是线性表中数据元素的数据类型。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//抽象数据类型，是函数返回值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="comment">//初始化线性表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将线性表中第i个位置插入新元素e</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList *L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">    <span class="comment">//判断线性表是否已满  </span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == MAXSIZE)</span><br><span class="line">        <span class="keyword">return</span>  ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span>)<span class="comment">//判断i是否有效</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将第i个位置及其之后的元素后移一位</span></span><br><span class="line">        <span class="keyword">for</span>(k = L-&gt;length<span class="number">-1</span>;k &gt;= i<span class="number">-1</span>; k--)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k+<span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//将新元素插入</span></span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">    <span class="comment">//更新线性表的长度</span></span><br><span class="line">    L-&gt;length ++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;<span class="comment">//定义一个顺序结构的线性表。</span></span><br><span class="line">    Status i;</span><br><span class="line">    </span><br><span class="line">    i = InitList(L);<span class="comment">//初始化线性表L。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L.length = %d\n&quot;</span>,L.length);</span><br><span class="line">    <span class="comment">//在表头依次插入1~5</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)&#123;</span><br><span class="line">        ListInsert(&amp;L, <span class="number">1</span>, j); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L.length = %d\n&quot;</span>,L.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>C++</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//抽象数据类型，是线性表中数据元素的数据类型。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//抽象数据类型，是函数返回值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="comment">//初始化线性表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将线性表中第i个位置插入新元素e</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList *L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">    <span class="comment">//判断线性表是否已满  </span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == MAXSIZE)</span><br><span class="line">        <span class="keyword">return</span>  ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span>)<span class="comment">//判断i是否有效</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将第i个位置及其之后的元素后移一位</span></span><br><span class="line">        <span class="keyword">for</span>(k = L-&gt;length<span class="number">-1</span>;k &gt;= i<span class="number">-1</span>; k--)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k+<span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//将新元素插入</span></span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">    <span class="comment">//更新线性表的长度</span></span><br><span class="line">    L-&gt;length ++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;<span class="comment">//定义一个顺序结构的线性表。</span></span><br><span class="line">    Status i;</span><br><span class="line">    </span><br><span class="line">    i = <span class="built_in">InitList</span>(L);<span class="comment">//初始化线性表L。</span></span><br><span class="line">    cout&lt;&lt; <span class="string">&quot;L.length = &quot;</span> &lt;&lt; L.length &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//在表头依次插入1~5</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)&#123;</span><br><span class="line">        <span class="built_in">ListInsert</span>(&amp;L, <span class="number">1</span>, j); </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt; <span class="string">&quot;L.length = &quot;</span> &lt;&lt; L.length &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>线性表的输出（顺序结构）</title>
    <url>/2021/09/27/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E8%BE%93%E5%87%BA%EF%BC%88%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>线性表（二）——顺序储存结构（未完成）</title>
    <url>/2021/09/21/%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E5%82%A8%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">operation</span></span><br><span class="line"><span class="function">    <span class="title">InitList</span><span class="params">(L)</span>:初始化操作，建立一个空的线性表L。</span></span><br><span class="line"><span class="function">	<span class="title">ListEmpty</span><span class="params">(L)</span>:若线性表为空，返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。</span></span><br><span class="line"><span class="function">	<span class="title">ClearList</span><span class="params">(*L)</span>:将线性表清空。</span></span><br><span class="line"><span class="function">	<span class="title">GetElem</span><span class="params">(L,i,*e)</span>:将线性表L的第i个位置元素返回给e。</span></span><br><span class="line"><span class="function">    <span class="title">LocateElem</span><span class="params">(L,e)</span>:在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中的序号表示成功，否则，返回0表示失败。</span></span><br><span class="line"><span class="function">    <span class="title">ListInsert</span><span class="params">(*L,i,e)</span>:在线性表L中的第i个位置插入新元素e。</span></span><br><span class="line"><span class="function">    <span class="title">ListDelet</span><span class="params">(*L,i,*e)</span>:删除线性表L中第i个位置的元素，并用e返回其值。</span></span><br><span class="line"><span class="function">    <span class="title">ListLength</span><span class="params">(L)</span>:返回线性表L的元素个数。</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>方法&amp;链接</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://dengxiayouhun.github.io/2021/09/27/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%88%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%EF%BC%89/">初始化线性表（顺序结构）</a></td>
</tr>
<tr>
<td><a href="https://dengxiayouhun.github.io/2021/09/27/%E5%88%A4%E6%96%AD%E7%BA%BF%E6%80%A7%E8%A1%A8%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%EF%BC%88%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%EF%BC%89/">判断线性表是否为空（顺序结构）</a></td>
</tr>
<tr>
<td><a href="https://dengxiayouhun.github.io/2021/09/27/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%EF%BC%88%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%EF%BC%89/">线性表的插入（顺序结构）</a></td>
</tr>
<tr>
<td><a href="https://dengxiayouhun.github.io/2021/09/27/%E6%9F%A5%E6%89%BE%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B8%AD%E7%BB%99%E6%98%AF%E5%90%A6%E6%9C%89%E6%9F%90%E5%85%83%E7%B4%A0%EF%BC%88%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%EF%BC%89/">查找线性表中是否有某元素（顺序结构）</a></td>
</tr>
<tr>
<td><a href=""></a></td>
</tr>
<tr>
<td><a href="https://dengxiayouhun.github.io/2021/09/27/%E6%B8%85%E7%A9%BA%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%88%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%EF%BC%89/">清空线性表（顺序结构）</a></td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这个程序要完成以下任务：</span></span><br><span class="line"><span class="comment">	1.定义线性表类型的对象L和Lb</span></span><br><span class="line"><span class="comment">	2.初始化线性表L，并输出其长度。</span></span><br><span class="line"><span class="comment">	3.在表头依次插入1~5，输出其长度，并判断L是否为空。</span></span><br><span class="line"><span class="comment">	4.清空L，输出其长度，并判断其是否为空。</span></span><br><span class="line"><span class="comment">	5.在表尾依次插入1~10，依次输出L的元素和它的长度。</span></span><br><span class="line"><span class="comment">	6.在表头插入0，依次输出L的元素和它的长度。</span></span><br><span class="line"><span class="comment">	7.输出第五个元素的值；</span></span><br><span class="line"><span class="comment">      判断元素3在不在L中，若在，则输出其位置，若不在，则输出”没有该元素“；</span></span><br><span class="line"><span class="comment">      依次输出L的元素。</span></span><br><span class="line"><span class="comment">    8.删除第5个元素，输出其值，并依次输出L的元素。</span></span><br><span class="line"><span class="comment">    9.初始化线性表Lb，并将6~15依次插入到表尾。</span></span><br><span class="line"><span class="comment">    10.求L与Lb的并集并将并集赋值给L，并输出Lb。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAlSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//ElemType是线性表中数据元素的类型，是抽象数据类型。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//Status是函数的类型，也是抽象数据类型。</span></span><br><span class="line"><span class="comment">//初始化顺序线性表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L-&gt;length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断顺序线性表是否为空，</span></span><br><span class="line"><span class="function">Status <span class="title">ListEmpty</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.length==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将顺序线性表重置为空表</span></span><br><span class="line"><span class="function">Status <span class="title">ClearList</span><span class="params">(SqLIst *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L-&gt;length=<span class="number">0</span>;<span class="comment">//将线性表重置为空表</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取顺序线性表中第i个元素并把值赋给e</span></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(SqList L,<span class="keyword">int</span> i,ElemType *e)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L.length==<span class="number">0</span>||i&lt;<span class="number">1</span>||i&gt;L.length)<span class="comment">//判断i是否合法</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    </span><br><span class="line">    *e=L.data[i<span class="number">-1</span>];<span class="comment">//将第i个数据元素赋值给e。</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求e在顺序线性表中的位置</span></span><br><span class="line"><span class="function">Status <span class="title">LocateList</span><span class="params">(SqList L,ElemType e）</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> i;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">if</span>(L.length==<span class="number">0</span>)<span class="comment">//判断线性表是否为空</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">return</span> ERROR;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//在线性表中寻找数据元素e，并获取其位置</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)</span></span></span><br><span class="line"><span class="params"><span class="function">    &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">if</span>(L.data[i]==e)</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//返回数据元素e在线性表的位置</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> i+<span class="number">1</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//将数据元素e插入到数据表L的第i个位置之前</span></span></span></span><br><span class="line"><span class="params"><span class="function">Status ListInsert(SqList *L,<span class="keyword">int</span> i,ElemType e)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> k;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">if</span>(L-&gt;length == MAXSIZE)<span class="comment">//判断线性表是否已满</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">return</span> ERROR;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> ||i &gt; L-&gt;length+<span class="number">1</span>)<span class="comment">//判断i是否有效</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">return</span> ERROR;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//将第i位空出</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">if</span>(i &lt;= L.length)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">for</span>(k = L-&gt;length<span class="number">-1</span>; k &gt;= i<span class="number">-1</span>; k--)</span></span></span><br><span class="line"><span class="params"><span class="function">            L-&gt;data[k+<span class="number">1</span>]=L-&gt;data[k];</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//填充第i位的元素</span></span></span></span><br><span class="line"><span class="params"><span class="function">    L-&gt;data[i<span class="number">-1</span>]=e;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//线性表长度+1</span></span></span></span><br><span class="line"><span class="params"><span class="function">    L-&gt;length++;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> OK;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//删除线性表中的第i个数据元素,并用e返回其值</span></span></span></span><br><span class="line"><span class="params"><span class="function">Status ListDelete(SqList *L, <span class="keyword">int</span> i, ElemType *e)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> k;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//判断方法是否有意义</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">if</span>(L-&gt;length == <span class="number">0</span> || i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">return</span> ERROR;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//用e返回第i个元素的值</span></span></span></span><br><span class="line"><span class="params"><span class="function">    *e = L-&gt;data[i - <span class="number">1</span>];</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//删除第i个元素，并将后面的元素前移</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">for</span>(k = i;k &lt; L-&gt;length;k++)</span></span></span><br><span class="line"><span class="params"><span class="function">        L-&gt;data[k<span class="number">-1</span>] = L-&gt;data[k]</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//线性表长度-1</span></span></span></span><br><span class="line"><span class="params"><span class="function">    L-&gt;length--;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> OK;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">Status ListTraverse(SqList L)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> i;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;L.length;i++)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        visit(L.data[i]);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> OK;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">Status visit(ElemType c)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> OK;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">void</span> unionL(SqList *La,SqList Lb)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> La_len,Lb_len,i;</span></span></span><br><span class="line"><span class="params"><span class="function">    Elemtype e;</span></span></span><br><span class="line"><span class="params"><span class="function">    La_len = La-&gt;length;</span></span></span><br><span class="line"><span class="params"><span class="function">    Lb_len = Lb.length;</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">for</span>(i=<span class="number">1</span>; i &lt;= Lb_len; i++)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">	GetElem(Lb, i, &amp;e);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">if</span>(!LocateElem(*La, e))</span></span></span><br><span class="line"><span class="params"><span class="function">        ListInsert(La,++La_len,e);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">int</span> main()</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    SqList L;<span class="comment">//定义一个线性表类型的对象L（虽然C语言中不这么叫，但我还是习惯性地称之为对象（调皮））</span></span></span></span><br><span class="line"><span class="params"><span class="function">    SqList Lb;<span class="comment">//定义另一个线性表对象Lb</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    ElemType e;</span></span></span><br><span class="line"><span class="params"><span class="function">    Status i;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> j,k;</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">/* 初始化线性表L，并输出其长度。*/</span></span></span></span><br><span class="line"><span class="params"><span class="function">    i=InitList(&amp;L);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;初始化L后：L.length=%d\n&quot;</span>,L.length);</span></span></span><br><span class="line"><span class="params"><span class="function">   </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">/* 在表头依次插入1~5，输出其长度，并判断L是否为空。*/</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)</span></span></span><br><span class="line"><span class="params"><span class="function">        i=LIstInsert(&amp;L,<span class="number">1</span>,j);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;在L的表头依次插入1~5后：L.data=&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    ListTraverse(L);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;L.length=%d \n&quot;</span>,L.length);</span></span></span><br><span class="line"><span class="params"><span class="function">    i=ListEmpty(L);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;L是否空：i=%d(1:是 0：否)\n&quot;</span>,i);</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">/* 清空L，输出其长度，并判断其是否为空。*/</span></span></span></span><br><span class="line"><span class="params"><span class="function">    i=ClearList(&amp;L);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;清空L后，L.length=%d \n&quot;</span>,L.length);</span></span></span><br><span class="line"><span class="params"><span class="function">    i=ListEmpty(L);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;L是否为空：i=%d(1:是 0:否)\n&quot;</span>,i);</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">/* 在表尾依次插入1~10，依次输出L的元素和它的长度。*/</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)</span></span></span><br><span class="line"><span class="params"><span class="function">        ListInsert(&amp;L,j,j);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;在L的表尾依次插入1~10后：L.data=&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    ListTraverse(L);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;L.length=%d \n&quot;</span>,L.length);</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">/* 在表头插入0，依次输出L的元素和它的长度。*/</span></span></span></span><br><span class="line"><span class="params"><span class="function">    ListInsert(&amp;L,<span class="number">1</span>,<span class="number">0</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;在表头插入0后：L.data=&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    ListTraverse(L);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;L.length=&quot;</span>,L.length);</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">/* 输出第五个元素的值；</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">       判断元素3在不在L中，若在，则输出其位置，若不在，则输出”没有该元素“；</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">       依次输出L的元素。*/</span></span></span></span><br><span class="line"><span class="params"><span class="function">    GetElem(L,<span class="number">5</span>,&amp;e);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;第五个元素的值为：%d&quot;</span>,e);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">for</span>(j=<span class="number">3</span>;j&lt;=<span class="number">4</span>;j++)</span></span></span><br><span class="line"><span class="params"><span class="function">    &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        k=LocateElem(L,j);</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">if</span>(k)</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="built_in">printf</span>(<span class="string">&quot;第%d个元素的值为%d\n&quot;</span>,k,j);</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">else</span></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="built_in">printf</span>(<span class="string">&quot;没有值为%d的元素\n&quot;</span>,j);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;依次输出表L的元素：&quot;</span>)；</span></span></span><br><span class="line"><span class="params"><span class="function">    ListTraverse(L);</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">/* 删除第5个元素，输出其值，并依次输出L的元素。*/</span></span></span></span><br><span class="line"><span class="params"><span class="function">    j=<span class="number">5</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    ListDelet(&amp;L,j,&amp;e);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;删除第%d个元素值为：%d\n&quot;</span>,j,e);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;依次输出L的元素：&quot;</span>)；</span></span></span><br><span class="line"><span class="params"><span class="function">    ListTraverse(L);</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">/* 初始化线性表Lb，并将6~15依次插入到表尾。*/</span></span></span></span><br><span class="line"><span class="params"><span class="function">    i=InitList(&amp;Lb);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">for</span>(j=<span class="number">6</span>;j&lt;=<span class="number">15</span>;j++)</span></span></span><br><span class="line"><span class="params"><span class="function">        i=ListInsert(&amp;Lb,<span class="number">1</span>,j);</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    unionL(&amp;L,Lb);<span class="comment">//求L与Lb的并集并将并集赋值给L。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">printf</span>(<span class="string">&quot;依次输出合并了Lb的L的元素：&quot;</span>)；</span></span></span><br><span class="line"><span class="params"><span class="function">    ListTraverse(L);</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> <span class="number">0</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>编译运行一个简单的Java程序&quot;Hello XX&quot;</title>
    <url>/2021/07/24/%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84Java%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><blockquote>
<p>前言：</p>
<p>java有些高级编译器用着是是非常方便的，但是对于初学者并不建议使用。编程过程中很多东西都会由高级编译器自动生成，不利于初学者对于底层原理的理解和手感的锻炼。所以建议初学者只用记事本和命令行进行初期的学习，不要嫌low，这对初学者的学习很有何好处。</p>
</blockquote>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="打开记事本"><a href="#打开记事本" class="headerlink" title="打开记事本"></a>打开记事本</h2><p>打开Windows开始界面–&gt;Windows附件–&gt;记事本</p>
<p><img src="https://i.loli.net/2021/07/24/T4j3Qgrmxklpou6.jpg" alt="text"></p>
<h2 id="写一个简单的代码"><a href="#写一个简单的代码" class="headerlink" title="写一个简单的代码"></a>写一个简单的代码</h2><p><img src="https://i.loli.net/2021/07/24/JsE95o2uUgTkyOp.jpg" alt="java"></p>
<p>代码看不懂没关系西，以后总会看懂的 ! </p>
<h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><p><img src="https://i.loli.net/2021/07/24/EJ3p9jyqVaIYAxw.jpg" alt="s"></p>
<p>文件名：xxx.java</p>
<p>编码要调到ANSI</p>
<h1 id="打开命令行进行操作（敲黑板！！！）"><a href="#打开命令行进行操作（敲黑板！！！）" class="headerlink" title="打开命令行进行操作（敲黑板！！！）"></a>打开命令行进行操作（敲黑板！！！）</h1><p><img src="https://i.loli.net/2021/07/24/5feq7gFJo8dYST1.jpg"></p>
<p><img src="https://i.loli.net/2021/07/24/V2W8kyxwnXQ1Y4h.jpg"></p>
<ol>
<li><p>cd到java文档存储的目录</p>
</li>
<li><p>使用javac程序对java文档进行编译</p>
<p>语法：javac 文档名.java</p>
<p>得到class文件，如图：</p>
<p><img src="https://i.loli.net/2021/07/24/fMvcnLzK7yXsilS.jpg" alt="class"></p>
</li>
<li><p>使用java程序运行class文件</p>
</li>
<li><p>退到D盘我们再执行class文件，发现找不到文件。</p>
<p>这是因为我们没有配置class文件的环境变量，为了让我们可以在任何路径执行class文件，我们需要配置classpath环境变量。</p>
</li>
<li><p>配置临时环境变量</p>
<ul>
<li><p>为什么要配置”临时”环境变量？</p>
<p>java开发工具包一般存放在固定的文件夹里，所以我们只需要配置系统环境变量，并且平时几乎不需要改动。</p>
<p>但是class文件我们一般并不是存储在一个目录（文件夹）里。这次此我们要执行A目录里的class文件，下一次我们就可能要执行B目录里的文件，总是对系统环境变量改来改去不仅麻烦而且容易遗忘。</p>
<p>所以我们需要通过配置临时环境变量应对这种情况。</p>
</li>
<li><p>如何配置临时环境变量？</p>
<p>以下指令可以在任意目录下执行：<br>//查看所有环境变量</p>
<p>set</p>
<p>//查看某个环境变量</p>
<p>set Path</p>
<p>//定义某个环境变量</p>
<p>set classpath=路径</p>
<p>//清除环境变量</p>
<p>set classpath=</p>
</li>
<li><p>临时配置环境变量有什么特点？</p>
<ol>
<li>它实际上并不会改变系统的环境变量</li>
<li>只临时起作用，命令行窗口关闭后所有设置全部清零</li>
</ol>
</li>
</ul>
</li>
<li><p>在D盘运行class文件</p>
</li>
<li><p>清楚classpath变量，并在D盘建立一个新的java文档并编译</p>
<p><img src="https://i.loli.net/2021/07/24/lo2PkRQrcN6HdUA.jpg" alt="java"></p>
<p><img src="https://i.loli.net/2021/07/24/VFwyWNLKcgT2CHP.jpg" alt="D"></p>
</li>
<li><p>在D盘运行Hello文件</p>
</li>
<li><p>分别以两种方式设置临时环境变量，并进行以下测试：</p>
<ol>
<li><p>设置classpath=路径；，执行Hello文件，删除”路径“中的class文件，并执行Hello文件</p>
</li>
<li><p>清除classpath，设置classpath=路径，执行Hello文件</p>
</li>
</ol>
<ul>
<li><p>测试结果的原理：<br>调用Java从程序执行class文件时，虚拟机会想寻找classpath中存储的目录下的class文件，之后分三种情况：</p>
<ol>
<li><p>没有设置classpath环境变量：</p>
<p>直接在当前目录下寻找对应的class文件，有则运行，没有则”报错“。</p>
</li>
<li><p>设置了classpath=路径；</p>
<p>虚拟机先查看存储在classpath中的目录下的class文件，若有则执行，若没有则查看当前目录下的class文件，若有则执行，若无则“报错”。</p>
</li>
<li><p>设置了classpath=路径</p>
<p>虚拟机先查看存储在classpath中的目录下的class文件，若有则执行，若没有则 “报错”。</p>
</li>
</ol>
</li>
<li><p>*注：一般推荐使用 classpath=路径 的环境配置方式</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>获取顺序线性表某个位置的元素</title>
    <url>/2021/09/30/%E8%8E%B7%E5%8F%96%E7%BA%BF%E6%80%A7%E8%A1%A8%E6%9F%90%E4%B8%AA%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%85%83%E7%B4%A0%EF%BC%88%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>计算机硬件的简单学习</title>
    <url>/2021/07/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="计算机硬件总览"><a href="#计算机硬件总览" class="headerlink" title="计算机硬件总览"></a>计算机硬件总览</h2><p><img src="https://i.loli.net/2021/07/31/T2SMCboJLxkvnzi.jpg"></p>
<p>*总线：搭建在主板上，数据就是通过总线在各个“设备”之间传递。</p>
<h2 id="冯·诺伊曼体系结构"><a href="#冯·诺伊曼体系结构" class="headerlink" title="冯·诺伊曼体系结构"></a>冯·诺伊曼体系结构</h2><p><img src="https://i.loli.net/2021/07/31/HrKEZeTph6nbBIw.jpg"></p>
<p>冯·诺伊曼体系结构是现代计算机的基础，现在大多数计算机仍是基于冯·诺伊曼体系结构，只是做了一些改进而已。冯·诺伊曼也因此被称为“计算机之父”。</p>
<h2 id="IT行业三大定律"><a href="#IT行业三大定律" class="headerlink" title="IT行业三大定律"></a>IT行业三大定律</h2><ol>
<li><p>摩尔定律：</p>
<p>当价格不变时，集成电路上的元器件大约每隔18~24个月便会增加一倍，性能也会增加一倍。</p>
</li>
<li><p>安迪·比尔定律：</p>
<p>当计算机硬件进行更新时，操作系统（软件）也会跟着更新。</p>
<blockquote>
<p>ps：这也是为什么我们更换了我们的计算机后，我们并没有感到计算机更加流畅原因。因为操作系统也随着硬件的更新而更新了。</p>
</blockquote>
</li>
<li><p>反摩尔定律：</p>
<p>一个IT公司如果今天卖出和18个月前同样多的、同样的商品，它的营业额减半。</p>
</li>
</ol>
<blockquote>
<p>ps：这三大定律其实更像是商业定律，IT行业迭代如此之快，某种意义上也是受了这三大定律的影响。毕竟，如果别的公司遵守这三大定律，而自己的公司不去追赶，早晚会被同行远远甩开。</p>
</blockquote>
<h2 id="中央处理器（CPU）"><a href="#中央处理器（CPU）" class="headerlink" title="中央处理器（CPU）"></a>中央处理器（CPU）</h2><p>CPU是计算机的大脑。它从内存中获取指令，然后执行指令。</p>
<ol>
<li><p>组成：</p>
<ul>
<li>控制单元：从内存中接受指令，并向其他设备、组件发出指令</li>
<li>算术/逻辑单元：完成对数据的逻辑处理。</li>
</ul>
</li>
<li><p>CPU的速度：CPU的速度用赫兹（Hz）表示，1Hz表示计算机每秒能发射一个电子脉冲（可以理解为高低电压电流，对于CPU来说就是‘０’‘１’信号），速度越快CPU在给定时间内执行的指令就越多。目前CPU的速度一般以千兆赫（ＧＨｚ）作为常用单位。</p>
</li>
<li><p>双核ＣＰＵ：</p>
<p>双核CPU实际上就是两个小CPU组成了一个大CPU，只不过一般把小CPU称为“核”。多核可以提高CPU的处理能力。</p>
</li>
</ol>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h3 id="比特（bit）和字节（byte）"><a href="#比特（bit）和字节（byte）" class="headerlink" title="比特（bit）和字节（byte）"></a>比特（bit）和字节（byte）</h3><ul>
<li><p>计算机是一系列电路的集合，通过开和关来实现低电压电流（值为0）和高电压电流（值为1）。一个1或一个0存储为1个比特，比特也是计算机最小的存储单位。</p>
</li>
<li><p>字节是计算机的最基本存储单位，一个字节由8个连续的比特构成。</p>
</li>
<li><p>1千字节（KB）=1024字节（B）</p>
<p>1兆字节（MB）=1024千字节（KB）</p>
<p>1千兆字节（GB）=1024兆字节（MB）</p>
<p>1万亿兆字节（TB）=1024千兆字节（GB）</p>
</li>
</ul>
<h3 id="内存-1"><a href="#内存-1" class="headerlink" title="内存"></a>内存</h3><ul>
<li><p>内存的特点：</p>
<ol>
<li>速度比硬盘快10倍以上，但比CPU慢的多的多。</li>
<li>只能缓存数据，断电数据就会被清除</li>
</ol>
</li>
<li><p>CPU只在内存中处理数据</p>
<p>当需要CPU处理数据时，对应的数据会从硬盘中传递到内存中被CPU执行处理</p>
<blockquote>
<p>CPU的运算速度比硬盘快的太多，如果在硬盘中处理数据会导致速度奇慢（硬盘太慢了），因此CPU在内存中处理数据</p>
</blockquote>
</li>
<li><p>内存越大与计算机速度越快，但如果内存占有没有饱和，内存增大，计算机速度不会增快。</p>
</li>
<li><p>内存的意义：</p>
<p>相当于为电脑开了一个高速公路，解决了CPU在硬盘中处理数据过于缓慢的问题。</p>
</li>
<li><p>内存的每一个字节都对应一个唯一的地址。</p>
</li>
</ul>
<h2 id="存储设备"><a href="#存储设备" class="headerlink" title="存储设备"></a>存储设备</h2><ol>
<li><p>内存</p>
<p>速度快，短暂缓存数据，断电即消失</p>
</li>
<li><p>硬盘</p>
<p>速度慢，永久储存数据。</p>
</li>
</ol>
<h2 id="输入输出设备"><a href="#输入输出设备" class="headerlink" title="输入输出设备"></a>输入输出设备</h2><h3 id="输入设备"><a href="#输入设备" class="headerlink" title="输入设备"></a>输入设备</h3><ul>
<li>键盘</li>
<li>鼠标</li>
</ul>
<h3 id="输出设备"><a href="#输出设备" class="headerlink" title="输出设备"></a>输出设备</h3><ul>
<li>显示器</li>
<li>打印机</li>
<li>音箱</li>
</ul>
<h2 id="通信设备"><a href="#通信设备" class="headerlink" title="通信设备"></a>通信设备</h2><p>用于联网</p>
<ul>
<li>拨号调制解调器</li>
<li>DSL（数字用户线）</li>
<li>电缆调制解调器</li>
<li>网络接口卡</li>
<li>无线网络</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>随机点名小程序</title>
    <url>/2021/10/01/%E9%9A%8F%E6%9C%BA%E7%82%B9%E5%90%8D%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="技能使用："><a href="#技能使用：" class="headerlink" title="技能使用："></a>技能使用：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 数组</span><br><span class="line">2. if语句、while语句、for语句</span><br><span class="line">3. random()方法</span><br></pre></td></tr></table></figure>

<h2 id="任务描述："><a href="#任务描述：" class="headerlink" title="任务描述："></a>任务描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务描述：</span><br><span class="line"> 设计一个随机点名系统。</span><br><span class="line"> 要求：</span><br><span class="line"> 	（1）抽取数量任意定制</span><br><span class="line"> 	（2）屏幕显示学生班级和顺序号</span><br><span class="line">  *补充说明：</span><br><span class="line">  	一共有4个班，每个班30人。</span><br></pre></td></tr></table></figure>

<h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><ul>
<li><p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> one_ten;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 任务描述：</span></span><br><span class="line"><span class="comment"> 设计一个随机点名系统。</span></span><br><span class="line"><span class="comment"> 要求：</span></span><br><span class="line"><span class="comment"> （1）抽取数量任意定制</span></span><br><span class="line"><span class="comment"> （2）屏幕显示学生班级和顺序号</span></span><br><span class="line"><span class="comment">  *补充说明：</span></span><br><span class="line"><span class="comment">  一共有4个班，每个班30人。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Random_student</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//输入抽取同学的个数</span></span><br><span class="line">		System.out.println(<span class="string">&quot;请输入抽取同学的个数（最多抽取99位）：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> count = scan.nextInt();</span><br><span class="line">		scan.close();</span><br><span class="line">		<span class="comment">//创建两个数组分别储存班级和学生</span></span><br><span class="line">		<span class="keyword">int</span>[] student = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">		<span class="keyword">int</span>[] classes = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">100</span>];</span><br><span class="line">		<span class="comment">//两个while语句的参数</span></span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">		count --;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>( i &lt;= count) &#123;</span><br><span class="line">			<span class="comment">//获得一个两位以内的随机数并存储在数组student里</span></span><br><span class="line">			student[i] = (<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">			<span class="comment">//限制student的大小（小于30）</span></span><br><span class="line">			<span class="keyword">if</span>(student[i] &gt;= <span class="number">30</span> || student[i] == <span class="number">0</span>)</span><br><span class="line">				i --;</span><br><span class="line">			<span class="comment">//i++补全循环条件</span></span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>( j &lt;= count) &#123;</span><br><span class="line">			<span class="comment">//获得一个两位以内的随机数并存储在数组classes里</span></span><br><span class="line">			classes[j] = (<span class="keyword">int</span>)(Math.random()*<span class="number">10</span>);</span><br><span class="line">			<span class="comment">//限制classes的大小（小于4且不等于0）</span></span><br><span class="line">			<span class="keyword">if</span>(classes[j] &gt; <span class="number">4</span> || classes[j] == <span class="number">0</span>)</span><br><span class="line">				j --;</span><br><span class="line">			<span class="comment">//j++补全循环条件</span></span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//整齐的输出数据</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(student[k] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span>( (k + <span class="number">1</span>) &lt; <span class="number">10</span>)</span><br><span class="line">					System.out.println( <span class="string">&quot;第0&quot;</span> + (k + <span class="number">1</span>) +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k] + student[k] + <span class="string">&quot;   班级：&quot;</span> + classes[k] + <span class="string">&quot;   序号：&quot;</span> + student[k]);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					System.out.println( <span class="string">&quot;第&quot;</span> + (k + <span class="number">1</span>) +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k] + student[k] + <span class="string">&quot;   班级：&quot;</span> + classes[k] + <span class="string">&quot;   序号：&quot;</span> + student[k]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>( (k + <span class="number">1</span>) &lt; <span class="number">10</span>)</span><br><span class="line">					System.out.println( <span class="string">&quot;第0&quot;</span> + (k + <span class="number">1</span>) +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k] + <span class="string">&quot;0&quot;</span> + student[k] + <span class="string">&quot;   班级：&quot;</span> + classes[k] + <span class="string">&quot;   序号：0&quot;</span> + student[k]);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					System.out.println( <span class="string">&quot;第&quot;</span> + (k + <span class="number">1</span>) +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k] + <span class="string">&quot;0&quot;</span> + student[k] + <span class="string">&quot;   班级：&quot;</span> + classes[k] + <span class="string">&quot;   序号：0&quot;</span> + student[k]);</span><br><span class="line"></span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>运行检测：</p>
<ol>
<li><p>抽取8位同学</p>
<p><img src="https://i.loli.net/2021/10/01/WSznMRjKAkfE2Yq.jpg"></p>
</li>
<li><p>抽取10位同学</p>
<p><img src="https://i.loli.net/2021/10/01/CZNisqy7Gpjt8KJ.jpg"></p>
</li>
<li><p>抽取99位同学</p>
<p><img src="https://i.loli.net/2021/10/01/3fahjQ95EvqGMcu.jpg"></p>
<p><img src="https://i.loli.net/2021/10/01/OGECzL1QNe9uBH4.jpg"></p>
</li>
</ol>
</li>
</ul>
<h2 id="代码自评："><a href="#代码自评：" class="headerlink" title="代码自评："></a>代码自评：</h2><ul>
<li><p>缺点：</p>
<p>没有将重复数据筛选剔除的逻辑，虽然有班级和序号双重保证，但当随机抽取的数量较大时，依旧会出现重复抽取同一位同学的情况。</p>
</li>
<li><p>总结：</p>
<p>只适合小规模随机抽取时使用，如果想要大规模随机抽取则需要添加重复数据的筛选剔除逻辑。</p>
</li>
</ul>
<h2 id="老师评价："><a href="#老师评价：" class="headerlink" title="老师评价："></a>老师评价：</h2><ol>
<li>建议把同一个班的学生放在一起，并对抽到的学生按次序排序。</li>
<li>解决重复数据的问题。</li>
</ol>
<h2 id="Plus版本："><a href="#Plus版本：" class="headerlink" title="Plus版本："></a>Plus版本：</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述:"></a>任务描述:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务描述：</span><br><span class="line">设计一个随机点名系统。</span><br><span class="line">要求：</span><br><span class="line">（1）抽取数量任意定制</span><br><span class="line">（2）屏幕显示学生班级和顺序号</span><br><span class="line"> *补充说明：</span><br><span class="line"> 一共有4个班，每个班30人。</span><br></pre></td></tr></table></figure>



<h3 id="代码逻辑解释："><a href="#代码逻辑解释：" class="headerlink" title="代码逻辑解释："></a>代码逻辑解释：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）输入阶段：</span><br><span class="line">		输入抽取同学的个数。</span><br><span class="line">（2）随机数获取阶段：</span><br><span class="line">		通过random方法获得两个数组的随机数数据，分别用来表示学生的班级信息和序号信息</span><br><span class="line">（3）排除相同班级，相同次序的同学的数据</span><br><span class="line"> 		难点：相同班级不能排除，不同班级相同次序的同学的数据也不能排除</span><br><span class="line">（4）排序阶段</span><br><span class="line">		通过起泡法排序将学生的序号信息进行从大到小排序，并对对应的班级信息做出相应的变化</span><br><span class="line">（5）输出阶段</span><br><span class="line">		通过使用if语句使学生信息按照四个班分块输出；</span><br><span class="line">		通过使用if和for语句令输出信息变得更加整齐（这个用的代码最多，但都是复制粘贴，外加一些小改动。）</span><br></pre></td></tr></table></figure>

<h3 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Random_student</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//输入阶段:</span></span><br><span class="line">		<span class="comment">//输入抽取同学的个数</span></span><br><span class="line">		System.out.println(<span class="string">&quot;请输入抽取同学的个数（最多抽取80位）：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> count = scan.nextInt();</span><br><span class="line">		scan.close();</span><br><span class="line">		<span class="comment">//创建两个数组分别储存班级和学生</span></span><br><span class="line">		<span class="keyword">int</span>[] student = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">200</span>];</span><br><span class="line">		<span class="keyword">int</span>[] classes = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">200</span>];</span><br><span class="line">		<span class="comment">//两个while语句的参数</span></span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">		count --;</span><br><span class="line">		<span class="comment">//定义一个布尔类型的变量来辅助完成相同数据的筛选提出</span></span><br><span class="line">		<span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//随机数获取阶段</span></span><br><span class="line">		<span class="keyword">while</span>( j &lt;= count) &#123;</span><br><span class="line">			<span class="comment">//获得一个两位以内的随机数并存储在数组classes里</span></span><br><span class="line">			classes[j] = (<span class="keyword">int</span>)(Math.random()*<span class="number">10</span>);</span><br><span class="line">			<span class="comment">//限制classes的大小（小于4且不等于0）</span></span><br><span class="line">			<span class="keyword">if</span>(classes[j] &gt; <span class="number">4</span> || classes[j] == <span class="number">0</span>)</span><br><span class="line">				j --;</span><br><span class="line">			<span class="comment">//j++补全循环条件</span></span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>( i &lt;= count) &#123;</span><br><span class="line">			<span class="comment">//获得一个两位以内的随机数并存储在数组student里</span></span><br><span class="line">			student[i] = (<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">			<span class="comment">//限制student的大小（小于30）</span></span><br><span class="line">			<span class="comment">//排除相同班级相同序号的学生数据</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; i; p++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(student[p] == student[i] &amp;&amp; classes[p] == classes[i]) &#123;</span><br><span class="line">					flag = <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(student[i] &gt;= <span class="number">30</span> || student[i] == <span class="number">0</span> || flag)</span><br><span class="line">				i --;</span><br><span class="line">			<span class="comment">//i++补全循环条件</span></span><br><span class="line">			i++;</span><br><span class="line">			flag = <span class="keyword">false</span>;<span class="comment">//吐槽：如果没有这一步会死循环</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//排序阶段：</span></span><br><span class="line">		<span class="comment">//对student[]进行从小到大排序，并对classes[]进行相应的变换</span></span><br><span class="line">		<span class="keyword">int</span> length = i;<span class="comment">//student[]和classes[]的长度</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span> ; m &lt; length - <span class="number">1</span>; m++) &#123;</span><br><span class="line">			<span class="comment">//循环(length-1)次</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; length - <span class="number">1</span> - m; n ++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(student[n] &gt; student[n+<span class="number">1</span>]) &#123;</span><br><span class="line">					<span class="comment">//将小的student[]前移一位</span></span><br><span class="line">					<span class="keyword">int</span> temp1 = student[n];</span><br><span class="line">					student[n] = student[n+<span class="number">1</span>];</span><br><span class="line">					student[n+<span class="number">1</span>] = temp1;</span><br><span class="line">					<span class="comment">//将classes[]同步变换</span></span><br><span class="line">					<span class="keyword">int</span> temp2 = classes[n];</span><br><span class="line">					classes[n] = classes[n+<span class="number">1</span>];</span><br><span class="line">					classes[n+<span class="number">1</span>] = temp2;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line">		</span><br><span class="line">		<span class="comment">//输出阶段：</span></span><br><span class="line">		<span class="comment">//整齐的输出数据</span></span><br><span class="line">		<span class="comment">//整齐输出1班抽中的学生的数据</span></span><br><span class="line">		<span class="keyword">int</span> count1 = <span class="number">1</span>;<span class="comment">//定义1班学生的总体序号</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k1 = <span class="number">0</span>; k1 &lt; i; k1++) &#123;</span><br><span class="line">			<span class="comment">//使学生的学号和班级序号对齐</span></span><br><span class="line">			<span class="keyword">if</span>(classes[k1] == <span class="number">1</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(student[k1] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">					<span class="comment">//使抽取学生的总体序号对齐</span></span><br><span class="line">					<span class="keyword">if</span>( count1 &lt; <span class="number">10</span>)</span><br><span class="line">						System.out.println( <span class="string">&quot;第0&quot;</span> + count1 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k1] + student[k1] + <span class="string">&quot;   班级：&quot;</span> + classes[k1] + <span class="string">&quot;   序号：&quot;</span> + student[k1]);</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						System.out.println( <span class="string">&quot;第&quot;</span> + count1 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k1] + student[k1] + <span class="string">&quot;   班级：&quot;</span> + classes[k1] + <span class="string">&quot;   序号：&quot;</span> + student[k1]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//使抽取学生的总体序号对齐</span></span><br><span class="line">					<span class="keyword">if</span>( count1 &lt; <span class="number">10</span>)</span><br><span class="line">						System.out.println( <span class="string">&quot;第0&quot;</span> + count1 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k1] + <span class="string">&quot;0&quot;</span> + student[k1] + <span class="string">&quot;   班级：&quot;</span> + classes[k1] + <span class="string">&quot;   序号：0&quot;</span> + student[k1]);</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						System.out.println( <span class="string">&quot;第&quot;</span> + count1 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k1] + <span class="string">&quot;0&quot;</span> + student[k1] + <span class="string">&quot;   班级：&quot;</span> + classes[k1] + <span class="string">&quot;   序号：0&quot;</span> + student[k1]);</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line">				count1 ++;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;1班抽中了 &quot;</span> + (count1 - <span class="number">1</span>) + <span class="string">&quot;位同学&quot;</span>);</span><br><span class="line">		<span class="comment">//整齐输出2班抽中的学生的数据</span></span><br><span class="line">		<span class="keyword">int</span> count2 = count1;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k2 = <span class="number">0</span>; k2 &lt; i; k2++) &#123;</span><br><span class="line">			<span class="comment">//使学生的学号和班级序号对齐</span></span><br><span class="line">			<span class="keyword">if</span>(classes[k2] == <span class="number">2</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(student[k2] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">					<span class="comment">//使抽取学生的总体序号对齐</span></span><br><span class="line">					<span class="keyword">if</span>( count2 &lt; <span class="number">10</span>)</span><br><span class="line">						System.out.println( <span class="string">&quot;第0&quot;</span> + count2 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k2] + student[k2] + <span class="string">&quot;   班级：&quot;</span> + classes[k2] + <span class="string">&quot;   序号：&quot;</span> + student[k2]);</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						System.out.println( <span class="string">&quot;第&quot;</span> + count2 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k2] + student[k2] + <span class="string">&quot;   班级：&quot;</span> + classes[k2] + <span class="string">&quot;   序号：&quot;</span> + student[k2]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//使抽取学生的总体序号对齐</span></span><br><span class="line">					<span class="keyword">if</span>( count2 &lt; <span class="number">10</span>)</span><br><span class="line">						System.out.println( <span class="string">&quot;第0&quot;</span> + count2 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k2] + <span class="string">&quot;0&quot;</span> + student[k2] + <span class="string">&quot;   班级：&quot;</span> + classes[k2] + <span class="string">&quot;   序号：0&quot;</span> + student[k2]);</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						System.out.println( <span class="string">&quot;第&quot;</span> + count2 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k2] + <span class="string">&quot;0&quot;</span> + student[k2] + <span class="string">&quot;   班级：&quot;</span> + classes[k2] + <span class="string">&quot;   序号：0&quot;</span> + student[k2]);</span><br><span class="line">				&#125;</span><br><span class="line">				count2 ++;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;2班抽中了 &quot;</span> + (count2 - count1) + <span class="string">&quot;位同学&quot;</span>);</span><br><span class="line">		<span class="comment">//整齐输出3班抽中的学生的数据</span></span><br><span class="line">		<span class="keyword">int</span> count3 = count2;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k3 = <span class="number">0</span>; k3 &lt; i; k3++) &#123;</span><br><span class="line">			<span class="comment">//使学生的学号和班级序号对齐</span></span><br><span class="line">			<span class="keyword">if</span>(classes[k3] == <span class="number">3</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(student[k3] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">					<span class="comment">//使抽取学生的总体序号对齐</span></span><br><span class="line">					<span class="keyword">if</span>( count3 &lt; <span class="number">10</span>)</span><br><span class="line">						System.out.println( <span class="string">&quot;第0&quot;</span> + count3 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k3] + student[k3] + <span class="string">&quot;   班级：&quot;</span> + classes[k3] + <span class="string">&quot;   序号：&quot;</span> + student[k3]);</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						System.out.println( <span class="string">&quot;第&quot;</span> + count3 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k3] + student[k3] + <span class="string">&quot;   班级：&quot;</span> + classes[k3] + <span class="string">&quot;   序号：&quot;</span> + student[k3]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//使抽取学生的总体序号对齐</span></span><br><span class="line">					<span class="keyword">if</span>( count3 &lt; <span class="number">10</span>)</span><br><span class="line">						System.out.println( <span class="string">&quot;第0&quot;</span> + count3 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k3] + <span class="string">&quot;0&quot;</span> + student[k3] + <span class="string">&quot;   班级：&quot;</span> + classes[k3] + <span class="string">&quot;   序号：0&quot;</span> + student[k3]);</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						System.out.println( <span class="string">&quot;第&quot;</span> + count3 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k3] + <span class="string">&quot;0&quot;</span> + student[k3] + <span class="string">&quot;   班级：&quot;</span> + classes[k3] + <span class="string">&quot;   序号：0&quot;</span> + student[k3]);</span><br><span class="line">				&#125;</span><br><span class="line">				count3 ++;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;3班抽中了 &quot;</span> + (count3 - count2) + <span class="string">&quot;位同学&quot;</span>);</span><br><span class="line">		<span class="comment">//整齐输出4班抽中的学生的数据</span></span><br><span class="line">		<span class="keyword">int</span> count4 = count3;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k4 = <span class="number">0</span>; k4 &lt; i; k4++) &#123;</span><br><span class="line">			<span class="comment">//使学生的学号和班级序号对齐</span></span><br><span class="line">			<span class="keyword">if</span>(classes[k4] == <span class="number">4</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(student[k4] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">					<span class="comment">//使抽取学生的总体序号对齐</span></span><br><span class="line">					<span class="keyword">if</span>( count4 &lt; <span class="number">10</span>)</span><br><span class="line">						System.out.println( <span class="string">&quot;第0&quot;</span> + count4 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k4] + student[k4] + <span class="string">&quot;   班级：&quot;</span> + classes[k4] + <span class="string">&quot;   序号：&quot;</span> + student[k4]);</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						System.out.println( <span class="string">&quot;第&quot;</span> + count4 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k4] + student[k4] + <span class="string">&quot;   班级：&quot;</span> + classes[k4] + <span class="string">&quot;   序号：&quot;</span> + student[k4]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//使抽取学生的总体序号对齐</span></span><br><span class="line">					<span class="keyword">if</span>( count4 &lt; <span class="number">10</span>)</span><br><span class="line">						System.out.println( <span class="string">&quot;第0&quot;</span> + count4 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k4] + <span class="string">&quot;0&quot;</span> + student[k4] + <span class="string">&quot;   班级：&quot;</span> + classes[k4] + <span class="string">&quot;   序号：0&quot;</span> + student[k4]);</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						System.out.println( <span class="string">&quot;第&quot;</span> + count4 +<span class="string">&quot;位同学的学号是：202030&quot;</span> + classes[k4] + <span class="string">&quot;0&quot;</span> + student[k4] + <span class="string">&quot;   班级：&quot;</span> + classes[k4] + <span class="string">&quot;   序号：0&quot;</span> + student[k4]);</span><br><span class="line">				&#125;</span><br><span class="line">				count4 ++;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;4班抽中了 &quot;</span> + (count4 - count3) + <span class="string">&quot;位同学&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行检测："><a href="#运行检测：" class="headerlink" title="运行检测："></a>运行检测：</h3><p><img src="https://i.loli.net/2021/10/01/1SjbhLZWOv7yt9w.jpg"></p>
<p><img src="https://i.loli.net/2021/10/01/A7rRvtYGzmjsOLp.jpg"></p>
<p><img src="https://i.loli.net/2021/10/01/NRmrF1Ec8Y72Dvn.jpg"></p>
<h3 id="代码自评：-1"><a href="#代码自评：-1" class="headerlink" title="代码自评："></a>代码自评：</h3><p>Plus版本相比于原版增添了三个功能：</p>
<ol>
<li><p>避免重复抽取同一位同学</p>
<p>Plus版本新增了剔除相同班级、相同序号的数据的逻辑。</p>
</li>
<li><p>数据分块输出</p>
<p>Plus版本可以将输出的数据以班级为依据分四块分别输出。</p>
</li>
<li><p>数据分块排序</p>
<p>Plus版本可以将相同班级的学生以序号为依据，从小到大排序并输出。</p>
<p>总体来说，Plus版本已经具备了一个随机点名小程序的基本功能，除了运行效率不高以外已经没有其他明显的缺点了。</p>
</li>
</ol>
<h3 id="总结（瞎扯两句）："><a href="#总结（瞎扯两句）：" class="headerlink" title="总结（瞎扯两句）："></a>总结（瞎扯两句）：</h3><p>Plus版编写完后的总体感受：太麻烦了，太长了。</p>
<p>只是多了三个功能，但Plus版本相比于原版代码长度增加了2倍，代码量是原版的足足三倍。</p>
<p>但是也没什么办法，只用最基本的流程控制和数组去写程序确实没办法过于简洁，这个问题只有学了面向对象的知识后才能轻松的解决。</p>
<p>总而言之，就是赶紧学面向对象吧，现在连新手村还没出呢！</p>
<p><img src="https://i.loli.net/2021/10/01/kTLIiZq7RQXoW43.jpg"></p>
]]></content>
      <categories>
        <category>小程序实践</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>小程序实践</tag>
      </tags>
  </entry>
</search>
